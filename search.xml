<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022年中秋佳节，于梦开始的地方</title>
    <url>/posts/4798453.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>2020年8月30号从上海回到郑州，到现在已经两年有余了，一切都还不错，嘻嘻。</p>
</blockquote>
<p>上次回来是农历七月十五，刚好一个月。上次回来请了一天假，总共在家待的时间也就两天多一点，比较匆忙，而且事情还比较多，也恰是华北地区一年之中气温最高的时期，回来干了不少活，流了很多很多汗，简直快虚脱了，大概有好长好长时间没有喝酒了，在家里干活喝了一瓶冰镇啤酒，啤酒泡沫翻滚上升，然后炸裂迸发的清香，让人口内生津，几杯啤酒下肚，非常爽。</p>
<p>印象最深的就是干活，手上磨了几个水泡，腿上胳膊上被草化的一道道的，都是血印，都过去一个月了，脚踝上下害清晰可见伤痕。在家里待了两天彷佛过了几个月一般，晒黑了几度，回到郑州的第一个星期，每天午觉都睡不够。时间好快，转眼一个月过去了。</p>
<p>上次回家，跟我舅、我叔聊天，说在家里一年到头赚不了几个钱，这几年过得没有前几年好。这几年每次回来总能听到这样那样的话，不仅仅是我舅、我叔说，从下高铁站，坐上大叔大爷们开的小车，就已经开始在述说了。这是我的家啊，我的乡亲们，希望大家都好！</p>
<p>十五的月亮很美，家里的夜色很美。</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631e029116f2c2beb184564d.jpg"></p>
<p>奶奶的记性变差了。我还记得上次回来奶奶一句话来回问我三四遍，我很担心。今天奶奶喝了好几瓶哇哈哈，她很喜欢喝，到了晚上，还剩一瓶，奶奶让我喝，我说我不喝。奶奶像个小孩子，我故意问奶奶你是不是想喝了，奶奶说她都喝好几瓶了不喝了，让我喝（我不想让奶奶再喝了，奶奶一下子可以喝两瓶呢😃）。过了一会，奶奶又让我喝，奶奶突然不记得她今天喝过好几瓶了😔。但有时，奶奶的记性又很好。</p>
<p>今天天气特别好，我把奶奶的被子、衣服全都拿出来晒晒太阳，让它们吸满阳光的味道，来温暖奶奶，嘻嘻。下午把被子收了铺床，然后我把衣服收了放到床上，奶奶自己叠衣服放好，码成一块一块的（奶奶自己叠的衣服放的位置她自己会记住的，要是我叠好衣服放好再跟奶奶说，那估计她有很大可能就找不到放哪里了）。</p>
<p>上午摘了好多柿子，很甜很甜。把院子里奶奶非要留着的扫帚苗给拔了，给奶奶说了好久才同意我拔，要不然她会说我不听话气她😄（跟宝宝说的一样，老年人的生活要有尊严，当他们左右不了晚辈的时候，希望晚辈们不要做一些他们不想让做的事情，应该跟他们解释，让他们理解为什么这么做，千万别硬着头不解释就做。我以后要这样对待父母奶奶，希望到时候，我的孩子们也会这样对待我）</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631e025416f2c2beb18419fc.jpg"></p>
<p>昨天晚上我说我做饭，然后奶奶趁我出去买馒头蒸了一碗鸡蛋，很好吃，嘻嘻😁。今天中午吃了一大碗烩面，上次回来就想吃，没有吃到，今天吃到了。吃完午饭，给奶奶修马扎。我说我不会修😄（其实我会修，很简单的），然后在奶奶的指导下把马扎断了的绳全拆了，然后找了两双鞋带跟重新编了一下，嘿嘿😄。然后又修了门锁，奶奶夸我修的好😄</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631e018e16f2c2beb1834c44.jpg"></p>
<p>跟发小他爸聊天，他家正在盖楼房，大概率也是缺钱的。发小他爸说话还是那么幽默，我从很小就喜欢听大爷说话，嘻嘻😁。淳朴的劳动人民，都具有苦中作乐的精神。（多说一句：前段时间宝宝让我看风靡B站的“二舅”，我看了觉得挺好的，跟宝宝简单讨论了一下，我俩一致认为这样的苦中作乐的、乐观的、进取的人很常见。）</p>
<p>希望我们都少吃点苦，像一颗树一样，给他阳光水土＆空间，人人都会成长为参天大树。</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631e034316f2c2beb184f53b.jpg"></p>
<p>家就像是一个港湾，外出的游子回到家里可以休整补给一下，然后重新出发。她是我源源不断的动力。愿奶奶身体健康，吃嘛嘛香。大家都要好好的呀，美好的生活就在眼下、在不久的将来。</p>
<p>明天要继续干活————种大蒜😁😁</p>
<p>晚安🌙🌕</p>
<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://home.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>梦开始的地方</tag>
      </tags>
  </entry>
  <entry>
    <title>Actions</title>
    <url>/posts/3405105267.html</url>
    <content><![CDATA[<html><head></head><body><h2 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions"></a>GitHub Actions</h2><p>持续集成、持续部署</p>
</body></html>]]></content>
  </entry>
  <entry>
    <title>CSS -webkit-box-orient: vertical 编译报错之autoprefixer问题</title>
    <url>/posts/2720186853.html</url>
    <content><![CDATA[<html><head></head><body><p>由于各大浏览器的兼容问题，<code>autoprefixer</code> 插件 就可以帮我们自动补齐前缀。它和 <code>less</code>、<code>scss</code> 这样的预处理器不同，它属于<strong>后置处理器</strong>。所谓 预处理器 是指在打包之前进行处理，所谓 后置处理器 是在代码打包生成后再进行处理。</p>
<p><code>autoprefixer</code> 其实是 <code>postCss</code> 的一个插件，<code>postCss</code> 本身是一个用 <code>JavaScript</code> 工具和插件转换 <code>CSS</code> 代码的工具，它提供了许多强大的处理 <code>CSS</code> 的功能</p>
<h2 id="Autoprefixer-css补全前缀功能"><a href="#Autoprefixer-css补全前缀功能" class="headerlink" title="Autoprefixer css补全前缀功能"></a>Autoprefixer css补全前缀功能</h2><ul>
<li><code>Autoprefixer</code>处理前<code>css</code>代码</li>
</ul>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><code>Autoprefixer</code>处理后<code>css</code>代码</li>
</ul>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line"><span class="attribute">display</span>: -ms-flexbox;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="文本超出显示省略号"><a href="#文本超出显示省略号" class="headerlink" title="文本超出显示省略号"></a>文本超出显示省略号</h2><p>布局样式中，经常会遇到超出显示省略号的需求，有的显示一行，有的显示两行、三行，通常采用如下样式：</p>
<ol>
<li>单行</li>
</ol>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">// 文本溢出省略号</span><br><span class="line"><span class="selector-class">.ellipsis</span> {</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>多行</li>
</ol>
<p>这里使用的是<code>less</code>混合传参的方式</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.clamp_fun</span>(<span class="keyword">@line</span>: <span class="number">1</span>) {</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="comment">/* autoprefixer: off*/</span></span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  <span class="comment">/* autoprefixer: on*/</span></span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-line-clamp: @line;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.clamp_1</span> {</span><br><span class="line">  <span class="selector-class">.clamp_fun</span>(<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.clamp_2</span> {</span><br><span class="line">  <span class="selector-class">.clamp_fun</span>(<span class="number">2</span>);</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.clamp_3</span> {</span><br><span class="line">  <span class="selector-class">.clamp_fun</span>(<span class="number">3</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><code>display: -webkit-box;</code> 将对象作为弹性伸缩盒子模型显示。</li>
<li><code>-webkit-line-clamp: 2;</code> 这个属性不是css的规范属性，需要组合上面两个属性，表示显示的行数。</li>
<li><code>-webkit-box-orient: vertical;</code> 从上到下垂直排列子元素（设置伸缩盒子的子元素排列方式）</li>
</ul>
<h2 id="编译报错问题解决"><a href="#编译报错问题解决" class="headerlink" title="编译报错问题解决"></a>编译报错问题解决</h2><p>上面通过注释 <code>autoprefixer off on</code>，编译中报错</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6353957116f2c2beb17617b7.jpg"></p>
<p>这种写法已经过时了，采用下面的写法：</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* autoprefixer: ignore next */</span></span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></tbody></table></figure>

<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>D8调试工具——jsvu的使用细则</title>
    <url>/posts/1327063303.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p><a href="https://source.chromium.org/chromium/chromium/src/+/main:v8/src/d8/"><code>d8</code></a>&nbsp;is V8’s own developer shell.</p>
<p>D8 是一个非常有用的调试工具，你可以把它看成是 debug for V8 的缩写。我们可以使用 d8 来查看 V8 在执行 JavaScript 过程中的各种中间数据，比如作用域、AST、字节码、优化的二进制代码、垃圾回收的状态，还可以使用 d8 提供的私有 API 查看一些内部信息。</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://github.com/GoogleChromeLabs/jsvu">jsvu</a> 是 JavaScript 引擎版本管理工具</p>
<p>以下是在Windows10下的操作，建议在 CMD 窗口里面操作。</p>
<h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><p>前提：node V14+</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g jsvu</span><br></pre></td></tr></tbody></table></figure>

<p>运行 jsvu，交互式命令行选择需要安装的平台和引擎</p>
<blockquote>
<p>安装指定版本的引擎可以参考下面的命令</p>
<p><code>jsvu --os=win64 --engines=v8,v8-debug</code></p>
</blockquote>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184e1c16f2c2beb1dfabd6.png"></p>
<p>执行 jsvu安装引擎，可在 <em>%USERPROFILE%</em> <em>/.jsvu</em> 目录下查看安装的引擎</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184e2b16f2c2beb1dfbc33.png"></p>
<p>安装 v8-debug</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">jsvu --os=win64 --engines=v8-debug</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184e3d16f2c2beb1dfd36c.png"></p>
<h3 id="操作系统支持的引擎"><a href="#操作系统支持的引擎" class="headerlink" title="操作系统支持的引擎"></a>操作系统支持的引擎</h3><table>
<thead>
<tr>
<th><strong>JavaScript engine</strong></th>
<th><strong>Binary name</strong></th>
<th><strong>mac64</strong></th>
<th><strong>mac64arm</strong></th>
<th><strong>win32</strong></th>
<th><strong>win64</strong></th>
<th><strong>linux32</strong></th>
<th><strong>linux64</strong></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/Microsoft/ChakraCore/issues/2278#issuecomment-277301120">Chakra</a></td>
<td>chakra or ch</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td><a href="https://github.com/oracle/graaljs">GraalJS</a></td>
<td>graaljs</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td><a href="https://github.com/facebook/hermes/issues/17">Hermes</a></td>
<td>hermes &amp; hermes-repl</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td><a href="https://bugs.webkit.org/show_bug.cgi?id=179945">JavaScriptCore</a></td>
<td>javascriptcore or jsc</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
<td>✅ *</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td><a href="https://github.com/GoogleChromeLabs/jsvu/issues/73">QuickJS</a></td>
<td>quickjs</td>
<td>❌</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1336514">SpiderMonkey</a></td>
<td>spidermonkey or sm</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=936383">V8</a></td>
<td>v8</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=936383">V8 debug</a></td>
<td>v8-debug</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td><a href="https://github.com/Moddable-OpenSource/moddable-xst">XS</a></td>
<td>xs</td>
<td>✅ (32)</td>
<td>❌</td>
<td>✅</td>
<td>✅ (32)</td>
<td>✅</td>
<td>✅</td>
</tr>
</tbody></table>
<h3 id="查看jsvu版本"><a href="#查看jsvu版本" class="headerlink" title="查看jsvu版本"></a>查看jsvu版本</h3><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line">jsvu -h</span><br><span class="line"></span><br><span class="line">📦 jsvu v1<span class="number">.13</span><span class="number">.3</span> — the JavaScript engine Version Updater 📦</span><br><span class="line"><span class="string">[&lt;engine&gt;@&lt;version&gt;]</span></span><br><span class="line"><span class="string">[--os={mac64,mac64arm,linux32,linux64,win32,win64,default}]</span></span><br><span class="line"><span class="string">[--engines={chakra,graaljs,hermes,javascriptcore,quickjs,spidermonkey,v8,v8-debug,xs},…]</span></span><br><span class="line"></span><br><span class="line">Complete documentation <span class="keyword">is</span> online:</span><br><span class="line">https:<span class="comment">//github.com/GoogleChromeLabs/jsvu#readme</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="2、安装-eshost-cli（这个不安装也不影响使用）"><a href="#2、安装-eshost-cli（这个不安装也不影响使用）" class="headerlink" title="2、安装 eshost-cli（这个不安装也不影响使用）"></a>2、安装 <a href="https://github.com/bterlson/eshost-cli">eshost-cli</a>（这个不安装也不影响使用）</h2><p>管理js引擎，可以调用多个引擎执行js代码，更加方便调试不同引擎下的代码</p>
<figure class="highlight avrasm"><table><tbody><tr><td class="code"><pre><span class="line">npm install -g eshost-<span class="keyword">cli</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="Windows-下配置"><a href="#Windows-下配置" class="headerlink" title="Windows 下配置"></a>Windows 下配置</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">eshost --add <span class="tag">&lt;<span class="name">host</span> <span class="attr">name</span>&gt;</span> <span class="tag">&lt;<span class="name">host</span> <span class="attr">type</span>&gt;</span> <span class="tag">&lt;<span class="name">host</span> <span class="attr">path</span>&gt;</span> --args <span class="tag">&lt;<span class="name">optional</span> <span class="attr">arguments</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>根据需要使用的引擎，自行配置，如下</p>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">eshost --<span class="built_in">add</span> <span class="string">"Chakra"</span> ch <span class="string">"%USERPROFILE%.jsvu\chakra.cmd"</span></span><br><span class="line">eshost --<span class="built_in">add</span> <span class="string">"GraalJS"</span> graaljs <span class="string">"%USERPROFILE%.jsvu\graaljs.cmd"</span></span><br><span class="line">eshost --<span class="built_in">add</span> <span class="string">"JavaScriptCore"</span> jsc <span class="string">"%USERPROFILE%.jsvu\javascriptcore.cmd"</span></span><br><span class="line">eshost --<span class="built_in">add</span> <span class="string">"SpiderMonkey"</span> jsshell <span class="string">"%USERPROFILE%.jsvu\spidermonkey.cmd"</span></span><br><span class="line">eshost --<span class="built_in">add</span> <span class="string">"V8 --harmony"</span> d8 <span class="string">"%USERPROFILE%.jsvu\v8.cmd"</span> --args <span class="string">"--harmony"</span></span><br><span class="line">eshost --<span class="built_in">add</span> <span class="string">"V8"</span> d8 <span class="string">"%USERPROFILE%.jsvu\v8.cmd"</span></span><br><span class="line">eshost --<span class="built_in">add</span> <span class="string">"XS"</span> xs <span class="string">"%USERPROFILE%.jsvu\xs.cmd"</span></span><br></pre></td></tr></tbody></table></figure>

<p>这里我个人配置如下（有没有这个配置貌似没什么影响，）</p>
<figure class="highlight armasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">eshost</span> --<span class="keyword">add</span> <span class="string">"V8"</span> <span class="built_in">d8</span> <span class="string">"C:\Users\xiao.jsvu\v8.cmd"</span></span><br><span class="line"><span class="symbol">eshost</span> --<span class="keyword">add</span> <span class="string">"V8-debug"</span> <span class="built_in">d8</span> <span class="string">"C:\Users\xiao.jsvu\v8-debug.cmd"</span></span><br><span class="line"><span class="symbol">eshost</span> --<span class="keyword">add</span> <span class="string">"V8 --harmony"</span> <span class="built_in">d8</span> <span class="string">"C:\Users\xiao.jsvu\v8.cmd"</span> --args <span class="string">"--harmony"</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><figure class="highlight moonscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="name">C</span>:\Users\xiao.jsvu&gt;eshost <span class="comment">--configure-jsvu</span></span><br><span class="line">Using config <span class="string">"C:\Users\xiao.eshost-config.json"</span></span><br><span class="line">┌──────────────┬──────┬──────────────────────────────────┬───────────┬─────────────┐</span><br><span class="line">│ name         │ <span class="built_in">type</span> │ path                             │ args      │ tags        │</span><br><span class="line">├──────────────┼──────┼──────────────────────────────────┼───────────┼─────────────┤</span><br><span class="line">│ ChakraCore   │ ch   │ <span class="name">C</span>:\Users\xiao.jsvu\chakra.cmd   │           │ <span class="number">1.11</span><span class="number">.24</span>,web │</span><br><span class="line">├──────────────┼──────┼──────────────────────────────────┼───────────┼─────────────┤</span><br><span class="line">│ V8 <span class="comment">--harmony │ d8   │ C:\Users\xiao.jsvu\v8.cmd       │ --harmony │             │</span></span><br><span class="line">├──────────────┼──────┼──────────────────────────────────┼───────────┼─────────────┤</span><br><span class="line">│ V8           │ d8   │ <span class="name">C</span>:\Users\xiao.jsvu\v8.cmd       │           │             │</span><br><span class="line">├──────────────┼──────┼──────────────────────────────────┼───────────┼─────────────┤</span><br><span class="line">│ V8-<span class="built_in">debug</span>     │ d8   │ <span class="name">C</span>:\Users\xiao.jsvu\v8-<span class="built_in">debug</span>.cmd │           │             │</span><br><span class="line">└──────────────┴──────┴──────────────────────────────────┴───────────┴─────────────┘</span><br><span class="line"></span><br><span class="line"><span class="name">C</span>:\Users\xiao.jsvu&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184e5d16f2c2beb1dfff6f.png"></p>
<p>有大佬知道上面问题在哪，麻烦您指点一下，感谢😊</p>
<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol>
<li><p>%USERPROFILE% =C:\Users\用户名</p>
<p>win+r，输入cmd 回车</p>
<p>在cmd窗口下输入 set 回车，可以查看系统变量（想要了解更多 set 命令请看👉 <a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/set_1">这里</a>）</p>
</li>
</ol>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184e7616f2c2beb1e01f77.png"></p>
<h2 id="3、先简单了解一下抽象语法树"><a href="#3、先简单了解一下抽象语法树" class="headerlink" title="3、先简单了解一下抽象语法树"></a>3、先简单了解一下抽象语法树</h2><p>在传统的编译语言的流程中，程序的一段源代码在执行之前会经历三个步骤，统称为”编译”:</p>
<ol>
<li>分词/词法分析</li>
</ol>
<p>这个过程会将由字符组成的字符串<strong>分解</strong>成有意义的代码块，这些代码块统称为<strong>词法单元</strong>(token)</p>
<p>举个例子: let a = 1; 这段程序通常会被分解成为下面这些词法单元: let 、a、=、1、 ；空格是否被当成词法单元，取决于空格在这门语言中的意义。</p>
<ol start="2">
<li>解析/语法分析</li>
</ol>
<p>这个过程是将词法单元流转换成一个由元素嵌套所组成的代表了<strong>程序语法结构</strong>的树，这个树被称为”抽象语法树”（abstract syntax code，AST）</p>
<ol start="3">
<li>代码生成</li>
</ol>
<p>将AST转换成可执行代码的过程被称为代码生成。</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184e8216f2c2beb1e02e93.png"></p>
<p align="center">图片来源网络（侵删）</p>

<p>下面看一下<a href="https://astexplorer.net/">在线解析AST</a>的示例👇<br><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184e9816f2c2beb1e04929.png" alt="image.png"></p>
<h2 id="4、使用V8调试分析代码"><a href="#4、使用V8调试分析代码" class="headerlink" title="4、使用V8调试分析代码"></a>4、使用V8调试分析代码</h2><h3 id="文档查看"><a href="#文档查看" class="headerlink" title="文档查看"></a>文档查看</h3><p>由于文档较长，可以使用命令输出一份本地的帮助文档，方便查看</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到要输出文档的目录下，生成v8-help.txt、v8-debug-help.txt</span></span><br><span class="line"></span><br><span class="line">v8 --<span class="built_in">help</span> &gt;&gt; v8-help.txt</span><br><span class="line">v8-debug --<span class="built_in">help</span> &gt;&gt; v8-debug-help.txt</span><br></pre></td></tr></tbody></table></figure>

<p>主要使用的命令参数如下👇</p>
<p><code>v8-debug --help</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Synopsis:</span><br><span class="line">  shell [options] [--shell] [&lt;file&gt;...]</span><br><span class="line">  d8 [options] [-e &lt;string&gt;] [--shell] [[--module|--web-snapshot] &lt;file&gt;...]</span><br><span class="line"></span><br><span class="line">  -e        execute a string <span class="keyword">in</span> V8</span><br><span class="line">  --shell   run an interactive JavaScript shell</span><br><span class="line">  --module  execute a file as a JavaScript module</span><br><span class="line">  --web-snapshot  execute a file as a web snapshot</span><br><span class="line"></span><br><span class="line">SSE3=1 SSSE3=1 SSE4_1=1 SSE4_2=1 SAHF=1 AVX=1 AVX2=1 FMA3=1 BMI1=1 BMI2=1 LZCNT=1 POPCNT=1 ATOM=0</span><br><span class="line">The following syntax <span class="keyword">for</span> options is accepted (both <span class="string">'-'</span> and <span class="string">'--'</span> are ok):</span><br><span class="line">  --flag        (bool flags only)</span><br><span class="line">  --no-flag     (bool flags only)</span><br><span class="line">  --flag=value  (non-bool flags only, no spaces around <span class="string">'='</span>)</span><br><span class="line">  --flag value  (non-bool flags only)</span><br><span class="line">  --            (captures all remaining args <span class="keyword">in</span> JavaScript)</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">	<span class="comment"># 打印生成的字节码</span></span><br><span class="line">  --print-bytecode (<span class="built_in">print</span> bytecode generated by ignition interpreter)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --noprint-bytecode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 跟踪被优化的信息</span></span><br><span class="line"> 	--trace-opt (trace optimized compilation)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --notrace-opt</span><br><span class="line">  --trace-opt-verbose (extra verbose optimized compilation tracing)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --notrace-opt-verbose</span><br><span class="line">  --trace-opt-stats (trace optimized compilation statistics)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --notrace-opt-stats</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 跟踪去优化的信息</span></span><br><span class="line">  --trace-deopt (trace deoptimization)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --notrace-deopt</span><br><span class="line">  --log-deopt (<span class="built_in">log</span> deoptimization)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --nolog-deopt</span><br><span class="line">  --trace-deopt-verbose (extra verbose deoptimization tracing)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --notrace-deopt-verbose</span><br><span class="line">  --print-deopt-stress (<span class="built_in">print</span> number of possible deopt points)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 查看编译生成的 AST</span></span><br><span class="line">  --print-ast (<span class="built_in">print</span> <span class="built_in">source</span> AST)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --noprint-ast</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 查看编译生成的代码</span></span><br><span class="line">  --print-code (<span class="built_in">print</span> generated code)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --noprint-code</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 查看优化后的代码</span></span><br><span class="line">  --print-opt-code (<span class="built_in">print</span> optimized code)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --noprint-opt-code</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 允许在源代码中使用 V8 提供的原生 API 语法</span></span><br><span class="line">        <span class="comment"># 在代码中配和加入 %DebugPrint(); 可以查看详细的运行时信息</span></span><br><span class="line">  --allow-natives-syntax (allow natives syntax)</span><br><span class="line">        <span class="built_in">type</span>: bool  default: --noallow-natives-syntax</span><br></pre></td></tr></tbody></table></figure>

<h3 id="4-1、查看-ast"><a href="#4-1、查看-ast" class="headerlink" title="4.1、查看 ast"></a>4.1、查看 ast</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">v8-debug -e --print-ast <span class="string">"const name='xiao'"</span></span><br></pre></td></tr></tbody></table></figure>

<p>接收到代码后，第一步就是“解释”，即解释器生成 AST 和作用域。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">C:\Users\xiao&gt;v8-debug -e --print-ast <span class="string">"const name='xiao'"</span></span><br><span class="line">[generating bytecode <span class="keyword">for</span> <span class="keyword">function</span>: ]</span><br><span class="line">--- AST ---</span><br><span class="line">FUNC at 0</span><br><span class="line">. KIND 0</span><br><span class="line">. LITERAL ID 0</span><br><span class="line">. SUSPEND COUNT 0</span><br><span class="line">. NAME <span class="string">""</span></span><br><span class="line">. INFERRED NAME <span class="string">""</span></span><br><span class="line">. DECLS</span><br><span class="line">. . VARIABLE (000001FA12EFAF80) (mode = CONST, assigned = <span class="literal">false</span>) <span class="string">"name"</span></span><br><span class="line">. BLOCK NOCOMPLETIONS at -1</span><br><span class="line">. . EXPRESSION STATEMENT at 11</span><br><span class="line">. . . INIT at 11</span><br><span class="line">. . . . VAR PROXY context[2] (000001FA12EFAF80) (mode = CONST, assigned = <span class="literal">false</span>) <span class="string">"name"</span></span><br><span class="line">. . . . LITERAL <span class="string">"xiao"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\xiao&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184eaa16f2c2beb1e05da2.png"></p>
<h3 id="4-2、查看作用域"><a href="#4-2、查看作用域" class="headerlink" title="4.2、查看作用域"></a>4.2、查看作用域</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">v8-debug -e --print-scopes <span class="string">"const name='xiao'"</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">C:\Users\xiao&gt;v8-debug -e --print-scopes <span class="string">"const name='xiao'"</span></span><br><span class="line">Global scope:</span><br><span class="line">global { // (000001DB6010D600) (0, 17)</span><br><span class="line">  // will be compiled</span><br><span class="line">  // NormalFunction</span><br><span class="line">  // 1 stack slots</span><br><span class="line">  // 3 heap slots</span><br><span class="line">  // temporary vars:</span><br><span class="line">  TEMPORARY .result;  // (000001DB6010D910) <span class="built_in">local</span>[0]</span><br><span class="line">  // <span class="built_in">local</span> vars:</span><br><span class="line">  CONST name;  // (000001DB6010D820) context[2], never assigned</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">C:\Users\xiao&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="4-3、查看生成的字节码"><a href="#4-3、查看生成的字节码" class="headerlink" title="4.3、查看生成的字节码"></a>4.3、查看生成的字节码</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">v8-debug -e --print-bytecode <span class="string">"const name='xiao'"</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">C:\Users\xiao&gt;v8-debug -e --print-bytecode <span class="string">"const name='xiao'"</span></span><br><span class="line">[generated bytecode <span class="keyword">for</span> <span class="keyword">function</span>:  (0x0113002538bd &lt;SharedFunctionInfo&gt;)]</span><br><span class="line">Bytecode length: 6</span><br><span class="line">Parameter count 1</span><br><span class="line">Register count 1</span><br><span class="line">Frame size 8</span><br><span class="line">Bytecode age: 0</span><br><span class="line">         000001130025393A @    0 : 13 00             LdaConstant [0]</span><br><span class="line">         000001130025393C @    2 : 25 02             StaCurrentContextSlot [2]</span><br><span class="line">         000001130025393E @    4 : 0e                LdaUndefined</span><br><span class="line">         000001130025393F @    5 : a9                Return</span><br><span class="line">Constant pool (size = 1)</span><br><span class="line">000001130025390D: [FixedArray] <span class="keyword">in</span> OldSpace</span><br><span class="line"> - map: 0x011300002229 &lt;Map(FIXED_ARRAY_TYPE)&gt;</span><br><span class="line"> - length: 1</span><br><span class="line">           0: 0x0113002538a1 &lt;String[4]: <span class="comment">#xiao&gt;</span></span><br><span class="line">Handler Table (size = 0)</span><br><span class="line">Source Position Table (size = 0)</span><br><span class="line"></span><br><span class="line">C:\Users\xiao&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="4-4、查看详细的运行时信息"><a href="#4-4、查看详细的运行时信息" class="headerlink" title="4.4、查看详细的运行时信息"></a>4.4、查看详细的运行时信息</h3><p>通过 <code>--allow-natives-syntax</code> 参数可以在 JavaScript 中调用 %DebugPrint 底层的 Native API</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testV8</span>(<span class="params">properties, elements</span>) {</span><br><span class="line">  <span class="comment">//添加可索引属性</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elements; i++) {</span><br><span class="line">    <span class="variable language_">this</span>[i] = <span class="string">`element<span class="subst">${i}</span>`</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">//添加常规属性</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; properties; i++) {</span><br><span class="line">    <span class="keyword">const</span> prop = <span class="string">`property<span class="subst">${i}</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>[prop] = prop;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> testobj1 = <span class="keyword">new</span> <span class="title function_">testV8</span>(<span class="number">12</span>, <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 testobj1 详细的运行时信息</span></span><br><span class="line">%<span class="title class_">DebugPrint</span>(testobj1);</span><br></pre></td></tr></tbody></table></figure>

<p>执行</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">v8-debug --allow-natives-syntax .\src\libs\demo.js</span><br></pre></td></tr></tbody></table></figure>

<p>输出</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184eba16f2c2beb1e071cd.png"></p>
<h2 id="相关文章一览"><a href="#相关文章一览" class="headerlink" title="相关文章一览"></a>相关文章一览</h2><ul>
<li><p><a href="https://juejin.cn/post/7125763016582234142">V8中的快慢属性</a></p>
</li>
<li><p><a href="https://juejin.cn/post/7126200095543918599">V8中的快慢数组</a></p>
</li>
</ul>
<hr>
<p>🎈🎈🎈</p>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
</body></html>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>V8</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker | Compose创建mysql容器</title>
    <url>/posts/2048262040.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Docker/">Docker专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<p>本文通过<code>Docker Compose</code>来创建<code>mysql</code>容器</p>
<h2 id="在linux服务器上创建文件，用于管理容器"><a href="#在linux服务器上创建文件，用于管理容器" class="headerlink" title="在linux服务器上创建文件，用于管理容器"></a>在linux服务器上创建文件，用于管理容器</h2><ul>
<li>mkdir docker-mysql</li>
<li>cd docker-mysql</li>
<li>vim docker-compose.yml  #写入如下内容</li>
</ul>
<p><code>docker-compose.yml</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">version: <span class="string">"3"</span></span><br><span class="line">services:</span><br><span class="line">  mysqldb:</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    restart: always</span><br><span class="line">    container_name: mysql57</span><br><span class="line">    ports:</span><br><span class="line">      - 3310:3306</span><br><span class="line">    volumes:</span><br><span class="line">      - /var/vol_dockers/mysqldb/conf:/etc/mysql/conf.d</span><br><span class="line">      - /var/vol_dockers/mysqldb/data:/var/lib/mysql</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_PSAAWORD: PSAAWORD</span><br><span class="line">      MYSQL_ROOT_PASSWORD: PSAAWORD</span><br><span class="line">      MYSQL_USER: root</span><br><span class="line">      MYSQL_DATABASE: database</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>记得防火墙要开放3306、3310端口</p>
</blockquote>
<h2 id="创建启停脚本文件"><a href="#创建启停脚本文件" class="headerlink" title="创建启停脚本文件"></a>创建启停脚本文件</h2><ul>
<li><p>vim start</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>vim restart</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>vim stop</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker-compose stop</span><br></pre></td></tr></tbody></table></figure>

<h2 id="修改脚本文件权限"><a href="#修改脚本文件权限" class="headerlink" title="修改脚本文件权限"></a>修改脚本文件权限</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 st* restart</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63450d9c16f2c2beb1fc717d.jpg"></p>
<h2 id="启动mysql容器"><a href="#启动mysql容器" class="headerlink" title="启动mysql容器"></a>启动<code>mysql</code>容器</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">./start</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>查看容器</li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63450e0116f2c2beb1fd0442.jpg"></p>
<h2 id="mysql数据库基本配置"><a href="#mysql数据库基本配置" class="headerlink" title="mysql数据库基本配置"></a>mysql数据库基本配置</h2><ol>
<li>创建MySql用户</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">CREATE USER dbadmin@localhost IDENTIFIED BY <span class="string">'pwd'</span>;</span><br></pre></td></tr></tbody></table></figure>

<p><code>dbadmin@localhost</code>，表示只允许<code>localhost</code>环境的<code>dbadmin</code>用户登录</p>
<ol start="2">
<li>设置可访问的主机</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">update user <span class="built_in">set</span> host = <span class="string">'%'</span> <span class="built_in">where</span> user = <span class="string">'dbadmin'</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>% 表示接受所有主机ip访问</p>
<ol start="3">
<li>最后刷新生效</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>整体步骤：</strong></p>
<p>1、连接服务器: mysql -u root -p</p>
<p>2、看当前所有数据库：show databases;</p>
<p>3、进入mysql数据库：use mysql;</p>
<p>4、查看mysql数据库中所有的表：show tables;</p>
<p>5、查看user表中的数据：select Host, User,Password from user;</p>
<p>6、修改user表中的Host: update user set Host=’%’ where User=’root’;</p>
<p>7、最后刷新一下：flush privileges;</p>
<p><strong>客户端连接</strong></p>
<p>这里我使用的是<code>SQLyog</code>工具连接<code>MySQL</code>数据库</p>
<p><code>sqlyog</code>连接服务器的<code>3310</code>端口，<code>3310</code>端口映射<code>MySQL</code>容器的<code>3306</code>端口。</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63450db816f2c2beb1fc98ab.jpg"></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63450def16f2c2beb1fce7fa.jpg"></p>
<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker | dockerfile构建centos镜像，以及CMD和ENTRYPOINT的区别</title>
    <url>/posts/1048738116.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Docker/">Docker专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<h1 id="构建自己的centos镜像"><a href="#构建自己的centos镜像" class="headerlink" title="构建自己的centos镜像"></a>构建自己的centos镜像</h1><p><code>docker pull centos</code>下载下来的镜像都是基础版本，缺少很多常用的命令功能，比如：<code>ll</code>、<code>vim</code>等等，</p>
<p>下面介绍制作一个功能较全的自己的centos镜像。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1、编写dockerfile文件"><a href="#1、编写dockerfile文件" class="headerlink" title="1、编写dockerfile文件"></a>1、编写dockerfile文件</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER xiao&lt;example@163.com&gt;</span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"></span><br><span class="line">RUN yum -y install vim       <span class="comment"># vim命令</span></span><br><span class="line">RUN yum -y install net-tools <span class="comment"># ifconfig命令</span></span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">"---end--"</span></span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2、构建镜像"><a href="#2、构建镜像" class="headerlink" title="2、构建镜像"></a>2、构建镜像</h3><ul>
<li><p>-f  file 指定dockerfile文件的路径</p>
</li>
<li><p>-t  tag  指定name:tag</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker build -f ./mydockerfile -t mycentos:0.1 .</span><br><span class="line"></span><br><span class="line">Successfully built e7527f97f78a</span><br><span class="line">Successfully tagged mycentos:0.1</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3、测试运行"><a href="#3、测试运行" class="headerlink" title="3、测试运行"></a>3、测试运行</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker run -it mycentos:0.1</span><br></pre></td></tr></tbody></table></figure>

<p>可以看到进入容器之后，直接就是在 <code>/usr/local</code> 目录下，是因为<code>dockerfile</code>配置的<code>WORKDIR</code></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634a92ce16f2c2beb1726bca.jpg"></p>
<p>这时，<code>ifconfig</code>、<code>vim</code>命令都可以使用了</p>
<h3 id="4、查看镜像构建历史记录"><a href="#4、查看镜像构建历史记录" class="headerlink" title="4、查看镜像构建历史记录"></a>4、查看镜像构建历史记录</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">history</span> imageID</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634a92e316f2c2beb1729aca.jpg"></p>
<h1 id="CMD和ENTRYPOINT的区别"><a href="#CMD和ENTRYPOINT的区别" class="headerlink" title="CMD和ENTRYPOINT的区别"></a>CMD和ENTRYPOINT的区别</h1><h2 id="编写CMD测试dockerfile文件"><a href="#编写CMD测试dockerfile文件" class="headerlink" title="编写CMD测试dockerfile文件"></a>编写CMD测试dockerfile文件</h2><ol>
<li>编写dockerfile文件</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">CMD [<span class="string">"ls"</span>, <span class="string">"-a"</span>]</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>构建镜像</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker build -f ./dockerfile -t cmd-test .</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>启动镜像</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run imageID/iamgeName</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634a92fb16f2c2beb172c300.jpg"></p>
<p>测试发现，启动镜像时追加的命令替换了<code>CMD</code>命令，如下图所示:</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634a930916f2c2beb172d924.jpg"></p>
<h2 id="编写ENTRYPOINT测试dockerfile文件"><a href="#编写ENTRYPOINT测试dockerfile文件" class="headerlink" title="编写ENTRYPOINT测试dockerfile文件"></a>编写ENTRYPOINT测试dockerfile文件</h2><p>每个<code>Dockerfile</code>只能有一个<code>ENTRYPOINT</code>，如果指定了多个，只有最后一个被执行,而且一定会被执行</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT [<span class="string">"ls"</span>, <span class="string">"-a"</span>]</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># nginx 镜像</span></span><br><span class="line">ENTRYPOINT [ <span class="string">"/usr/sbin/nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span> ]</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634a931916f2c2beb1731507.jpg"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><code>CMD</code>命令会被启动容器时追加的命令替换执行，</li>
</ol>
<p>2.<code>ENTRYPOINT</code>命令不会被启动容器时追加的命令替换，而是合并执行</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634a932b16f2c2beb1736e15.jpg"></p>
<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker | redis安装及测试</title>
    <url>/posts/2424499315.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Docker/">Docker专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<p>此篇文章目的是熟悉一下redis的下载安装使用，为后面部署redis集群做准备。</p>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><ol>
<li>linux上，我在<code>/download</code>目录下，执行下载的命令</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">root@--- ~]<span class="comment"># wget http://download.redis.io/redis-stable.tar.gz</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>接着，对下载下来的文件进行如下操作，解压文件，并把文件移动到<code>/usr/local/redis/</code>目录下</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">tar -xzf redis-stable.tar.gz</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/redis</span><br><span class="line"><span class="built_in">mv</span> ./redis-stable/* /usr/local/redis/</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>编译redis文件</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/redis</span><br><span class="line">make</span><br></pre></td></tr></tbody></table></figure>

<p>执行完 <code>make</code> 命令后，<code>redis</code> 目录下会出现编译后的 <code>redis</code> 服务程序 <code>redis-server</code>，还有用于测试的客户端程序 <code>redis-cli</code>，两个程序位于安装目录 <code>src</code> 目录下</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634fbb2316f2c2beb15877d5.jpg"></p>
<h2 id="启动redis服务"><a href="#启动redis服务" class="headerlink" title="启动redis服务"></a>启动redis服务</h2><ul>
<li>方式1：</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">./redis-server</span><br></pre></td></tr></tbody></table></figure>

<p>注意这种方式启动 redis 使用的是默认配置。</p>
<ul>
<li>方式2：</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">./redis-server ../redis.conf</span><br></pre></td></tr></tbody></table></figure>

<p>通过启动参数告诉 redis 使用指定配置文件使用下面命令启动。</p>
<p><code>redis.conf</code> 是一个默认的配置文件。我们可以根据需要使用自己的配置文件。</p>
<p>启动 redis 服务进程后，就可以使用测试客户端程序 <code>redis-cli</code> 和 <code>redis</code> 服务交互了。</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634fbb4116f2c2beb1589e01.jpg"></p>
<p>另起一个窗口，用来启动测试客户端程序，然后在新窗口里执行下面的命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/redis/src</span><br><span class="line">[root@--- src]<span class="comment"># ./redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> foo bar</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get foo</span><br><span class="line"><span class="string">"bar"</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exit</span></span><br><span class="line">[root@--- src]<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="配置-Redis-为后台服务"><a href="#配置-Redis-为后台服务" class="headerlink" title="配置 Redis 为后台服务"></a>配置 Redis 为后台服务</h2><p>将配置文件<code>redis.conf</code>中的 <code>daemonize no</code> 改成 <code>daemonize yes</code>，配置 <code>redis</code> 为后台启动。</p>
<h2 id="设置-Redis-访问密码"><a href="#设置-Redis-访问密码" class="headerlink" title="设置 Redis 访问密码"></a>设置 Redis 访问密码</h2><p>在配置文件<code>redis.conf</code>中找到 <code>requirepass</code>，去掉前面的注释，并修改后面的密码。</p>
<h2 id="常用配置文件例子-redis-conf"><a href="#常用配置文件例子-redis-conf" class="headerlink" title="常用配置文件例子 redis.conf"></a>常用配置文件例子 redis.conf</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#默认端口6379</span></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"><span class="comment">#绑定ip，如果是内网可以直接绑定 127.0.0.1, 或者忽略, 0.0.0.0是外网</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment">#守护进程启动</span></span><br><span class="line">daemonize <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#超时</span></span><br><span class="line"><span class="built_in">timeout</span> 300</span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"><span class="comment">#分区</span></span><br><span class="line">databases 16</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">rdbcompression <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#存储文件</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment">#密码</span></span><br><span class="line">requirepass xxxxxxxx</span><br></pre></td></tr></tbody></table></figure>

<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>Docker</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker | redis集群部署实战</title>
    <url>/posts/2804936210.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Docker/">Docker专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<p>前面已经简单熟悉过<code>redis</code>的下载安装使用，今天接着部署<code>redis</code>集群（cluster），简单体会一下redis集群的高可用特性。</p>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>Redis是C语言开发，安装Redis需要先将Redis的源码进行编译，编译依赖<code>gcc</code>环境</p>
<h2 id="安装gcc-c"><a href="#安装gcc-c" class="headerlink" title="安装gcc-c++"></a>安装<code>gcc-c++</code></h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></tbody></table></figure>

<h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- redis]<span class="comment"># gcc -v</span></span><br><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC=gcc</span><br><span class="line">COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/lto-wrapper</span><br><span class="line">Target: x86_64-redhat-linux</span><br><span class="line">Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-linker-hash-style=gnu --enable-languages=c,c++,objc,obj-c++,java,fortran,ada,go,lto --enable-plugin --enable-initfini-array --disable-libgcj --with-isl=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/isl-install --with-cloog=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/cloog-install --enable-gnu-indirect-function --with-tune=generic --with-arch_32=x86-64 --build=x86_64-redhat-linux</span><br><span class="line">Thread model: posix</span><br><span class="line">gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br><span class="line">[root@--- redis]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong>Redis的四种模式</strong></p>
<ol>
<li><p>单机模式</p>
</li>
<li><p>master+slave(主从)</p>
</li>
<li><p>sentinel(哨兵)</p>
</li>
<li><p>cluster(集群)</p>
</li>
</ol>
<h1 id="创建redis网卡"><a href="#创建redis网卡" class="headerlink" title="创建redis网卡"></a>创建redis网卡</h1><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- ~]# docker network create redis --subnet 172.38.0.0/16</span><br><span class="line">0350d84612bef09bc32b39f15ac6b608dae17cbd75d04b282c0bd37c0283bb7c</span><br><span class="line">[root@iZm5e23n3ueobwkjtfartxZ ~]# docker network ls</span><br><span class="line">NETWORK ID     NAME           DRIVER    SCOPE</span><br><span class="line">feafa30d4051   bridge         bridge    local</span><br><span class="line">e8bf4fced9e2   host           host      local</span><br><span class="line">0096a971fd2c   mynet          bridge    local</span><br><span class="line">6263db0933b9   none           null      local</span><br><span class="line">0350d84612be   redis          bridge    local</span><br><span class="line">799426d70aa2   test-network   bridge    local</span><br><span class="line">[root@--- ~]#</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h1 id="创建6个redis服务"><a href="#创建6个redis服务" class="headerlink" title="创建6个redis服务"></a>创建6个redis服务</h1><p>通过编写脚本创建6个redis服务</p>
<ul>
<li>cluster-enabled：是否启动集群，选值：yes 、no</li>
<li>cluster-config-file 配置文件.conf ：指定节点信息，自动生成</li>
<li>cluster-node-timeout 毫秒值： 配置节点连接超时时间</li>
<li>appendonly：是否开启持久化，选值：yes、no</li>
<li>daemonize: 守护进程启动(后台启动)</li>
</ul>
<h2 id="在-var目录下创建脚本文件create-redis-script-sh"><a href="#在-var目录下创建脚本文件create-redis-script-sh" class="headerlink" title="在/var目录下创建脚本文件create_redis_script.sh"></a>在<code>/var</code>目录下创建脚本文件<code>create_redis_script.sh</code></h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> create_redis_script.sh</span><br></pre></td></tr></tbody></table></figure>

<h2 id="编写脚本内容"><a href="#编写脚本内容" class="headerlink" title="编写脚本内容"></a>编写脚本内容</h2><p><code>vim create_redis_script.sh</code>，写入下面的内容</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> $(<span class="built_in">seq</span>	1 6); \</span><br><span class="line"><span class="keyword">do</span> \</span><br><span class="line"><span class="built_in">mkdir</span> -p /var/redisNode/node-<span class="variable">${port}</span>/conf</span><br><span class="line"><span class="built_in">touch</span> /var/redisNode/node-<span class="variable">${port}</span>/conf/redis.conf</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt;/var/redisNode/node-${port}/conf/redis.conf</span></span><br><span class="line"><span class="string">port 6379</span></span><br><span class="line"><span class="string">bind 0.0.0.0</span></span><br><span class="line"><span class="string">cluster-enabled yes</span></span><br><span class="line"><span class="string">cluster-config-file nodes.conf</span></span><br><span class="line"><span class="string">cluster-node-timeout 5000</span></span><br><span class="line"><span class="string">cluster-announce-ip 172.38.0.1${port}</span></span><br><span class="line"><span class="string">cluster-announce-port 6379</span></span><br><span class="line"><span class="string">cluster-announce-bus-port 16379</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">#daemonize yes</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="查看脚本文件"><a href="#查看脚本文件" class="headerlink" title="查看脚本文件"></a>查看脚本文件</h2><p><code>cat create_redis_script.sh</code></p>
<h2 id="赋予create-redis-script-sh文件可执行权限"><a href="#赋予create-redis-script-sh文件可执行权限" class="headerlink" title="赋予create_redis_script.sh文件可执行权限"></a>赋予<code>create_redis_script.sh</code>文件可执行权限</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># chmod o+x create_redis_script.sh</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="执行脚本，创建redis服务"><a href="#执行脚本，创建redis服务" class="headerlink" title="执行脚本，创建redis服务"></a>执行脚本，创建redis服务</h2><p><code>./create_redis_script.sh</code></p>
<h2 id="查看redis节点"><a href="#查看redis节点" class="headerlink" title="查看redis节点"></a>查看redis节点</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- redisNode]<span class="comment"># pwd</span></span><br><span class="line">/var/redisNode</span><br><span class="line">[root@--- redisNode]<span class="comment"># ls</span></span><br><span class="line">node-1  node-2  node-3  node-4  node-5  node-6</span><br><span class="line">[root@--- redisNode]<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="查看redis-conf配置文件"><a href="#查看redis-conf配置文件" class="headerlink" title="查看redis.conf配置文件"></a>查看redis.conf配置文件</h2><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63511d8816f2c2beb14ed518.jpg"></p>
<h1 id="启动redis服务"><a href="#启动redis服务" class="headerlink" title="启动redis服务"></a>启动redis服务</h1><ul>
<li><p>-v 挂载数据卷</p>
</li>
<li><p>redis:5.0.9-alpine3.11 redis镜像</p>
</li>
<li><p>6379 是redis端口： 映射云服务器端口6371 - 6376</p>
</li>
<li><p>16379 是redis集群TCP端口： 映射云服务器端口16371 - 16376</p>
</li>
<li><p>–net 使用自定义redis网络</p>
</li>
<li><p>–ip 是本容器绑定的ip： 172.38.0.11 - 16</p>
</li>
<li><p>–name 容器名字： redis-1 - 6</p>
</li>
<li><p>redis-server /etc/redis/redis.conf 追加命令，通过redis.conf启动</p>
</li>
</ul>
<h2 id="启动方式一（不推荐）："><a href="#启动方式一（不推荐）：" class="headerlink" title="启动方式一（不推荐）："></a>启动方式一（不推荐）：</h2><p>一个一个启动</p>
<p>启动第一个redis节点</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -p 6371:6379 -p 16371:16379 --name redis-1 \</span><br><span class="line">-v /var/redisNode/node-1/data:/data \</span><br><span class="line">-v /var/redisNode/node-1/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></tbody></table></figure>

<p>如上，类似的，递增ip、port和name，启动其它五个redis节点，太麻烦了，可以通过编写脚本来一次启动6个服务</p>
<h2 id="启动方式二（推荐）："><a href="#启动方式二（推荐）：" class="headerlink" title="启动方式二（推荐）："></a>启动方式二（推荐）：</h2><p>编写启动脚本，6个全部启动</p>
<h3 id="创建start-redis-script-sh文件"><a href="#创建start-redis-script-sh文件" class="headerlink" title="创建start_redis_script.sh文件"></a>创建<code>start_redis_script.sh</code>文件</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> start_redis_script.sh</span><br></pre></td></tr></tbody></table></figure>

<h3 id="编写脚本内容-1"><a href="#编写脚本内容-1" class="headerlink" title="编写脚本内容"></a>编写脚本内容</h3><p><code>vim start_redis_script.sh</code>，写入下面的内容</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> $(<span class="built_in">seq</span>	1 6); \</span><br><span class="line"><span class="keyword">do</span> \</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">${port}</span></span><br><span class="line">docker run -p 637<span class="variable">${port}</span>:6379 -p 1637<span class="variable">${port}</span>:16379 --name redis-<span class="variable">${port}</span> \</span><br><span class="line">-v /var/redisNode/node-<span class="variable">${port}</span>/data:/data \</span><br><span class="line">-v /var/redisNode/node-<span class="variable">${port}</span>/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.1<span class="variable">${port}</span> redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf; \</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="赋予start-redis-script-sh文件可执行权限"><a href="#赋予start-redis-script-sh文件可执行权限" class="headerlink" title="赋予start_redis_script.sh文件可执行权限"></a>赋予<code>start_redis_script.sh</code>文件可执行权限</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># chmod o+x start_redis_script.sh</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="执行脚本，启动redis容器服务"><a href="#执行脚本，启动redis容器服务" class="headerlink" title="执行脚本，启动redis容器服务"></a>执行脚本，启动redis容器服务</h3><p><code>./start_redis_script.sh</code></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63511da316f2c2beb14f0d6a.jpg"></p>
<h3 id="查看redis容器"><a href="#查看redis容器" class="headerlink" title="查看redis容器"></a>查看redis容器</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- var]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                    COMMAND                  CREATED              STATUS              PORTS                                              NAMES</span><br><span class="line">0d3c18b61098   redis:5.0.9-alpine3.11   <span class="string">"docker-entrypoint.s…"</span>   2 seconds ago        Up 1 second         0.0.0.0:6376-&gt;6379/tcp, 0.0.0.0:16376-&gt;16379/tcp   redis-6</span><br><span class="line">ee896fb093da   redis:5.0.9-alpine3.11   <span class="string">"docker-entrypoint.s…"</span>   13 seconds ago       Up 12 seconds       0.0.0.0:6375-&gt;6379/tcp, 0.0.0.0:16375-&gt;16379/tcp   redis-5</span><br><span class="line">a83bb7b16dff   redis:5.0.9-alpine3.11   <span class="string">"docker-entrypoint.s…"</span>   48 seconds ago       Up 47 seconds       0.0.0.0:6374-&gt;6379/tcp, 0.0.0.0:16374-&gt;16379/tcp   redis-4</span><br><span class="line">ffe4c9619bed   redis:5.0.9-alpine3.11   <span class="string">"docker-entrypoint.s…"</span>   58 seconds ago       Up 57 seconds       0.0.0.0:6373-&gt;6379/tcp, 0.0.0.0:16373-&gt;16379/tcp   redis-3</span><br><span class="line">a316a31e273f   redis:5.0.9-alpine3.11   <span class="string">"docker-entrypoint.s…"</span>   About a minute ago   Up About a minute   0.0.0.0:6372-&gt;6379/tcp, 0.0.0.0:16372-&gt;16379/tcp   redis-2</span><br><span class="line">71c072f57c29   redis:5.0.9-alpine3.11   <span class="string">"docker-entrypoint.s…"</span>   9 minutes ago        Up 9 minutes        0.0.0.0:6371-&gt;6379/tcp, 0.0.0.0:16371-&gt;16379/tcp   redis-1</span><br><span class="line">[root@--- var]<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h1><p>进入任意一个 <code>Redis</code> 实例</p>
<h2 id="进入redis-1容器"><a href="#进入redis-1容器" class="headerlink" title="进入redis-1容器"></a>进入redis-1容器</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it redis-1 /bin/sh</span><br></pre></td></tr></tbody></table></figure>

<h2 id="创建集群主节点"><a href="#创建集群主节点" class="headerlink" title="创建集群主节点"></a>创建集群主节点</h2><ul>
<li><p>Redis Cluster最低要求是3个主节点</p>
</li>
<li><p>–cluster-replicas 参数为数字，1表示每个主节点需要1个从节点。</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># redis-1 容器内</span></span><br><span class="line">/data <span class="comment"># redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1</span></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63511dbf16f2c2beb14f4751.jpg"></p>
<h1 id="测试连接集群"><a href="#测试连接集群" class="headerlink" title="测试连接集群"></a>测试连接集群</h1><h2 id="连接集群-c"><a href="#连接集群-c" class="headerlink" title="连接集群 -c"></a>连接集群 <code>-c</code></h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># redis-1 容器内</span></span><br><span class="line">/data <span class="comment"># redis-cli -c</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="查看集群信息-cluster-info"><a href="#查看集群信息-cluster-info" class="headerlink" title="查看集群信息 cluster info"></a>查看集群信息 <code>cluster info</code></h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:6</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_ping_sent:292</span><br><span class="line">cluster_stats_messages_pong_sent:307</span><br><span class="line">cluster_stats_messages_sent:599</span><br><span class="line">cluster_stats_messages_ping_received:302</span><br><span class="line">cluster_stats_messages_pong_received:292</span><br><span class="line">cluster_stats_messages_meet_received:5</span><br><span class="line">cluster_stats_messages_received:599</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="查看节点信息-cluster-nodes"><a href="#查看节点信息-cluster-nodes" class="headerlink" title="查看节点信息 cluster nodes"></a>查看节点信息 <code>cluster nodes</code></h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">b3f737d0d77b823794087011f1501fd43a2ea316 172.38.0.12:6379@16379 master - 0 1633332452560 2 connected 5461-10922</span><br><span class="line">506ff2bf1020d468e7d7a81ddbfb616a7e9b7d96 172.38.0.13:6379@16379 master - 0 1633332453000 3 connected 10923-16383</span><br><span class="line">7f57f8a01493fa9e46e24ad8a9e46995634f7442 172.38.0.15:6379@16379 slave 70ebdca0264c079bb2c33452e6388d37706da282 0 1633332453000 5 connected</span><br><span class="line">70ebdca0264c079bb2c33452e6388d37706da282 172.38.0.11:6379@16379 myself,master - 0 1633332452000 1 connected 0-5460</span><br><span class="line">f839b6924977e99d3b74324f2ef70b3678e1a257 172.38.0.14:6379@16379 slave 506ff2bf1020d468e7d7a81ddbfb616a7e9b7d96 0 1633332453762 4 connected</span><br><span class="line">bbc4dd0639b90e9ddfb5cef278be04a24276cbdb 172.38.0.16:6379@16379 slave b3f737d0d77b823794087011f1501fd43a2ea316 0 1633332453000 6 connected</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63511dd716f2c2beb14f8522.jpg"></p>
<h1 id="测试主从节点替换"><a href="#测试主从节点替换" class="headerlink" title="测试主从节点替换"></a>测试主从节点替换</h1><p><strong>验证高可用</strong></p>
<p>set一个值，然后停掉对应的服务，再次get，验证是否可以得到值</p>
<h2 id="set值"><a href="#set值" class="headerlink" title="set值"></a>set值</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> a b</span><br><span class="line">-&gt; Redirected to slot [15495] located at 172.38.0.13:6379</span><br><span class="line">OK</span><br><span class="line">172.38.0.13:6379&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>发现a值设置在了172.38.0.13容器上，然后我们试着去停掉redis-3容器的服务，然后再次get,看一下结果</p>
<h2 id="get值"><a href="#get值" class="headerlink" title="get值"></a>get值</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">172.38.0.13:6379&gt; get a</span><br><span class="line"><span class="string">"b"</span></span><br><span class="line">172.38.0.13:6379&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="停止redis-3容器里的redis服务"><a href="#停止redis-3容器里的redis服务" class="headerlink" title="停止redis-3容器里的redis服务"></a>停止<code>redis-3</code>容器里的redis服务</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker stop redis-3</span><br></pre></td></tr></tbody></table></figure>

<h2 id="再次取值"><a href="#再次取值" class="headerlink" title="再次取值"></a>再次取值</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">172.38.0.13:6379&gt; get a</span><br><span class="line">Could not connect to Redis at 172.38.0.13:6379: Host is unreachable</span><br><span class="line">(34.04s)</span><br><span class="line">not connected&gt; <span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 重连集群</span></span><br><span class="line">/data <span class="comment"># redis-cli -c</span></span><br><span class="line">127.0.0.1:6379&gt; get a</span><br><span class="line">-&gt; Redirected to slot [15495] located at 172.38.0.14:6379</span><br><span class="line"><span class="string">"b"</span></span><br><span class="line">172.38.0.14:6379&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>发现<code>a</code>值被存储到了<code>172.38.0.14</code>机器上，<code>172.38.0.14</code>是<code>172.38.0.13</code>的从节点，当主节点<code>172.38.0.13</code>发生故障时，自动替换到<code>172.38.0.13</code>，这就是<strong>高可用</strong></p>
<h2 id="查看redis节点服务信息"><a href="#查看redis节点服务信息" class="headerlink" title="查看redis节点服务信息"></a>查看redis节点服务信息</h2><p>发现<code>172.38.0.13</code>节点<code>fail</code>, <code>172.38.0.14</code>变成<code>master</code></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63511deb16f2c2beb14fb84f.jpg"></p>
<p>docker搭建redis集群完成🎈🎈</p>
<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>Docker</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker | 使用dockerfile生成镜像，清理docker空间</title>
    <url>/posts/1427354585.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Docker/">Docker专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<h1 id="用dockerfile生成镜像并挂载数据卷"><a href="#用dockerfile生成镜像并挂载数据卷" class="headerlink" title="用dockerfile生成镜像并挂载数据卷"></a>用<code>dockerfile</code>生成镜像并挂载数据卷</h1><h2 id="编写dockerfile文件"><a href="#编写dockerfile文件" class="headerlink" title="编写dockerfile文件"></a>编写<code>dockerfile</code>文件</h2><ol>
<li>创建<code>dockerfile01</code> 文件</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">VOLUME [<span class="string">"volume01"</span>, <span class="string">"volume02"</span>]</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">"-----end----"</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li><code>docker build</code> 构建镜像</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker build -f ./dockerfile01 -t xiao-centos .</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6347e3f816f2c2beb1b89a74.jpg"></p>
<ol start="3">
<li>启动镜像</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -it 镜像ID /bin/bash</span><br></pre></td></tr></tbody></table></figure>

<p>可以看到生成镜像时自动挂载的，数据卷目录</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6347e41416f2c2beb1b8cef2.jpg"></p>
<p>以上<code>dockerfile</code>方式属于匿名挂载数据卷</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6347e42816f2c2beb1b8f0c7.jpg"></p>
<h1 id="清理docker使用空间"><a href="#清理docker使用空间" class="headerlink" title="清理docker使用空间"></a>清理docker使用空间</h1><p>我个人使用的是单核2G的云服务器，用了快三年了，内存、cpu严重吃紧，所以就尝试了清理docker使用空间，主要是删除未使用过的镜像、容器、数据卷、网络命令，具体如下：</p>
<p>官方文档链接 <a href="https://docs.docker.com/config/pruning/">https://docs.docker.com/config/pruning/</a></p>
<ul>
<li>执行如下可以查看 Docker 的磁盘使用情况（类似于 Linux 上的 df 命令）</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker system <span class="built_in">df</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>删除所有未使用过的镜像</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker image prune -a</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p>删除所有停止的容器</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker container prune</span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -aq)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>仅删除超过 24 小时的停止容器</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker container prune --filter <span class="string">"until=24h"</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>数据卷永远不会自动删除，因为这样做可能会破坏数据</p>
</blockquote>
<ul>
<li>删除未使用的数据卷</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>删除没有使用过的网络</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker network prune</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>删除所有未使用过的资源</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker system prune</span><br></pre></td></tr></tbody></table></figure>

<h1 id="手动删除-x2F-var-x2F-lib-x2F-docker-x2F-volumes的问题解决"><a href="#手动删除-x2F-var-x2F-lib-x2F-docker-x2F-volumes的问题解决" class="headerlink" title="手动删除/var/lib/docker/volumes的问题解决"></a>手动删除/var/lib/docker/volumes的问题解决</h1><p>当时清理docker使用空间的时候，清过头了，一下子把挂载的数据卷也给顺手清理了🤣，真是自己给自己找事做。</p>
<h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><p>手动删除了挂载到宿主机上的所有数据卷，在启动容器挂载数据卷的时候就会报错</p>
<p>如下，重新运行容器，原先具名挂载数据卷<code>juming-nginx</code>，报错信息如下👇</p>
<p><code>docker run -d -P --name nginx01 -v juming-nginx:/etc/nginx nginx</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker: Error response from daemon: open /var/lib/docker/volumes/juming-nginx/_data: no such file or directory.</span><br></pre></td></tr></tbody></table></figure>

<h2 id="尝试方法一（不建议使用）："><a href="#尝试方法一（不建议使用）：" class="headerlink" title="尝试方法一（不建议使用）："></a>尝试方法一（不建议使用）：</h2><ol>
<li><p>删除所有容器</p>
</li>
<li><p>删除所有镜像</p>
</li>
<li><p>重新运行一个新的容器并挂载数据卷</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -aq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">docker rmi -f $(docker images -aq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.</span></span><br><span class="line">docker run -d -P --name nginx01 -v juming-nginx:/etc/nginx nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还是报错</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<p><strong>结论：</strong></p>
<p>无法解决问题，且删除所有容器、镜像存在的风险较大，不建议使用！</p>
<h2 id="尝试方法二（推荐使用）："><a href="#尝试方法二（推荐使用）：" class="headerlink" title="尝试方法二（推荐使用）："></a>尝试方法二（推荐使用）：</h2><ol>
<li><p>停止docker服务</p>
</li>
<li><p>重新启动docker服务</p>
</li>
<li><p>再次运行容器</p>
</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">docker run -d -P --name nginx01 -v juming-nginx:/etc/nginx nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有报错，docker ps查看 成功运行</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>结论</strong></p>
<p>没有报错，<code>docker ps</code>查看，成功运行</p>
<p><code>docker volume ls</code> 查看镜像，可以看到具名数据卷<code>juming-nginx</code>已显示出来了</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>     a9b39215509378332ec9dfcdc3e10857b500694ea66efd9c2b7a6a9c55a2f10a</span><br><span class="line"><span class="built_in">local</span>     juming-nginx</span><br></pre></td></tr></tbody></table></figure>

<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker | 制作tomcat镜像并部署项目</title>
    <url>/posts/2106196415.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Docker/">Docker专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<p>本文讲解如何制作自己的tomcat镜像，并使用tomcat部署项目</p>
<h2 id="原料准备："><a href="#原料准备：" class="headerlink" title="原料准备："></a>原料准备：</h2><p>tomcat、jdk安装包，dockerfile文件</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1、准备压缩包"><a href="#1、准备压缩包" class="headerlink" title="1、准备压缩包"></a>1、准备压缩包</h3><p>jdk-8u301-linux-x64.tar.gz -&gt; jdk1.8.0_301</p>
<p>apache-tomcat-7.0.107.tar.gz -&gt; apache-tomcat-7.0.107</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6348e93f16f2c2beb17ac00e.jpg"></p>
<h3 id="2、编写dockerfile文件"><a href="#2、编写dockerfile文件" class="headerlink" title="2、编写dockerfile文件"></a>2、编写dockerfile文件</h3><blockquote>
<p>官方指定命名<code>Dockerfile</code>，这样构建的时候不用加<code>-f</code>参数指定文件</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER xiao&lt;find_onepiece@163.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u301-linux-x64.tar.gz /usr/local</span><br><span class="line">ADD apache-tomcat-7.0.107.tar.gz /usr/local</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line"></span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_301</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-7.0.107</span><br><span class="line">ENV CATALINE_BASH /usr/local/apache-tomcat-7.0.107</span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/lib:<span class="variable">$CATALINE_HOME</span>/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-7.0.107/bin/startup.sh &amp;&amp; <span class="built_in">tail</span> -f /usr/local/apache-tomcat-7.0.107/bin/logs/catalina.out</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="3、执行构建"><a href="#3、执行构建" class="headerlink" title="3、执行构建"></a>3、执行构建</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker build -t diytomcat . <span class="comment"># 自动寻找Dockerfile文件</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>构建成功:</strong></p>
<p>Successfully built e68ad8caa2a4</p>
<p>Successfully tagged diytomcat:latest</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6348e96716f2c2beb17b0059.jpg"></p>
<h3 id="4、启动容器"><a href="#4、启动容器" class="headerlink" title="4、启动容器"></a>4、启动容器</h3><p><code>/webapps/test</code>  部署的项目路径，浏览器访问<code>ip:port/test</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -it -p 9090:8080 --name xiaoTomcat -v /home/xiao/build/tomcat/test:/usr/local/apache-tomcat-7.0.107/webapps/test -v /home/xiao/build/tomcat/tomcatlogs/:/usr/local/apache-tomcat-7.0.107/logs diytomcat</span><br></pre></td></tr></tbody></table></figure>

<h3 id="5、访问查看"><a href="#5、访问查看" class="headerlink" title="5、访问查看"></a>5、访问查看</h3><p>数据卷挂载成功</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6348e97c16f2c2beb17b2050.jpg"></p>
<h3 id="6、发布项目"><a href="#6、发布项目" class="headerlink" title="6、发布项目"></a>6、发布项目</h3><p>已经挂载了数据卷，所以编写宿主机的项目文件就可以了</p>
<p>在挂载路径 <code>/home/xiao/build/tomcat/test</code> 下</p>
<ol>
<li>新建文件 <code>web.xml</code>，内容如下：</li>
</ol>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.4"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>新建文件 <code>index.jsp</code>，内容如下：</li>
</ol>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>xiao<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">&lt;%</span><br><span class="line">System.out.println("my tomcat project logs");</span><br><span class="line">%&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="7、浏览器访问"><a href="#7、浏览器访问" class="headerlink" title="7、浏览器访问"></a>7、浏览器访问</h3><p>url：<code>ip:port/test</code></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6348e9ae16f2c2beb17b6a64.jpg"></p>
<h3 id="8、查看日志卷"><a href="#8、查看日志卷" class="headerlink" title="8、查看日志卷"></a>8、查看日志卷</h3><p><code>tail -f catalina.out</code></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6348e9bd16f2c2beb17b8250.jpg"></p>
<h2 id="完成从构建镜像到部署项目🎈🎈"><a href="#完成从构建镜像到部署项目🎈🎈" class="headerlink" title="完成从构建镜像到部署项目🎈🎈"></a>完成从构建镜像到部署项目🎈🎈</h2><hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker | 发布镜像到镜像仓库</title>
    <url>/posts/2796165889.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Docker/">Docker专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<p>本文记录发布镜像到 <code>DockerHub</code> 和 <code>阿里云镜像仓库</code>。工作中使用的是<code>JFrog Artifactory</code> 和 <code>Harbor</code>，没有太大差别。</p>
<h1 id="发布镜像到DockerHub"><a href="#发布镜像到DockerHub" class="headerlink" title="发布镜像到DockerHub"></a>发布镜像到DockerHub</h1><p><a href="https://hub.docker.com/">https://hub.docker.com/</a> 注册账号</p>
<h2 id="1、登录docker"><a href="#1、登录docker" class="headerlink" title="1、登录docker"></a>1、登录docker</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># docker login --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker login [OPTIONS] [SERVER]</span><br><span class="line"></span><br><span class="line">Log <span class="keyword">in</span> to a Docker registry.</span><br><span class="line">If no server is specified, the default is defined by the daemon.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --password string   Password</span><br><span class="line">      --password-stdin    Take the password from stdin</span><br><span class="line">  -u, --username string   Username</span><br><span class="line">[root@--- ~]<span class="comment">#</span></span><br><span class="line">[root@--- ~]<span class="comment"># docker login -u xiaobluewhale</span></span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line">[root@--- ~]<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="2、服务器上提交镜像"><a href="#2、服务器上提交镜像" class="headerlink" title="2、服务器上提交镜像"></a>2、服务器上提交镜像</h2><p><code>docker push [OPTIONS] NAME[:TAG]</code></p>
<p><code>docker push</code> 命令推送镜像的规范是：注册用户名/镜像名。</p>
<p>使用以下方法之一命名您的本地镜像：</p>
<ol>
<li>当你构建它们时，使用如下命令</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker build -t &lt;hub-user&gt;/&lt;repo-name&gt;[:&lt;tag&gt;]</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>重命名现有的本地镜像</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker tag &lt;existing-image&gt; &lt;hub-user&gt;/&lt;repo-name&gt;[:&lt;tag&gt;]</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li><code>docker commit</code> 提交更改</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker commit &lt;existing-container&gt; &lt;hub-user&gt;/&lt;repo-name&gt;[:&lt;tag&gt;]</span><br></pre></td></tr></tbody></table></figure>

<ol start="4">
<li>推送镜像仓库</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker push &lt;hub-user&gt;/&lt;repo-name&gt;:&lt;tag&gt;</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><code>docker push xiao/tomcat</code></li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker push xiao/tomcat</span><br><span class="line">Using default tag: latest</span><br><span class="line">The push refers to repository [docker.io/xiao/tomcat]</span><br><span class="line">69421fc728fb: Preparing</span><br><span class="line">1f6217f0c2bb: Preparing</span><br><span class="line">aa9c3f9fafec: Preparing</span><br><span class="line">7d4a4cd414a9: Preparing</span><br><span class="line">74ddd0ec08fa: Preparing</span><br><span class="line">denied: requested access to the resource is denied</span><br></pre></td></tr></tbody></table></figure>

<h3 id="推送失败，被拒绝"><a href="#推送失败，被拒绝" class="headerlink" title="推送失败，被拒绝"></a>推送失败，被拒绝</h3><p>推送失败的原因: <strong>name必须是注册用户名</strong></p>
<h3 id="解决push失败问题"><a href="#解决push失败问题" class="headerlink" title="解决push失败问题"></a>解决push失败问题</h3><p>增加一个tag, 重命名镜像</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 增加tag，重命名镜像</span></span><br><span class="line">docker tag 24b3a476f143 xiaobluewhale/tomcat:1.0</span><br><span class="line">The push refers to repository [docker.io/xiaobluewhale/tomcat]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line">docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">xiaobluewhale/tomcat   1.0       24b3a476f143   13 hours ago   680MB</span><br><span class="line">xiao/tomcat            1.0       24b3a476f143   13 hours ago   680MB</span><br><span class="line">xiao/tomcat            latest    24b3a476f143   13 hours ago   680MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送镜像</span></span><br><span class="line">docker push xiaobluewhale/tomcat:1.0</span><br></pre></td></tr></tbody></table></figure>

<h3 id="提交成功"><a href="#提交成功" class="headerlink" title="提交成功"></a>提交成功</h3><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634c984c16f2c2beb145f7bc.jpg"></p>
<p>提交的时候也是按照镜像的层级提交的</p>
<p>在个人DockerHub上查看推送成功的镜像</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634c985b16f2c2beb14602fd.jpg"></p>
<h1 id="发布镜像到阿里云镜像仓库"><a href="#发布镜像到阿里云镜像仓库" class="headerlink" title="发布镜像到阿里云镜像仓库"></a>发布镜像到阿里云镜像仓库</h1><h2 id="1、登陆阿里云"><a href="#1、登陆阿里云" class="headerlink" title="1、登陆阿里云"></a>1、登陆阿里云</h2><h2 id="2、找到容器镜像服务，创建实例"><a href="#2、找到容器镜像服务，创建实例" class="headerlink" title="2、找到容器镜像服务，创建实例"></a>2、找到容器镜像服务，创建实例</h2><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634c986916f2c2beb1460b7d.jpg"></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634c987a16f2c2beb14617bb.jpg"></p>
<p>企业版需要付费购买（1个月741）</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634c988c16f2c2beb14623ef.jpg"></p>
<p>我选择创建<strong>个人实例</strong></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634c989c16f2c2beb14632b8.jpg"></p>
<h2 id="3、创建命名空间（为了隔离）"><a href="#3、创建命名空间（为了隔离）" class="headerlink" title="3、创建命名空间（为了隔离）"></a>3、创建命名空间（为了隔离）</h2><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634c98ab16f2c2beb1463e3f.jpg"></p>
<h2 id="4、创建镜像仓库"><a href="#4、创建镜像仓库" class="headerlink" title="4、创建镜像仓库"></a>4、创建镜像仓库</h2><p>本地</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634c98ba16f2c2beb1464b58.jpg"></p>
<h2 id="5、推送镜像"><a href="#5、推送镜像" class="headerlink" title="5、推送镜像"></a>5、推送镜像</h2><p>参考阿里云容器镜像指南</p>
<ol>
<li>登录</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker login --username=[yourname] registry.cn-hangzhou.aliyuncs.com</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>查看镜像</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line">REPOSITORY                      TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">xiaobluewhale/tomcat            1.0       24b3a476f143   14 hours ago   680MB</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>推送镜像</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker push xiaobluewhale/tomcat:1.0</span><br><span class="line">The push refers to repository [docker.io/xiaobluewhale/tomcat]</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634c98cb16f2c2beb1465751.jpg"></p>
<h2 id="6、阿里云查看镜像"><a href="#6、阿里云查看镜像" class="headerlink" title="6、阿里云查看镜像"></a>6、阿里云查看镜像</h2><p>imageID: <code>24b3a476f143</code></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634c98da16f2c2beb14662d9.jpg"></p>
<p>也可以查看可视化的层信息</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634c98e716f2c2beb1466ce7.jpg"></p>
<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker | 超全的环境配置教程，以及问题解决</title>
    <url>/posts/1689142117.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Docker/">Docker专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><a href="https://docs.docker.com/get-started/overview/">文档</a>非常用心🌹</p>
<p>我的服务器是 <code>centos 7</code> 环境</p>
<p>如果CentOS系统内核低于3.10，可以升级软件包及内核，通过 <code>yum update</code> 升级</p>
<blockquote>
<p>Linux系统分为两种：</p>
<ol>
<li><p>RedHat系列：Redhat、Centos、Fedora等</p>
</li>
<li><p>Debian系列：Debian、Ubuntu等</p>
</li>
</ol>
<p>RedHat系列的包管理工具是<code>yum</code></p>
<p>Debian系列的包管理工具是<code>apt-get</code></p>
</blockquote>
<ol>
<li>查看系统版本:</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/version</span><br><span class="line">Linux version 3.10.0-1062.1.2.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) ) <span class="comment">#1 SMP Mon Sep 30 14:19:46 UTC 2019</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>我的系统是<code>Red hat</code>， 所以使用的包管理工具是<code>yum</code></p>
</blockquote>
<ol start="2">
<li><p>查看系统内核</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -r // 查看系统内核</span><br><span class="line">3.10.0-1062.1.2.el7.x86_64</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>查看系统配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/os-release // 查看系统配置</span><br><span class="line">NAME=<span class="string">"CentOS Linux"</span></span><br><span class="line">VERSION=<span class="string">"7 (Core)"</span></span><br><span class="line">ID=<span class="string">"centos"</span></span><br><span class="line">ID_LIKE=<span class="string">"rhel fedora"</span></span><br><span class="line">VERSION_ID=<span class="string">"7"</span></span><br><span class="line">PRETTY_NAME=<span class="string">"CentOS Linux 7 (Core)"</span></span><br><span class="line">ANSI_COLOR=<span class="string">"0;31"</span></span><br><span class="line">CPE_NAME=<span class="string">"cpe:/o:centos:centos:7"</span></span><br><span class="line">HOME_URL=<span class="string">"https://www.centos.org/"</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">"https://bugs.centos.org/"</span></span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=<span class="string">"CentOS-7"</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=<span class="string">"7"</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT=<span class="string">"centos"</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=<span class="string">"7"</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63402e1016f2c2beb1228dbc.jpg"></p>
<p>文档传送门：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p>
<h2 id="安装并运行一个hello-world"><a href="#安装并运行一个hello-world" class="headerlink" title="安装并运行一个hello-world"></a>安装并运行一个<code>hello-world</code></h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="1、卸载旧版本"><a href="#1、卸载旧版本" class="headerlink" title="1、卸载旧版本"></a>1、卸载旧版本</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></tbody></table></figure>

<h4 id="2、需要的安装包"><a href="#2、需要的安装包" class="headerlink" title="2、需要的安装包"></a>2、需要的安装包</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></tbody></table></figure>

<h4 id="3、设置镜像仓库"><a href="#3、设置镜像仓库" class="headerlink" title="3、设置镜像仓库"></a>3、设置镜像仓库</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo // 默认是国外的</span><br><span class="line"></span><br><span class="line">		http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo //  阿里云镜像地址</span><br></pre></td></tr></tbody></table></figure>

<h4 id="4、更新yum软件包索引"><a href="#4、更新yum软件包索引" class="headerlink" title="4、更新yum软件包索引"></a>4、更新<code>yum</code>软件包索引</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></tbody></table></figure>

<h4 id="5、安装docker相关的内容"><a href="#5、安装docker相关的内容" class="headerlink" title="5、安装docker相关的内容"></a>5、安装docker相关的内容</h4><ul>
<li><p><code>docker-ce</code> 社区版</p>
</li>
<li><p><code>ee</code> 企业版</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></tbody></table></figure>

<h4 id="6、配置阿里云镜像加速"><a href="#6、配置阿里云镜像加速" class="headerlink" title="6、配置阿里云镜像加速"></a>6、配置阿里云镜像加速</h4><p>登录阿里云，找到容器镜像服务，找到自己的镜像加速器</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63402e3116f2c2beb122c809.jpg"></p>
<p>配置步骤如下👇</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 编写配置文件</span></span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">{</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://xxxx.mirror.aliyuncs.com"</span>]</span><br><span class="line">}</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 重新加载配置</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 启动</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></tbody></table></figure>

<h4 id="7、重新加载配置文件"><a href="#7、重新加载配置文件" class="headerlink" title="7、重新加载配置文件"></a>7、重新加载配置文件</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></tbody></table></figure>

<h4 id="8、启动"><a href="#8、启动" class="headerlink" title="8、启动"></a>8、启动</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></tbody></table></figure>

<h4 id="9、查看是否启动成功"><a href="#9、查看是否启动成功" class="headerlink" title="9、查看是否启动成功"></a>9、查看是否启动成功</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63402e3d16f2c2beb122df6e.jpg"></p>
<h4 id="10、hello-world"><a href="#10、hello-world" class="headerlink" title="10、hello-world"></a>10、<code>hello-world</code></h4><ol>
<li>直接运行<code>run</code>命令</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63402e5516f2c2beb1230628.jpg"></p>
<ol start="2">
<li><code>run</code>命令工作流程图解</li>
</ol>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63402e6e16f2c2beb1233443.jpg"></p>
<h4 id="11、查看下载的hello-world镜像"><a href="#11、查看下载的hello-world镜像" class="headerlink" title="11、查看下载的hello-world镜像"></a>11、查看下载的hello-world镜像</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63402e7e16f2c2beb1234da4.jpg"></p>
<h2 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 卸载依赖</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 删除目录</span></span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/docker</span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/containerd</span><br></pre></td></tr></tbody></table></figure>

<h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><h3 id="docker-启动报错"><a href="#docker-启动报错" class="headerlink" title="docker 启动报错"></a>docker 启动报错</h3><blockquote>
<p>Job for docker.service failed because the control process exited with error code. See “systemctl status docker.service” and “journalctl -xe” for details.</p>
</blockquote>
<p>修改<code>/usr/lib/systemd/system/docker.service</code></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63402e9816f2c2beb123788f.jpg"></p>
<ul>
<li>错误原因：</li>
</ul>
<p><code>docker</code>的<code>socket</code>配置出现了冲突，<code>docker</code>在运行时的启动入口文件为：<code>/lib/systemd/system/docker.service</code>，我们在配置镜像加速之后又添加了一个守护进程文件：<code>/etc/docker/daemon.json</code>，两个文件对<code>host</code>进行了配置，发生冲突。</p>
<ul>
<li>查看报错详情 <code>journalctl -xe</code></li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63402eb616f2c2beb123b024.jpg"></p>
<blockquote>
<p>failed to start daemon: error initializing graphdriver: /var/lib/docker contains several valid graphdrivers: devicemapper, o</p>
</blockquote>
<ul>
<li>解决办法：</li>
</ul>
<p>修改 <code>/etc/docker/daemon.json</code></p>
<p>增加：</p>
<figure class="highlight prolog"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"storage-driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">  <span class="string">"storage-opts"</span>: [</span><br><span class="line">    <span class="string">"overlay2.override_kernel_check=true"</span></span><br><span class="line"> ]</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63402ec916f2c2beb123d2df.jpg"></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol>
<li><p>查看版本 <code>docker -v</code></p>
</li>
<li><p>设置服务器开机启动</p>
</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>停止<code>docker</code></li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></tbody></table></figure>

<ol start="4">
<li>systemctl 方式</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 守护进程重启</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启docker服务</span></span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭docker</span></span><br><span class="line">sudo systemctl stop docker</span><br></pre></td></tr></tbody></table></figure>

<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker | 容器互联互通</title>
    <url>/posts/2247720414.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Docker/">Docker专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<p>上篇讲到创建自定义网络，我创建了 <code>mynet</code> 网络，并指定了网关和子网地址。在上篇结尾呢，我抛出了一个问题：其它网络下的容器可以直接访问<code>mynet</code>网络下的容器吗？今天就让我们一块看下怎么实现容器互联。</p>
<h2 id="其它网络下的容器加入mynet网络，实现一个容器两个ip地址"><a href="#其它网络下的容器加入mynet网络，实现一个容器两个ip地址" class="headerlink" title="其它网络下的容器加入mynet网络，实现一个容器两个ip地址"></a>其它网络下的容器加入<code>mynet</code>网络，实现一个容器两个<code>ip</code>地址</h2><p><strong>网络集群</strong></p>
<blockquote>
<ol>
<li>先创建<code>test-network</code>网络：</li>
</ol>
<ul>
<li><code>docker network create test-network</code></li>
</ul>
<ol start="2">
<li>再运行<code>centos01</code>容器并加入到<code>test-network</code>网络下</li>
</ol>
<ul>
<li><code>docker run -it -P --name centos01 --net test-network centos</code></li>
</ul>
</blockquote>
<p><code>centos01</code>容器已经加入在<code>test-network</code>网络下了</p>
<h3 id="centos01加入mynet网络"><a href="#centos01加入mynet网络" class="headerlink" title="centos01加入mynet网络"></a><code>centos01</code>加入<code>mynet</code>网络</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">root@--- ~]<span class="comment"># docker network connect mynet centos01</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="查看mynet网络"><a href="#查看mynet网络" class="headerlink" title="查看mynet网络"></a>查看mynet网络</h3><ul>
<li><code>docker network ls</code></li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME           DRIVER    SCOPE</span><br><span class="line">feafa30d4051   bridge         bridge    <span class="built_in">local</span></span><br><span class="line">e8bf4fced9e2   host           host      <span class="built_in">local</span></span><br><span class="line">0096a971fd2c   mynet          bridge    <span class="built_in">local</span>  <span class="comment"># 自定义bridge网桥</span></span><br><span class="line">6263db0933b9   none           null      <span class="built_in">local</span></span><br><span class="line">799426d70aa2   test-network   bridge    <span class="built_in">local</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><code>docker network inspect 0096</code></li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># docker network inspect 0096</span></span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"mynet"</span>,</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"0096a971fd2c66400e53cbae5e53eceedc2f90d5685917e9534640a3535c0ef1"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2021-10-04T10:18:09.113847736+08:00"</span>,</span><br><span class="line">        <span class="comment"># ... 省略代码展示</span></span><br><span class="line">        <span class="string">"IPAM"</span>: {</span><br><span class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"Options"</span>: {},</span><br><span class="line">            <span class="string">"Config"</span>: [</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">"Subnet"</span>: <span class="string">"192.168.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"192.168.0.1"</span></span><br><span class="line">                }</span><br><span class="line">            ]</span><br><span class="line">        },</span><br><span class="line">        <span class="comment"># ... 省略代码展示</span></span><br><span class="line">        <span class="string">"Containers"</span>: {</span><br><span class="line">            <span class="string">"2fac920eebd505794c4a27ef4efdf531d32805e8663bded93a473bd28236bc27"</span>: {</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"mynet-centos01"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"3aff075..."</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:c0:a8:00:02"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"192.168.0.2/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"3dceda051252b6970fe2156bac7710ba6489a97aac68c49b1c85a2f130d0556f"</span>: {</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"mynet-tomcat01"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"9f52b19..."</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:c0:a8:00:03"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"192.168.0.3/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"cb1922b95b9316d129b54f3545fad9729092926e10a1d5517f8928db42706151"</span>: {</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"centos01"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"0ba2107..."</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:c0:a8:00:04"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"192.168.0.4/16"</span>,   <span class="comment"># 新加入的centos01容器</span></span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"Options"</span>: {},</span><br><span class="line">        <span class="string">"Labels"</span>: {}</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<h3 id="查看centos01的容器信息"><a href="#查看centos01的容器信息" class="headerlink" title="查看centos01的容器信息"></a>查看centos01的容器信息</h3><p>可以看到<code>Networks</code>下面存在<code>mynet</code>、<code>test-network</code>两个网络连接信息</p>
<p>一个容器两个<code>ip</code>地址</p>
<p>无关代码已省略展示</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># docker inspect cb19</span></span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"cb1922b95b9316d129b54f3545fad9729092926e10a1d5517f8928db42706151"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2021-10-03T13:39:00.942877668Z"</span>,</span><br><span class="line">        <span class="string">"Path"</span>: <span class="string">"/bin/bash"</span>,</span><br><span class="line">        <span class="string">"Args"</span>: [],</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ... 省略代码展示</span></span><br><span class="line"></span><br><span class="line">        <span class="string">"NetworkSettings"</span>: {</span><br><span class="line">            <span class="comment"># ... 省略代码展示</span></span><br><span class="line">            <span class="string">"Networks"</span>: {</span><br><span class="line">                <span class="comment"># 网络连接1 ： mynet</span></span><br><span class="line">                <span class="string">"mynet"</span>: {、</span><br><span class="line">                    <span class="comment"># ... 省略代码展示</span></span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"192.168.0.1"</span>,</span><br><span class="line">                    <span class="string">"IPAddress"</span>: <span class="string">"192.168.0.4"</span>,</span><br><span class="line">                    <span class="string">"MacAddress"</span>: <span class="string">"02:42:c0:a8:00:04"</span>,</span><br><span class="line">                },</span><br><span class="line">                <span class="comment"># 网络连接2 ： test-network</span></span><br><span class="line">                <span class="string">"test-network"</span>: {</span><br><span class="line">                    <span class="comment"># ... 省略代码展示</span></span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"172.18.0.1"</span>,</span><br><span class="line">                    <span class="string">"IPAddress"</span>: <span class="string">"172.18.0.3"</span>,</span><br><span class="line">                    <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:12:00:03"</span>,</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<h2 id="test-network网卡下的centos01访问mynet网卡下的mynet-centos01、mynet-tomcat01"><a href="#test-network网卡下的centos01访问mynet网卡下的mynet-centos01、mynet-tomcat01" class="headerlink" title="test-network网卡下的centos01访问mynet网卡下的mynet-centos01、mynet-tomcat01"></a>test-network网卡下的centos01访问mynet网卡下的mynet-centos01、mynet-tomcat01</h2><p>容器ip和容器名都可以连接</p>
<h3 id="进入centos01容器"><a href="#进入centos01容器" class="headerlink" title="进入centos01容器"></a>进入centos01容器</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># docker exec -it cb19 /bin/bash</span></span><br></pre></td></tr></tbody></table></figure>

<p><code>mynet-tomcat01</code> 容器的IP是: <code>192.168.0.3</code></p>
<h3 id="ping-mynet-tomcat01-容器的IP"><a href="#ping-mynet-tomcat01-容器的IP" class="headerlink" title="ping mynet-tomcat01 容器的IP"></a>ping <code>mynet-tomcat01</code> 容器的IP</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@cb1922b95b93 /]<span class="comment"># ping 192.168.0.3</span></span><br><span class="line">PING 192.168.0.3 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=1 ttl=64 time=0.186 ms</span><br><span class="line">^C</span><br><span class="line">--- 192.168.0.3 ping statistics ---</span><br><span class="line">7 packets transmitted, 7 received, 0% packet loss, time 6000ms</span><br><span class="line">rtt min/avg/max/mdev = 0.090/0.127/0.186/0.029 ms</span><br></pre></td></tr></tbody></table></figure>

<h3 id="直接ping-容器名-mynet-centos01-mynet-tomcat01"><a href="#直接ping-容器名-mynet-centos01-mynet-tomcat01" class="headerlink" title="直接ping 容器名 mynet-centos01 mynet-tomcat01"></a>直接ping 容器名 <code>mynet-centos01</code> <code>mynet-tomcat01</code></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@cb1922b95b93 /]<span class="comment"># ping mynet-centos01</span></span><br><span class="line">PING mynet-centos01 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mynet-centos01.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.105 ms</span><br><span class="line">^C</span><br><span class="line">--- mynet-centos01 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2001ms</span><br><span class="line">rtt min/avg/max/mdev = 0.105/0.116/0.130/0.013 ms</span><br><span class="line"></span><br><span class="line">[root@cb1922b95b93 /]<span class="comment"># ping mynet-tomcat01</span></span><br><span class="line">PING mynet-tomcat01 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from mynet-tomcat01.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.085 ms</span><br><span class="line">^C</span><br><span class="line">--- mynet-tomcat01 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1001ms</span><br><span class="line">rtt min/avg/max/mdev = 0.085/0.093/0.102/0.012 ms</span><br><span class="line">[root@cb1922b95b93 /]<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>其它网络下的容器可以通过加入docker网络，来访问该docker网络下的容器，并且既可以通过容器ip也可以通过容器名连接，非常方便。<code>docker0</code>十分强大</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634d69ae16f2c2beb1d5df36.jpg"></p>
<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
  </entry>
  <entry>
    <title>Docker | 容器数据卷详解</title>
    <url>/posts/4209609624.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Docker/">Docker专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<h1 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h1><p>从docker的理念说起，docker将应用和环境打包成一个镜像，运行镜像（生成容器）就可以访问服务了。</p>
<ul>
<li>如果数据都存在容器中，那么删除容器，数据就会丢失！需求：数据可以持久化</li>
<li>MySQL容器删了，就相当于删库了。需求：MySQL数据可以本地存储</li>
</ul>
<p>容器之间可以有一个<strong>数据共享</strong>的技术，docker容器产生的数据同步到本地或者别的地方。</p>
<p>这就是数据卷技术，就是<strong>目录挂载</strong>，将容器内的目录，挂载到虚拟机上或者Linux上</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634386f116f2c2beb1410029.jpg"></p>
<p><strong>目的：</strong>实现容器数据的持久化和同步操作。容器间也可以数据共享</p>
<h1 id="数据的覆盖问题"><a href="#数据的覆盖问题" class="headerlink" title="数据的覆盖问题"></a>数据的覆盖问题</h1><ol>
<li><p>如果挂载一个<code>空的数据卷</code>到容器中的一个<code>非空目录</code>中，那么这个目录下的文件会被复制到数据卷中。</p>
</li>
<li><p>如果挂载一个<code>非空的数据卷</code>到容器中的一个目录中，那么容器中的目录中会显示数据卷中的数据。如果原来容器中的目录中有数据，那么这些原始数据会被隐藏掉。</p>
</li>
</ol>
<p>这两个规则都非常重要，灵活利用第一个规则可以帮助我们<code>初始化数据卷</code>中的内容。掌握第二个规则可以保证挂载数据卷后的数据总是你期望的结果。</p>
<h1 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h1><h2 id="方式一：直接使用命令挂载-v"><a href="#方式一：直接使用命令挂载-v" class="headerlink" title="方式一：直接使用命令挂载 -v"></a>方式一：直接使用命令挂载 -v</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器内目录</span><br><span class="line"></span><br><span class="line">docker run -it -v /home/test:/home centos /bin/bash</span><br></pre></td></tr></tbody></table></figure>
<p><code>docker inspect</code> 命令查看容器信息</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6343870016f2c2beb14117d6.jpg"></p>
<h3 id="测试挂载卷"><a href="#测试挂载卷" class="headerlink" title="测试挂载卷"></a>测试挂载卷</h3><h4 id="1、在容器内部修改文件同步到Linux主机上"><a href="#1、在容器内部修改文件同步到Linux主机上" class="headerlink" title="1、在容器内部修改文件同步到Linux主机上"></a>1、在容器内部修改文件同步到Linux主机上</h4><p>进入容器，在<code>/home</code>目录下创建<code>123.sh</code>文件</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6343871116f2c2beb14132e9.jpg"></p>
<p>主机内可以查看在容器内部创建的文件</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6343876116f2c2beb141b529.jpg"></p>
<h4 id="2、同样地，在Linux上修改挂在卷文件可以同步到容器内部"><a href="#2、同样地，在Linux上修改挂在卷文件可以同步到容器内部" class="headerlink" title="2、同样地，在Linux上修改挂在卷文件可以同步到容器内部"></a>2、同样地，在Linux上修改挂在卷文件可以同步到容器内部</h4><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6343877116f2c2beb141cce4.jpg"></p>
<h4 id="3、停止容器，修改Linux主机上的文件，同步到容器内"><a href="#3、停止容器，修改Linux主机上的文件，同步到容器内" class="headerlink" title="3、停止容器，修改Linux主机上的文件，同步到容器内"></a>3、停止容器，修改Linux主机上的文件，同步到容器内</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1、停止容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、查看容器是否还在运行</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、在Linux主机上修改对应目录的文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、启动容器并查看</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 4.1、 查看历史运行的容器</span></span><br><span class="line">  docker ps -a</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 4.2、 启动容器</span></span><br><span class="line">  docker start CONTAINER ID</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 4.3、 进去容器</span></span><br><span class="line">  docker attach CONTAINER ID</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 4.4、 查看数据卷文件</span></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6343877f16f2c2beb141e2b5.jpg"></p>
<h2 id="方式二：Dockerfile文件"><a href="#方式二：Dockerfile文件" class="headerlink" title="方式二：Dockerfile文件"></a>方式二：Dockerfile文件</h2><p>请查看下一章节</p>
<h1 id="数据卷命令"><a href="#数据卷命令" class="headerlink" title="数据卷命令"></a>数据卷命令</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker volume</span><br><span class="line"></span><br><span class="line">docker volume --<span class="built_in">help</span></span><br><span class="line">Usage:  docker volume COMMAND</span><br><span class="line">Manage volumes</span><br><span class="line">Commands:</span><br><span class="line">  create      Create a volume</span><br><span class="line">  inspect     Display detailed information on one or more volumes</span><br><span class="line">  <span class="built_in">ls</span>          List volumes</span><br><span class="line">  prune       Remove all unused <span class="built_in">local</span> volumes</span><br><span class="line">  <span class="built_in">rm</span>          Remove one or more volumes</span><br><span class="line"></span><br><span class="line">Run <span class="string">'docker volume COMMAND --help'</span> <span class="keyword">for</span> more information on a <span class="built_in">command</span>.</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6343879016f2c2beb141fa85.jpg"></p>
<h2 id="具名挂载-x2F-匿名挂载"><a href="#具名挂载-x2F-匿名挂载" class="headerlink" title="具名挂载/匿名挂载"></a>具名挂载/匿名挂载</h2><h3 id="匿名挂载"><a href="#匿名挂载" class="headerlink" title="匿名挂载"></a>匿名挂载</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">-v 容器内路径</span><br><span class="line">-P 自动分配端口号</span><br><span class="line"></span><br><span class="line">docker run -d -P --name nginx02 -v /etc/nginx nginx</span><br></pre></td></tr></tbody></table></figure>

<h3 id="具名挂载"><a href="#具名挂载" class="headerlink" title="具名挂载"></a>具名挂载</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">-v 卷名:容器内路径</span><br><span class="line">docker run -d -P --name nginx03 -v juming-nginx:/etc/nginx nginx</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6343879f16f2c2beb1421409.jpg"></p>
<h2 id="查看数据卷"><a href="#查看数据卷" class="headerlink" title="查看数据卷"></a>查看数据卷</h2><h3 id="方式一：docker-inspect-容器ID"><a href="#方式一：docker-inspect-容器ID" class="headerlink" title="方式一：docker inspect 容器ID"></a>方式一：docker inspect 容器ID</h3><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634387ae16f2c2beb1422a77.jpg"></p>
<h3 id="方式二：docker-volume-inspect-juming-nginx"><a href="#方式二：docker-volume-inspect-juming-nginx" class="headerlink" title="方式二：docker volume inspect juming-nginx"></a>方式二：docker volume inspect juming-nginx</h3><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634387c216f2c2beb1424a7e.jpg"></p>
<blockquote>
<p>查看Linux主机docker工作目录 <code>/var/lib/docker</code></p>
<p>所有docker容器内的卷，没有指定目录的情况下都是存放在 <code>/var/lib/docker/volumes/xxx/_data</code> 目录下</p>
</blockquote>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634387d916f2c2beb1427381.jpg"></p>
<h2 id="挂载三种方式"><a href="#挂载三种方式" class="headerlink" title="挂载三种方式"></a>挂载三种方式</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line">-v 容器内路径            <span class="comment"># 匿名挂载</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">-v 卷名:容器内路径       <span class="comment"># 具名挂载</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">-v 宿主机路径:容器内路径 <span class="comment"># 指定路径挂载</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p><strong>给挂载的数据卷增加读写权限控制</strong></p>
<p>通过 <code>-v</code> 容器内路径， <code>ro</code> <code>rw</code> 改变读写权限</p>
<ul>
<li><p>ro readonly   只读</p>
</li>
<li><p>rw readwrite  可读写</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 一旦设置了容器权限，容器对我们挂载出来的内容就有限定了</span></span><br><span class="line"></span><br><span class="line">docker run -d -P --name nginx03 -v juming-nginx:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx03 -v juming-nginx:/etc/nginx:rw nginx</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p><code>ro</code> : 说明这个路径只能通过宿主机来操作，容器内无法操作</p>
<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker | 数据持久化与数据共享</title>
    <url>/posts/3117997523.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Docker/">Docker专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<h1 id="数据持久化（安装MySQL）"><a href="#数据持久化（安装MySQL）" class="headerlink" title="数据持久化（安装MySQL）"></a>数据持久化（安装MySQL）</h1><p>参考另一篇Docker安装mysql: <a href="https://www.yuque.com/allblue-byynd/cs239m/pct46i">https://www.yuque.com/allblue-byynd/cs239m/pct46i</a></p>
<h2 id="MySQL的数据持久化问题"><a href="#MySQL的数据持久化问题" class="headerlink" title="MySQL的数据持久化问题"></a>MySQL的数据持久化问题</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载容器</span></span><br><span class="line">docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line">-d 后台运行</span><br><span class="line">-p 端口映射</span><br><span class="line">-v 挂载数据卷</span><br><span class="line">-e 环境配置</span><br><span class="line">--name 容器名字</span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br></pre></td></tr></tbody></table></figure>

<p><a href="https://hub.docker.com/_/mysql">https://hub.docker.com/_/mysql</a></p>
<blockquote>
<p>官网启动MySQL，设置密码</p>
<p><code>docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</code></p>
</blockquote>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63461ba516f2c2beb1c1cc9a.jpg"></p>
<h2 id="启动成功之后，使用客户端连接"><a href="#启动成功之后，使用客户端连接" class="headerlink" title="启动成功之后，使用客户端连接"></a>启动成功之后，使用客户端连接</h2><p>这里我使用的是SQLyog工具连接MySQL数据库</p>
<p>sqlyog连接服务器的3310端口，3310端口映射MySQL容器的3306端口。</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63461bc716f2c2beb1c1faa9.jpg"></p>
<p>可以在Linux主机<code>/home</code>目录下查看到<code>mysql</code>文件夹</p>
<h2 id="删除MySQL容器，可以看到Linux主机上-x2F-home-x2F-mysql-x2F-数据依然存在"><a href="#删除MySQL容器，可以看到Linux主机上-x2F-home-x2F-mysql-x2F-数据依然存在" class="headerlink" title="删除MySQL容器，可以看到Linux主机上/home/mysql/数据依然存在"></a>删除MySQL容器，可以看到Linux主机上/home/mysql/数据依然存在</h2><ul>
<li>docker rm -f 容器ID</li>
<li>docker ps -a</li>
<li>cd /home/mysql</li>
<li>ls</li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63461bd616f2c2beb1c20f71.jpg"></p>
<p>运行新的MySQL容器通过挂载数据卷，就可以把Linux主机上备份的数据重新导入到容器里，这就是数据持久化。</p>
<h1 id="数据共享"><a href="#数据共享" class="headerlink" title="数据共享"></a>数据共享</h1><p>容器之间同步数据。比方说，两个<code>MySQL</code>数据库同步数据</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">--volumes-from</span><br><span class="line">实现容器间的数据共享</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63461be916f2c2beb1c22d3d.jpg"></p>
<h2 id="多个centos容器数据共享"><a href="#多个centos容器数据共享" class="headerlink" title="多个centos容器数据共享"></a>多个centos容器数据共享</h2><ol>
<li>父容器docker01(数据卷容器)</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 父容器docker01(数据卷容器)</span></span><br><span class="line">docker run -it --name docker01 xiao-centos /bin/bash</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>创建docker02容器，继承关联docker01容器</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -it --name docker02 --volumes-from docker01 xiao-centos /bin/bash</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>创建docker03容器，继承关联docker01容器</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -it --name docker03 --volumes-from docker01 xiao-centos /bin/bash</span><br></pre></td></tr></tbody></table></figure>

<p>以上三个容器之间数据同步共享，测试停止并删除docker01容器之后，docker02,docker03的数据存在且依然可以同步数据</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63461bf716f2c2beb1c242f9.jpg"></p>
<h2 id="多个MySQL实现数据共享"><a href="#多个MySQL实现数据共享" class="headerlink" title="多个MySQL实现数据共享"></a>多个MySQL实现数据共享</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建mysql01容器</span></span><br><span class="line">docker run -d -p 3310:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PQSSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建mysql02容器，同步mysql01容器</span></span><br><span class="line">docker run -d -p 3310:3306 -e MYSQL_ROOT_PQSSWORD=123456 --name mysql02 --volumes-from mysql02 mysql:5.7</span><br><span class="line"></span><br><span class="line">通过 --volumes-from 实现数据共享(继承)</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>结论：</p>
<ol>
<li><p>容器之间配置信息的传递，数据卷容器的生命周期一直持续到没有容器为止。</p>
</li>
<li><p>同步到宿主机本机的数据，本地持久化</p>
</li>
</ol>
</blockquote>
<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker | 自定义网络（网关、子网地址）</title>
    <url>/posts/2785354845.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Docker/">Docker专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<h2 id="了解-docker-network"><a href="#了解-docker-network" class="headerlink" title="了解 docker network"></a>了解 docker network</h2><p>通过下面的命令来获取帮助</p>
<ol>
<li>docker network –help</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Commands:</span><br><span class="line">  connect     Connect a container to a network</span><br><span class="line">  create      Create a network</span><br><span class="line">  disconnect  Disconnect a container from a network</span><br><span class="line">  inspect     Display detailed information on one or more networks</span><br><span class="line">  <span class="built_in">ls</span>          List networks</span><br><span class="line">  prune       Remove all unused networks</span><br><span class="line">  <span class="built_in">rm</span>          Remove one or more networks</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>docker network create –help</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Options:</span><br><span class="line">      --attachable           Enable manual container attachment</span><br><span class="line">      --aux-address map      Auxiliary IPv4 or IPv6 addresses used by Network driver (default map[])</span><br><span class="line">      --config-from string   The network from <span class="built_in">which</span> to copy the configuration</span><br><span class="line">      --config-only          Create a configuration only network</span><br><span class="line">  -d, --driver string        Driver to manage the Network (default <span class="string">"bridge"</span>)</span><br><span class="line">      --gateway strings      IPv4 or IPv6 Gateway <span class="keyword">for</span> the master subnet   <span class="comment"># 网关</span></span><br><span class="line">      --ingress              Create swarm routing-mesh network</span><br><span class="line">      --internal             Restrict external access to the network</span><br><span class="line">      --ip-range strings     Allocate container ip from a sub-range</span><br><span class="line">      --ipam-driver string   IP Address Management Driver (default <span class="string">"default"</span>)</span><br><span class="line">      --ipam-opt map         Set IPAM driver specific options (default map[])</span><br><span class="line">      --ipv6                 Enable IPv6 networking</span><br><span class="line">      --label list           Set metadata on a network</span><br><span class="line">  -o, --opt map              Set driver specific options (default map[])</span><br><span class="line">      --scope string         Control the network<span class="string">'s scope</span></span><br><span class="line"><span class="string">      --subnet strings       Subnet in CIDR format that represents a network segment  #子网</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h2><ul>
<li>–driver bridge          网络类型，默认bridge网桥</li>
<li>–subnet 192.168.0.0/16  子网</li>
<li>–gateway 192.168.0.1    网关</li>
</ul>
<h3 id="创建-mynet-网络"><a href="#创建-mynet-网络" class="headerlink" title="创建 mynet 网络"></a>创建 <code>mynet</code> 网络</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line">0096a971fd2c66400e53cbae5e53eceedc2f90d5685917e9534640a3535c0ef1</span><br></pre></td></tr></tbody></table></figure>

<h3 id="查看网卡"><a href="#查看网卡" class="headerlink" title="查看网卡"></a>查看网卡</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:16:3e:0a:00:34 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.31.81.32/20 brd 172.31.95.255 scope global dynamic eth0</span><br><span class="line">       valid_lft 291870572sec preferred_lft 291870572sec</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:a4:2f:c5:62 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">140: br-799426d70aa2: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:7f:01:1d:00 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.1/16 brd 172.18.255.255 scope global br-799426d70aa2     <span class="comment"># test-network</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">176: br-0096a971fd2c: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:d9:14:c1:d3 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.0.1/16 brd 192.168.255.255 scope global br-0096a971fd2c   <span class="comment"># mynet</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></tbody></table></figure>

<h3 id="查看网络"><a href="#查看网络" class="headerlink" title="查看网络"></a>查看网络</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME           DRIVER    SCOPE</span><br><span class="line">feafa30d4051   bridge         bridge    <span class="built_in">local</span></span><br><span class="line">e8bf4fced9e2   host           host      <span class="built_in">local</span></span><br><span class="line">0096a971fd2c   mynet          bridge    <span class="built_in">local</span>  <span class="comment"># 自定义bridge网桥</span></span><br><span class="line">6263db0933b9   none           null      <span class="built_in">local</span></span><br><span class="line">799426d70aa2   test-network   bridge    <span class="built_in">local</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="查看-mynet-网络详细信息"><a href="#查看-mynet-网络详细信息" class="headerlink" title="查看 mynet 网络详细信息"></a>查看 <code>mynet</code> 网络详细信息</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># docker network inspect 0096a971fd2c</span></span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"mynet"</span>,</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"0096a971fd2c66400e53cbae5e53eceedc2f90d5685917e9534640a3535c0ef1"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2021-10-04T10:18:09.113847736+08:00"</span>,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"bridge"</span>,  <span class="comment"># mynet 网络类型</span></span><br><span class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"IPAM"</span>: {</span><br><span class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"Options"</span>: {},</span><br><span class="line">            <span class="string">"Config"</span>: [</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">"Subnet"</span>: <span class="string">"192.168.0.0/16"</span>,   <span class="comment"># mynet 子网</span></span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"192.168.0.1"</span>      <span class="comment"># mynet 网关</span></span><br><span class="line">                }</span><br><span class="line">            ]</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Attachable"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Ingress"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"ConfigFrom"</span>: {</span><br><span class="line">            <span class="string">"Network"</span>: <span class="string">""</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"ConfigOnly"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Containers"</span>: {},</span><br><span class="line">        <span class="string">"Options"</span>: {},</span><br><span class="line">        <span class="string">"Labels"</span>: {}</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<h2 id="启动容器，并加入mynet网络"><a href="#启动容器，并加入mynet网络" class="headerlink" title="启动容器，并加入mynet网络"></a>启动容器，并加入mynet网络</h2><h3 id="启动-mynet-centos01-mynet-tomcat01-并加入mynet网络"><a href="#启动-mynet-centos01-mynet-tomcat01-并加入mynet网络" class="headerlink" title="启动 mynet-centos01 , mynet-tomcat01 并加入mynet网络"></a>启动 <code>mynet-centos01</code> , <code>mynet-tomcat01</code> 并加入mynet网络</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># docker run -it -P --name mynet-tomcat01 --net mynet tomcat</span></span><br><span class="line">[root@--- ~]<span class="comment"># docker run -it -P --name mynet-centos01 --net mynet centos</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="查看mynet网桥信息"><a href="#查看mynet网桥信息" class="headerlink" title="查看mynet网桥信息"></a>查看mynet网桥信息</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># docker network inspect 0096</span></span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"mynet"</span>,</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"0096a971fd2c66400e53cbae5e53eceedc2f90d5685917e9534640a3535c0ef1"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2021-10-04T10:18:09.113847736+08:00"</span>,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"IPAM"</span>: {</span><br><span class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"Options"</span>: {},</span><br><span class="line">            <span class="string">"Config"</span>: [</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">"Subnet"</span>: <span class="string">"192.168.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"192.168.0.1"</span></span><br><span class="line">                }</span><br><span class="line">            ]</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Attachable"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Ingress"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"ConfigFrom"</span>: {</span><br><span class="line">            <span class="string">"Network"</span>: <span class="string">""</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"ConfigOnly"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Containers"</span>: {</span><br><span class="line">            <span class="string">"2fac920eebd505794c4a27ef4efdf531d32805e8663bded93a473bd28236bc27"</span>: {</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"mynet-centos01"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"3aff0752e641651a446ec490faa000812417855739086b2edb584ac2a95a26dd"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:c0:a8:00:02"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"192.168.0.2/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"3dceda051252b6970fe2156bac7710ba6489a97aac68c49b1c85a2f130d0556f"</span>: {</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"mynet-tomcat01"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"9f52b19493d35c48fe9b33a319de5dbe54c50de1a5d049103cb4e39bfe645f1b"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:c0:a8:00:03"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"192.168.0.3/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"Options"</span>: {},</span><br><span class="line">        <span class="string">"Labels"</span>: {}</span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="进入-mynet-centos01-测试连接-mynet-tomcat01"><a href="#进入-mynet-centos01-测试连接-mynet-tomcat01" class="headerlink" title="进入 mynet-centos01 测试连接 mynet-tomcat01"></a>进入 <code>mynet-centos01</code> 测试连接 <code>mynet-tomcat01</code></h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 发现通过容器ip和容器名都可以连接</span></span><br><span class="line"></span><br><span class="line">[root@--- ~]<span class="comment"># docker exec -it 2fac920eebd5 /bin/sh</span></span><br><span class="line">sh-4.4<span class="comment"># ping</span></span><br><span class="line">sh-4.4<span class="comment"># ping 192.168.0.3   # 通过容器ip连接</span></span><br><span class="line">PING 192.168.0.3 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=1 ttl=64 time=0.140 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=2 ttl=64 time=0.110 ms</span><br><span class="line">^C</span><br><span class="line">--- 192.168.0.3 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 3000ms</span><br><span class="line">rtt min/avg/max/mdev = 0.110/0.121/0.140/0.016 ms</span><br><span class="line"></span><br><span class="line">sh-4.4<span class="comment"># ping mynet-tomcat01   # 通过容器名连接</span></span><br><span class="line">PING mynet-tomcat01 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from mynet-tomcat01.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.078 ms</span><br><span class="line">64 bytes from mynet-tomcat01.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.131 ms</span><br><span class="line">^C</span><br><span class="line">--- mynet-tomcat01 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2001ms</span><br><span class="line">rtt min/avg/max/mdev = 0.078/0.110/0.131/0.026 ms</span><br><span class="line">sh-4.4<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>在同一网络下的容器，发现通过<code>容器ip</code>和<code>容器名</code>都可以连接</p>
<h2 id="思考问题："><a href="#思考问题：" class="headerlink" title="思考问题："></a>思考问题：</h2><blockquote>
<p>其它网络下的容器可以直接访问mynet网络下的容器吗？</p>
<p>答案：不可以</p>
<p>解决方法： 让别的网络下的容器加入到<code>mynet</code>网络下</p>
</blockquote>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/634d69ae16f2c2beb1d5df36.jpg"></p>
<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker | 部署nginx服务</title>
    <url>/posts/1512743311.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Docker/">Docker专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<p>容器时相互隔离的，<code>docker</code>启动的<code>nginx</code>是容器内的服务，不影响我原先服务器上的<code>nginx</code>服务，小伙伴们可大胆尝试😃</p>
<p>本篇实在linux环境下操作的，主要目的是夺人眼目，对使用Docker部署服务进行尝鲜，先体会一下Docker的便捷之处。</p>
<h2 id="1、下载nginx镜像"><a href="#1、下载nginx镜像" class="headerlink" title="1、下载nginx镜像"></a>1、下载nginx镜像</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2、查看下载的镜像"><a href="#2、查看下载的镜像" class="headerlink" title="2、查看下载的镜像"></a>2、查看下载的镜像</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3、启动nginx镜像"><a href="#3、启动nginx镜像" class="headerlink" title="3、启动nginx镜像"></a>3、启动nginx镜像</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d --name nginx01 -p 3344:80 nginx（镜像名或者镜像<span class="built_in">id</span>）</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63423e4516f2c2beb109d82d.jpg"></p>
<h2 id="4、查看启动的nginx"><a href="#4、查看启动的nginx" class="headerlink" title="4、查看启动的nginx"></a>4、查看启动的nginx</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></tbody></table></figure>

<h2 id="5、访问启动的nginx"><a href="#5、访问启动的nginx" class="headerlink" title="5、访问启动的nginx"></a>5、访问启动的nginx</h2><p>在云服务器内使用 curl 测试访问</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">curl localhost:3344</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63423e5d16f2c2beb10a0248.jpg"></p>
<h3 id="5-1、linux开放防火墙端口"><a href="#5-1、linux开放防火墙端口" class="headerlink" title="5.1、linux开放防火墙端口"></a>5.1、linux开放防火墙端口</h3><p><code>firewall-cmd</code>位于<code>firewalld</code>包中</p>
<p><code>systemctl</code>位于<code>systemd</code>包中</p>
<p><strong>安装防火墙工具：</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yum install firewalld systemd -y</span><br></pre></td></tr></tbody></table></figure>

<p><strong>常用命令：</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看firewall(防火墙)服务状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启防火墙</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启防火墙</span></span><br><span class="line">service firewalld  restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭防火墙</span></span><br><span class="line">service firewalld  stop</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看防火墙规则</span></span><br><span class="line">firewall-cmd --list-all　　 　　<span class="comment">#查看全部信息</span></span><br><span class="line">firewall-cmd --list-ports 　　  <span class="comment">#只看端口信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加防火墙开放端口</span></span><br><span class="line">firewall-cmd --add-port=8001/tcp --permanent</span><br><span class="line">or</span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">命令含义:</span><br><span class="line">　　--zone 　　　　　　　　 <span class="comment">#作用域（public标识公共的）</span></span><br><span class="line">　　--add-port=80/tcp 　　<span class="comment">#添加端口， 格式为:端口/通讯协议</span></span><br><span class="line">　　--permanent 　　　　　　<span class="comment">#永久生效，没有此参数重启后失效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不要忘记reload！</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></tbody></table></figure>

<h3 id="5-2、阿里云服务器需要配置安全组规则"><a href="#5-2、阿里云服务器需要配置安全组规则" class="headerlink" title="5.2、阿里云服务器需要配置安全组规则"></a>5.2、阿里云服务器需要配置安全组规则</h3><p>配置完之后就可以在浏览器访问<code>公网ip+3344端口号</code>查看了</p>
<h3 id="5-3、原理"><a href="#5-3、原理" class="headerlink" title="5.3、原理"></a>5.3、原理</h3><p>端口暴露，linux端口映射到容器端口</p>
<p>0.0.0.0:3344-&gt;80/tcp</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63423e7416f2c2beb10a2e22.jpg"></p>
<h2 id="6-进入nginx容器"><a href="#6-进入nginx容器" class="headerlink" title="6.进入nginx容器"></a>6.进入nginx容器</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 0a7ebd6bc291 /bin/bash</span><br><span class="line">root@0a7ebd6bc291:/<span class="comment"># ls</span></span><br><span class="line">bin  boot  dev	docker-entrypoint.d  docker-entrypoint.sh  etc	home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">root@0a7ebd6bc291:/<span class="comment"># whereis nginx</span></span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class="line">root@0a7ebd6bc291:/<span class="comment"># cd /etc/nginx/</span></span><br><span class="line">root@0a7ebd6bc291:/etc/nginx<span class="comment"># ls</span></span><br><span class="line">conf.d	fastcgi_params	mime.types  modules  nginx.conf  scgi_params  uwsgi_params</span><br><span class="line">root@0a7ebd6bc291:/etc/nginx<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="问题探索"><a href="#问题探索" class="headerlink" title="问题探索"></a>问题探索</h2><p>每次改动<code>nginx</code>配置，都需要进入容器内部修改，十分麻烦，能否在容器外部提供一个映射路径，达到修改配置文件，容器内部就会自动修改？</p>
<blockquote>
<p>数据卷技术</p>
<p><code>nginx.conf</code>配置文件，注意<code>Nginx</code>默认是后台运行的，但<code>Docker</code>需要其在前台运行，否则直接退出容器。配置文件中添加<code>daemon off;</code>关闭后台运行。可以通过<code>Dockerfile</code>配置CMD命令实现</p>
</blockquote>
<p>感谢阅读，本篇完，数据卷技术下文继续分享！</p>
<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>Docker</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker | 镜像浅析，以及制作自己的镜像</title>
    <url>/posts/1309038568.html</url>
    <content><![CDATA[<html><head></head><body><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6340e6a716f2c2beb102f10f.jpg"></p>
<blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Docker/">Docker专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<p><strong>分层下载，<code>docker image</code> 的核心: 联合文件系统</strong></p>
<h2 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h2><p>镜像就是一个轻量的、独立的软件包。用来打包运行环境和基于运行环境开发的软件。它包含软件运行所需的所有内容（包括代码、运行时、库、环境变量、配置文件）</p>
<p>所有的应用，打包docker镜像，就可以跑起来。</p>
<h2 id="如何得到镜像"><a href="#如何得到镜像" class="headerlink" title="如何得到镜像"></a>如何得到镜像</h2><ul>
<li><p>从远程仓库下载</p>
</li>
<li><p>拷贝他人的镜像（镜像打包生成tar压缩包，可以发送压缩包给别人。）</p>
</li>
<li><p>自己制作一个镜像（<code>DockerFile</code>）</p>
</li>
</ul>
<h2 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h2><blockquote>
<p>UnionFS（联合文件系统）</p>
</blockquote>
<ol>
<li><p><code>UnionFS</code>（联合文件系统）是一种分层、轻量、高性能的文件系统。它支持对文件系统的修改作为一次提交，来一层一层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。</p>
</li>
<li><p>联合文件系统是<code>Docker</code>镜像的基础，镜像可以通过分层来进行继承，基于基础镜像（没有父镜像）可以制作各种具体的应用镜像。</p>
</li>
</ol>
<p><strong>特性</strong>：</p>
<p>一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p>
<p><strong>Docker镜像加载原理:</strong></p>
<p><code>Docker</code>的镜像实际上由一层一层的文件系统组成，</p>
<ul>
<li>bootfs（boot file syatem）</li>
<li>rootfs（root file system），</li>
</ul>
<p>就是各种操作系统的发行版，比如<code>Ubuntu</code>，<code>Centos</code></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6340e6ba16f2c2beb1030bea.jpg"></p>
<h2 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h2><ul>
<li>查看镜像详细信息</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker inspect 镜像<span class="built_in">id</span></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6340e6ca16f2c2beb1032747.jpg"></p>
<ul>
<li>Layers</li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6340e6da16f2c2beb1033f2d.jpg"></p>
<p><strong>特点:</strong></p>
<p>docker镜像都是只读的，当容器启动时，一个新的可写层被加到镜像的顶部。</p>
<p>这一层就是我们通常说的<strong>容器层</strong>，容器之下的都叫<strong>镜像层</strong>。</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6340e6e716f2c2beb1035598.jpg"></p>
<h2 id="commit镜像（提交一个自己的镜像）"><a href="#commit镜像（提交一个自己的镜像）" class="headerlink" title="commit镜像（提交一个自己的镜像）"></a>commit镜像（提交一个自己的镜像）</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker commit <span class="comment">#提交容器成为一个新的副本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#命令和git原理类似</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker commit -m=<span class="string">'提交的描述信息'</span> -a=<span class="string">'作者'</span> 容器<span class="built_in">id</span> 目标镜像名：[ tag ]</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>下载的tomcat镜像是阉割版，启动之后404，因为webapps下面没有ROOT文件夹，所以这里尝试做一个自己的可正常访问tomcat主页的镜像。<br>（由于镜像只读，启动镜像之后会在镜像层之上生成一个容器层，在tomcat容器层做修改，再把镜像层和修改过后的容器层整体打包成一个新的个人镜像）</p>
</blockquote>
<!-- 参考之前的docker部署tomcat文档[https://www.yuque.com/allblue-byynd/dtez1l/kgwtge](https://www.yuque.com/allblue-byynd/dtez1l/kgwtge) -->

<h3 id="1、下载tomcat镜像"><a href="#1、下载tomcat镜像" class="headerlink" title="1、下载tomcat镜像"></a>1、下载tomcat镜像</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker pull tomcat</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2、启动tomcat镜像"><a href="#2、启动tomcat镜像" class="headerlink" title="2、启动tomcat镜像"></a>2、启动tomcat镜像</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -it -p 3355:8080 tomcat /bin/bash</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3、浏览器访问404"><a href="#3、浏览器访问404" class="headerlink" title="3、浏览器访问404"></a>3、浏览器访问404</h3><h3 id="4、进入容器，复制webapps-dist目录下的文件到webapps目录下"><a href="#4、进入容器，复制webapps-dist目录下的文件到webapps目录下" class="headerlink" title="4、进入容器，复制webapps.dist目录下的文件到webapps目录下"></a>4、进入容器，复制webapps.dist目录下的文件到webapps目录下</h3><h3 id="5、提交镜像"><a href="#5、提交镜像" class="headerlink" title="5、提交镜像"></a>5、提交镜像</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker commit -m=<span class="string">"edit webapps dir"</span> -a=<span class="string">"xiao"</span> 容器<span class="built_in">id</span> tomcat02:1.0</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6340e70416f2c2beb1037f2e.jpg"></p>
<h3 id="6、查看提交的镜像信息"><a href="#6、查看提交的镜像信息" class="headerlink" title="6、查看提交的镜像信息"></a>6、查看提交的镜像信息</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker inspect [imageId]</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6340e74916f2c2beb103eac2.jpg"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6340e75616f2c2beb10400ab.jpg"></p>
<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker0网络及原理探究</title>
    <url>/posts/2165908694.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Docker/">Docker专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<blockquote>
<p>个人观点：Docker网络通信在容器编排、集群部署中具有举足轻重的地位，（玩docker不懂docker0那就……玩不透哇👀）本篇分析Docker网络，并通过启动几个容器来探究Docker网络及容器通信，帮助读者理解一下😊。</p>
</blockquote>
<h2 id="1、Docker0"><a href="#1、Docker0" class="headerlink" title="1、Docker0"></a>1、Docker0</h2><p>Docker 服务默认会创建一个 docker0 网桥（其上有一个 docker0 内部接口），它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络。</p>
<p>Docker 默认指定了 docker0 接口 的 IP 地址和子网掩码，让主机和容器之间可以通过网桥相互通信，它还给出了 MTU（接口允许接收的最大传输单元），通常是 1500 Bytes，或宿主主机网络路由上支持的默认值。这些值都可以在服务启动的时候进行配置。</p>
<h2 id="2、清空所有镜像"><a href="#2、清空所有镜像" class="headerlink" title="2、清空所有镜像"></a>2、清空所有镜像</h2><p>如果是初学者，还不是很了解docker0的情况下，建议清空所有镜像，创造一个比较干净的容器网络环境，更加清晰，有助于学习docker0😃</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 查看运行的容器</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 停掉所有正在运行的容器(否则删除不掉)</span></span><br><span class="line">docker stop [containerID]   <span class="comment"># docker stop $(docker container ls -q)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 执行删除</span></span><br><span class="line">docker rmi -f $(docker images -aq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 查看镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3、查看网卡信息"><a href="#3、查看网卡信息" class="headerlink" title="3、查看网卡信息"></a>3、查看网卡信息</h2><ol>
<li>先了解一下<code>ip addr</code>命令</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ip addr</span><br><span class="line"></span><br><span class="line">lo        <span class="comment"># 本机回环地址 127.0.0.1</span></span><br><span class="line">eth0      <span class="comment"># 阿里云内网地址 172.31.81.32</span></span><br><span class="line">docker0   <span class="comment"># docker生成的网卡 172.17.0.1</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>获取当前网卡ip地址和mac地址</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:16:3e:0a:00:34 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.31.81.32/20 brd 172.31.95.255 scope global dynamic eth0</span><br><span class="line">       valid_lft 291944112sec preferred_lft 291944112sec</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:a4:2f:c5:62 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@--- ~]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>下面通过docker启动几个容器来探究一下Docker网络👇</p>
</blockquote>
<h2 id="4、运行容器之后，再次查看网卡信息"><a href="#4、运行容器之后，再次查看网卡信息" class="headerlink" title="4、运行容器之后，再次查看网卡信息"></a>4、运行容器之后，再次查看网卡信息</h2><p>安装Docker时，它会<strong>自动创建</strong>三个网络，默认<code>bridge</code>网桥（创建容器默认连接到此网络）、 <code>none</code> 、<code>host</code></p>
<h3 id="4-1、运行mysql01-centos01-centos02容器"><a href="#4-1、运行mysql01-centos01-centos02容器" class="headerlink" title="4.1、运行mysql01, centos01, centos02容器"></a>4.1、运行<code>mysql01</code>, <code>centos01</code>, <code>centos02</code>容器</h3><ul>
<li>启动时，docker默认的bridge网桥，docker0给容器服务自动分配ip</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -it --name mysql01 -e MYSQL_ROOT_PASSWORD=123 mysql:5.7</span><br><span class="line">docker run -it --name centos01  centos /bin/bash</span><br><span class="line">docker run -it --name centos02  centos /bin/bash</span><br></pre></td></tr></tbody></table></figure>

<h3 id="4-2、查看ip、mac地址信息"><a href="#4-2、查看ip、mac地址信息" class="headerlink" title="4.2、查看ip、mac地址信息"></a>4.2、查看ip、mac地址信息</h3><ul>
<li>可以看到上面启动的三个容器服务的<code>mac</code>信息</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:16:3e:0a:00:34 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.31.81.32/20 brd 172.31.95.255 scope global dynamic eth0</span><br><span class="line">       valid_lft 291916543sec preferred_lft 291916543sec</span><br><span class="line">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:a4:2f:c5:62 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">140: br-799426d70aa2: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:7f:01:1d:00 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.1/16 brd 172.18.255.255 scope global br-799426d70aa2</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">154: vethe3da564@if153: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether ea:84:fb:14:47:99 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">156: veth6477da5@if155: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether 86:35:30:8d:14:85 brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class="line">158: veth17b2712@if157: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether 72:76:f0:3c:17:e8 brd ff:ff:ff:ff:ff:ff link-netnsid 2</span><br></pre></td></tr></tbody></table></figure>

<h3 id="4-3、查看docker网络"><a href="#4-3、查看docker网络" class="headerlink" title="4.3、查看docker网络"></a>4.3、查看docker网络</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">feafa30d4051   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">e8bf4fced9e2   host      host      <span class="built_in">local</span></span><br><span class="line">6263db0933b9   none      null      <span class="built_in">local</span></span><br><span class="line">[root@--- ~]<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="4-4、查看默认bridge网桥-docker0"><a href="#4-4、查看默认bridge网桥-docker0" class="headerlink" title="4.4、查看默认bridge网桥(docker0)"></a>4.4、查看默认bridge网桥(docker0)</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># docker network inspect feafa30d4051</span></span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"feafa30d4051f24353508959bd420fd163ad0c98d6b30ec8ff13b59a59552bb1"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2021-09-26T15:10:27.167774553+08:00"</span>,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"IPAM"</span>: {</span><br><span class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"Options"</span>: null,</span><br><span class="line">            <span class="string">"Config"</span>: [</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">"Subnet"</span>: <span class="string">"172.17.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"172.17.0.1"</span></span><br><span class="line">                }</span><br><span class="line">            ]</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Attachable"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Ingress"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"ConfigFrom"</span>: {</span><br><span class="line">            <span class="string">"Network"</span>: <span class="string">""</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"ConfigOnly"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Containers"</span>: {</span><br><span class="line">            <span class="string">"29298987c51b777b546bf6626560020ce235e390e1d7fcfe188c6db228ca4edf"</span>: {</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"mysql01"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"f6572c49234f74a6c0b652a379bb386f843ebd23b02abd59b1f6a9d1c9534b17"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:11:00:02"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"172.17.0.2/16"</span>,    <span class="comment"># ✨容器的IP✨</span></span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"cb1922b95b9316d129b54f3545fad9729092926e10a1d5517f8928db42706151"</span>: {</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"centos01"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"ef6cfa74f56bfa4f49143aa08cf323812002236bc63f75204dee7c3ec1162250"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:11:00:03"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"172.17.0.3/16"</span>,    <span class="comment"># ✨容器的IP✨</span></span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"cc6f510b9765ba018dbafd416c9774ddf5fd3ff55fa992827f55516e8dc70b6a"</span>: {</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"centos02"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"2f901aec8f8b455d1fb06112c9035a19f34cc597d8907f26f1b896f12d7eb7ba"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:11:00:04"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"172.17.0.4/16"</span>,    <span class="comment"># ✨容器的IP✨</span></span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"Options"</span>: {</span><br><span class="line">            <span class="string">"com.docker.network.bridge.default_bridge"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.enable_icc"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.enable_ip_masquerade"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.host_binding_ipv4"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.name"</span>: <span class="string">"docker0"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.driver.mtu"</span>: <span class="string">"1500"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"Labels"</span>: {}</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<h3 id="4-5、测试容器通信"><a href="#4-5、测试容器通信" class="headerlink" title="4.5、测试容器通信"></a>4.5、测试容器通信</h3><blockquote>
<p>此时，进入<code>centos01</code>容器，<code>ping</code> mysql容器的<code>ip</code>可以ping通，但是ping不通容器名 ❗</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it cb1922b95b93 /bin/bash</span><br><span class="line">ping 172.17.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker0不支持容器名连接访问</span></span><br><span class="line">ping mysql01</span><br><span class="line">ping: mysql01: Name or service not known</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run 启动镜像的时候docker都会分配一个网卡地址</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看运行容器的ip</span></span><br><span class="line">docker inspect 容器ID | grep IPAddress</span><br></pre></td></tr></tbody></table></figure>

<p>如下图👇</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6311936716f2c2beb1dc0720.png"></p>
<h2 id="5、容器通信原理"><a href="#5、容器通信原理" class="headerlink" title="5、容器通信原理"></a>5、容器通信原理</h2><ul>
<li><p>只要我们安装了docker，就会有一个网卡docker0（相当于一个路由器），每启动一个docker容器，docker都会给docker容器分配一个ip（连接路由器的终端，同一网段下终端可以互相通信），</p>
</li>
<li><p>通过<code>evth-pair</code>技术实现，<code>evth-pair</code>就是一对<em>虚拟设备接口</em>，他们都是成对出现的，一端连着协议，一端彼此相连，<code>evth-pair</code>充当一个桥梁，连接各种虚拟网络设备。</p>
</li>
<li><p>Docker网络使用的是<code>Linux桥接</code>，宿主机是docker容器的网桥，docker0，最多分配65535个</p>
</li>
<li><p>删除容器之后，虚拟网卡就自动消失了。（<strong>虚拟网卡传递效率高！</strong>）</p>
</li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184efd16f2c2beb1e0c421.png"></p>
<p>启动容器不设置网络，容器ip由docker0自动分配情况下，容器间的通信，要经过<code>evth-pair</code>技术实现，<strong>并不是直连的</strong>。(跟计算机网络通信类似，分层模型，TCP/IP协议数据报封装解封装)</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184f0f16f2c2beb1e0dbff.png"></p>
<h3 id="5-1、结论"><a href="#5-1、结论" class="headerlink" title="5.1、结论"></a>5.1、结论</h3><ol>
<li><p><code>tomcat01</code>,<code>tomcat02</code>是共用的一个路由器，docker0</p>
</li>
<li><p>所有的容器启动时，如果不指定网络的情况下，都是docker0路由的。65535</p>
</li>
</ol>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184f2116f2c2beb1e0f432.png"></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>上面<code>docker0</code>不支持容器名连接访问，容器通信只可以通过容器<code>ip</code>通信，docker也无法保证容器重启后的IP地址不变，所以更好的方式是<strong>通过别名进行互联</strong>，下篇继续讲解怎么通过别名进行容器通信，😊😊。</p>
<hr>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
</body></html>]]></content>
      <categories>
        <category>后端运维</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker网络模型以及容器通信</title>
    <url>/posts/1604561083.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Docker/">Docker专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<p>本篇接着上篇：【Docker0网络及原理探究】，继续深入探究容器网络通信原理，通过学习Docker网路驱动模型，更好地解决容器间的通信问题🎉🎉</p>
<h2 id="1、Docker的网络驱动模型"><a href="#1、Docker的网络驱动模型" class="headerlink" title="1、Docker的网络驱动模型"></a>1、Docker的网络驱动模型</h2><h3 id="1-1、Docker的网络驱动模型分类："><a href="#1-1、Docker的网络驱动模型分类：" class="headerlink" title="1.1、Docker的网络驱动模型分类："></a>1.1、Docker的网络驱动模型分类：</h3><ol>
<li><p><code>bridge</code>：Docker中默认的网络驱动模型，在启动容器时如果不指定则默认为此驱动类型；</p>
</li>
<li><p><code>host</code>：打破Docker容器与宿主机之间的网络隔离，直接使用宿主机的网络环境，该模型仅适用于Docker17.6及以上版本；</p>
</li>
<li><p><code>overlay</code>：可以连接多个docker守护进程或者满足集群服务之间的通信；适用于不同宿主机上的docker容器之间的通信；</p>
</li>
<li><p><code>macvlan</code>：可以为docker容器分配<code>MAC</code>地址，使其像真实的物理机一样运行；</p>
</li>
<li><p><code>none</code>：即禁用了网络驱动，需要自己手动自定义网络驱动配置；</p>
</li>
<li><p><code>plugins</code>：使用第三方网络驱动插件；</p>
</li>
</ol>
<h3 id="1-2、Docker网络模式"><a href="#1-2、Docker网络模式" class="headerlink" title="1.2、Docker网络模式"></a>1.2、Docker网络模式</h3><ul>
<li><strong>查看docker网络</strong> <code>docker network ls</code></li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">feafa30d4051   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">e8bf4fced9e2   host      host      <span class="built_in">local</span></span><br><span class="line">6263db0933b9   none      null      <span class="built_in">local</span></span><br><span class="line">[root@--- ~]<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure>

<p>Docker内置这三个网络，运行容器时，你可以使用该<code>--network</code>标志来指定容器应连接到哪些网络。</p>
<p>该<code>bridge</code>网络代表<code>docker0</code>所有Docker安装中存在的网络。除非你使用<code>docker run --network=&lt;NETWORK&gt;</code>选项指定，否则Docker守护程序默认将容器连接到此网络。</p>
<p>我们在使用<code>docker run</code>创建Docker容器时，可以用 <code>--net</code> 选项指定容器的网络模式，<strong>Docker可以有以下4种网络模式</strong>：</p>
<ol>
<li><p><code>host模式</code>：使用 <code>--net=host</code> 指定。</p>
</li>
<li><p><code>none模式</code>：使用 <code>--net=none</code> 指定。</p>
</li>
<li><p><code>bridge模式</code>：使用 <code>--net=bridge</code> 指定，默认设置。</p>
</li>
<li><p><code>container模式</code>：使用 <code>--net=container:NAME_or_ID</code> 指定。</p>
</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -it -P --name tomcat01 --net=bridge tomcat  <span class="comment"># 默认设置</span></span><br><span class="line">docker run -it -P --name tomcat02 --net=none tomcat</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="2、容器通信问题"><a href="#2、容器通信问题" class="headerlink" title="2、容器通信问题"></a>2、容器通信问题</h2><ol>
<li><p>由于不同容器通过<code>veth pair</code>连接在虚拟网桥<code>docker0</code>上，所以容器之间可以通过<code>IP</code>互相通信，<strong>但是无法通过容器名进行通信</strong>。docker0不支持容器名连接访问</p>
</li>
<li><p>默认网桥<code>bridge</code>上的容器只能通过IP互连，无法通过<code>DNS</code>解析名称或别名。假如我们在container1中部署了Web服务，在container2中部署了mysql，container1中的Web服务往往需要连接container2的mysql，这是只能靠IP进行连接，但是docker也无法保证容器重启后的IP地址不变，所以更好的方式是通过别名进行互联，在网络中加入DNS服务器，将容器名与IP地址进行匹配，省去了手动修改Web服务中连接mysql的IP的过程。</p>
</li>
</ol>
<p>为了实现不同容器<strong>通过容器名或别名的互连</strong>，docker提供了以下几种：👇</p>
<ol>
<li><p>在启动docker容器时加入<code>--link</code>参数，但是目前已经被废弃，废弃的主要原因是需要在连接的两个容器上都创建–link选项，当互连的容器数量较多时，操作的复杂度会显著增加；</p>
</li>
<li><p>启动docker容器后进入容器并修改 <code>/etc/hosts</code> 配置文件（本地DNS解析），缺点是手动配置较为繁杂；</p>
</li>
<li><p>用户<strong>自定义bridge网桥</strong>，这是目前解决此类问题的主要方法，提供更好的隔离效果和更好的互通性（更好的隔离效果是针对外界网络，而更好的互通性则是指同一<code>bridge</code>下的不同容器之间），用户自定义bridge在容器之间提供了自动DNS解析。</p>
</li>
</ol>
<blockquote>
<p>容器在默认情况下以隔离方式运行，它们完全不知道同一计算机上有其他进程或容器。 那么，如何使容器能够彼此通信？ 答案就是网络连接。 如果两个容器在同一网络上，那么它们可彼此通信。 如果没在同一网络上，则没法通信。</p>
</blockquote>
<h2 id="3、容器之间通信的主要方式总结"><a href="#3、容器之间通信的主要方式总结" class="headerlink" title="3、容器之间通信的主要方式总结"></a>3、容器之间通信的主要方式总结</h2><h3 id="3-1、通过容器ip访问"><a href="#3-1、通过容器ip访问" class="headerlink" title="3.1、通过容器ip访问"></a>3.1、通过容器ip访问</h3><p>容器重启后，ip会发生变化。通过容器ip访问不是一个好的方案。</p>
<h3 id="3-2、通过宿主机的ip-port访问"><a href="#3-2、通过宿主机的ip-port访问" class="headerlink" title="3.2、通过宿主机的ip:port访问"></a>3.2、通过宿主机的ip:port访问</h3><p>通过宿主机的<code>ip:port</code>访问，只能依靠监听在暴露出的端口的进程来进行有限的通信。</p>
<h3 id="3-3、通过-link建立连接（官方不推荐使用）"><a href="#3-3、通过-link建立连接（官方不推荐使用）" class="headerlink" title="3.3、通过--link建立连接（官方不推荐使用）"></a>3.3、通过<code>--link</code>建立连接（官方不推荐使用）</h3><p><strong>原理分析：</strong></p>
<ul>
<li><p>运行容器时，指定参数link，使得源容器与被链接的容器可以进行相互通信，并且接受的容器可以获得源容器的一些数据，比如：环境变量。</p>
</li>
<li><p>与<code>/etc/hosts</code>中的主机条目不同，如果重新启动源容器，则不会自动更新存储在环境变量中的IP地址。我们建议使用主机条目 <code>/etc/hosts</code>来解析链接容器的IP地址。</p>
</li>
<li><p>除了环境变量之外，Docker还将源容器的主机条目添加到<code>/etc/hosts</code>文件中。(本质上就是通过 <code>--link</code> 参数，自动的给容器添加 <code>hosts</code> 配置)</p>
</li>
</ul>
<p><strong><code>--link</code>建立连接步骤：✨</strong></p>
<ol>
<li>启动tomcat01,tomcat02</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -it -P --name tomcat01 tomcat</span><br><span class="line">docker run -it -P --name tomcat02 tomcat</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<ul>
<li><p><code>--link</code> 通过配置 <code>/etc/hosts</code> 实现连接</p>
</li>
<li><p>通过<code>link</code>建立连接的容器，被链接的容器能 ping 通源容器，反过来不行。</p>
</li>
<li><p>被链接容器会继承源容器的环境变量信息</p>
</li>
</ul>
</blockquote>
<ol start="2">
<li>建立<code>link</code>连接</li>
</ol>
<p><code>tomcat02</code> 容器 link 到 <code>tomcat03</code> 上</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -it -P --name tomcat03 --<span class="built_in">link</span> tomcat02 tomcat</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>查看tomcat03 hosts配置</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># docker exec -it tomcat03 cat /etc/hosts</span></span><br><span class="line">127.0.0.1	localhost</span><br><span class="line">::1	localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0	ip6-localnet</span><br><span class="line">ff00::0	ip6-mcastprefix</span><br><span class="line">ff02::1	ip6-allnodes</span><br><span class="line">ff02::2	ip6-allrouters</span><br><span class="line">172.17.0.3	tomcat02 099602f3ff7f <span class="comment">#✨--link命令配置生成的条目✨</span></span><br><span class="line">172.17.0.4	a20a10b7e728</span><br><span class="line">[root@--- ~]<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-4、🧨通过-User-defined-networks（推荐）"><a href="#3-4、🧨通过-User-defined-networks（推荐）" class="headerlink" title="3.4、🧨通过 User-defined networks（推荐）"></a>3.4、🧨通过 User-defined networks（推荐）</h3><p><strong>用户自定义网桥步骤：✨</strong></p>
<ol>
<li>创建用户自定义bridge网桥</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- ~]<span class="comment"># docker network create test-network</span></span><br><span class="line">799426d70aa28b73b4a777c85b338186eafadd1558b13c43e07a9fd9a8b545e7</span><br><span class="line">[root@iZm5e23n3ueobwkjtfartxZ ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME           DRIVER    SCOPE</span><br><span class="line">feafa30d4051   bridge         bridge    <span class="built_in">local</span></span><br><span class="line">e8bf4fced9e2   host           host      <span class="built_in">local</span></span><br><span class="line">6263db0933b9   none           null      <span class="built_in">local</span></span><br><span class="line">799426d70aa2   test-network   bridge    <span class="built_in">local</span>   <span class="comment">#✨创建的桥接网络✨</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>删除网桥:  <code>docker network rm test-network</code></p>
</blockquote>
<ol start="2">
<li><p>把之前启动的 mysql01,centos01,centos02 容器加入到自定义bridge网桥中: <code>connect</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker network connect test-network mysql01</span><br><span class="line">docker network connect test-network centos01</span><br><span class="line">docker network connect test-network centos02</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>查看自定义bridge网桥信息</p>
</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker network inspect 799426d70aa2</span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"test-network"</span>,</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"799426d70aa28b73b4a777c85b338186eafadd1558b13c43e07a9fd9a8b545e7"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2021-10-03T20:30:03.325679562+08:00"</span>,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"IPAM"</span>: {</span><br><span class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"Options"</span>: {},</span><br><span class="line">            <span class="string">"Config"</span>: [</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">"Subnet"</span>: <span class="string">"172.18.0.0/16"</span>,  <span class="comment">#✨test-network的子网✨</span></span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"172.18.0.1"</span>     <span class="comment">#✨test-network的网关✨</span></span><br><span class="line">                }</span><br><span class="line">            ]</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Attachable"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Ingress"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"ConfigFrom"</span>: {</span><br><span class="line">            <span class="string">"Network"</span>: <span class="string">""</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"ConfigOnly"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Containers"</span>: {</span><br><span class="line">            <span class="string">"29298987c51b777b546bf6626560020ce235e390e1d7fcfe188c6db228ca4edf"</span>: {</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"mysql01"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"a69560a1872a25af042c74132df5dcade6e0e93faf9102185c1de19f6c8b3b36"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:12:00:02"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"172.18.0.2/16"</span>,    <span class="comment">#✨mysql01 容器的IP，与之前不同✨</span></span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"cb1922b95b9316d129b54f3545fad9729092926e10a1d5517f8928db42706151"</span>: {</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"centos01"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"f0cf5feb77ec23526fe5cee217dba9271125b9b4106c81bc7d58253ac48a4caf"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:12:00:03"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"172.18.0.3/16"</span>,    <span class="comment">#✨centos01 容器的IP，与之前不同✨</span></span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"cc6f510b9765ba018dbafd416c9774ddf5fd3ff55fa992827f55516e8dc70b6a"</span>: {</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"centos02"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"6c88540d719014e441d3119c4388e62d311b07acf009106e16aa66d7ebaf5763"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:12:00:04"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"172.18.0.4/16"</span>,    <span class="comment">#✨centos02 容器的IP，与之前不同✨</span></span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"Options"</span>: {},</span><br><span class="line">        <span class="string">"Labels"</span>: {}</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<ol start="4">
<li>通过容器名或别名互连通信</li>
</ol>
<p>进入centos01容器，<code>ping centos02</code>, <code>ping mysql01</code></p>
<p>可以发现centos01可以和centos02、mysql01容器之间可以通信</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it cb1922b95b93 /bin/bash👈</span><br><span class="line">[root@cb1922b95b93 /]<span class="comment"># ping centos02👈</span></span><br><span class="line">PING centos02 (172.18.0.4) 56(84) bytes of data.</span><br><span class="line">64 bytes from centos02.test-network (172.18.0.4): icmp_seq=1 ttl=64 time=0.118 ms</span><br><span class="line">64 bytes from centos02.test-network (172.18.0.4): icmp_seq=2 ttl=64 time=0.113 ms</span><br><span class="line">...</span><br><span class="line">ping mysql01👈</span><br><span class="line">PING mysql01 (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mysql01.test-network (172.18.0.2): icmp_seq=1 ttl=64 time=0.107 ms</span><br><span class="line">64 bytes from mysql01.test-network (172.18.0.2): icmp_seq=2 ttl=64 time=0.103 ms</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure>

<ol start="5">
<li>断开网络</li>
</ol>
<p>由于我们的容器仍然连接着默认bridge网桥docker0，而现在我们已经不需要它，所以应该将容器与docker0的连接断开，执行以下操作<code>disconnect</code>:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker network disconnect bridge mysql01</span><br><span class="line">docker network disconnect bridge centos01</span><br><span class="line">docker network disconnect bridge centos02</span><br></pre></td></tr></tbody></table></figure>

<ol start="6">
<li>查看默认bridge网桥docker0的容器网络配置</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker network inspect feafa30d4051👈</span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"feafa30d4051f24353508959bd420fd163ad0c98d6b30ec8ff13b59a59552bb1"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2021-09-26T15:10:27.167774553+08:00"</span>,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"IPAM"</span>: {</span><br><span class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"Options"</span>: null,</span><br><span class="line">            <span class="string">"Config"</span>: [</span><br><span class="line">                {</span><br><span class="line">                    <span class="string">"Subnet"</span>: <span class="string">"172.17.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"172.17.0.1"</span></span><br><span class="line">                }</span><br><span class="line">            ]</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Attachable"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Ingress"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"ConfigFrom"</span>: {</span><br><span class="line">            <span class="string">"Network"</span>: <span class="string">""</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"ConfigOnly"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Containers"</span>: {},    <span class="comment">#✨之前的容器服务，已经从默认网桥中移除✨</span></span><br><span class="line">        <span class="string">"Options"</span>: {</span><br><span class="line">            <span class="string">"com.docker.network.bridge.default_bridge"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.enable_icc"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.enable_ip_masquerade"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.host_binding_ipv4"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.name"</span>: <span class="string">"docker0"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.driver.mtu"</span>: <span class="string">"1500"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"Labels"</span>: {}</span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>了解了Docker网络、容器通信之后，对继续学习服务网格（<code>Service Mesh</code>）与<code>Kubernetes</code>的服务发现有很大帮助。很多的项目架构也都是从网络通信角度进行的层级、模块划分（比如：网路拓扑图、终极系统架构异地多活）。关于网络，学完之后你会发现很多东西都串一块了，超级有意思😊</p>
<p>微信公众号：【看见另一种可能】</p>
<hr>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏程序员😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
</body></html>]]></content>
      <categories>
        <category>后端运维</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Pages 站点建设</title>
    <url>/posts/899051033.html</url>
    <content><![CDATA[<html><head></head><body><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><ul>
<li><p>GitHub Pages 是通过 GitHub 托管和发布的公共网页，将纯文本转换为静态博客网站。</p>
</li>
<li><p>您可以使用 GitHub Pages 来展示一些开源项目、博客甚或分享您的简历，有内存限制，可以绑定个人域名。</p>
</li>
<li><p>启动和运行的最快方法是使用 <a href="https://jekyllcn.com/">Jekyll</a> 主题选择器加载预置主题。 然后，您可以修改 GitHub Pages 的内容和样式。👉 <a href="https://docs.github.com/cn/pages/getting-started-with-github-pages/about-github-pages">文档</a></p>
</li>
</ul>
<h2 id="2、创建仓库"><a href="#2、创建仓库" class="headerlink" title="2、创建仓库"></a>2、创建仓库</h2><p>仓库名： <code>&lt;username&gt;.github.io</code><br><code>username</code> 是GitHub的用户名</p>
<h2 id="3、创建站点"><a href="#3、创建站点" class="headerlink" title="3、创建站点"></a>3、创建站点</h2><p>在 <code>repo</code> 下创建 <code>index.md</code>文件，随便写点东西保存。然后，点击 <code>settings</code>选项卡，单机左侧 <code>Pages</code>进行设置，如下图：</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184fae16f2c2beb1e1d288.png"></p>
<p>🔊 此时站点已经建成，可以访问 <code>https://&lt;username&gt;.github.io/</code> 查看，如果已经有个人域名了，也可以绑定个人域名，继续往下看👇</p>
<h2 id="4、仓库文件目录"><a href="#4、仓库文件目录" class="headerlink" title="4、仓库文件目录"></a>4、仓库文件目录</h2><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184fbe16f2c2beb1e1e89f.png"></p>
<h2 id="5、绑定域名"><a href="#5、绑定域名" class="headerlink" title="5、绑定域名"></a>5、绑定域名</h2><p>我个人购买的一级域名是 i-xiao ，域名后缀是 space，专门给GitHub Pages 增加一个CNAME记录（blog），解析二级域名，绑定 <username>github.io 域名。</username></p>
<h3 id="5-1、域名相关知识"><a href="#5-1、域名相关知识" class="headerlink" title="5.1、域名相关知识"></a>5.1、域名相关知识</h3><ul>
<li>www：主机名，i-xiao : 域名主体(一级域名)，.space : 域名后缀<br>注册一级域名的时候是需要付费的</li>
<li>二级域名，是依附一级域名的存在而存在的，也就是说要是顶级域名消失了，二级域名也也会不复存在。反而来说，二级域名的网站不做了，主域名网站是不受影响的。</li>
<li>一级域名、二级域名区别：<br>DNS收录一级域名更快；还有就是解析速度，下一跳路由就不说了，找到目的主机之后，二级域名层级更深，需要多一层计算（其实这是我瞎写的🤣，猜测应该跟 nginx location匹配类似）</li>
</ul>
<h3 id="5-2、GitHub上配置自定义域名"><a href="#5-2、GitHub上配置自定义域名" class="headerlink" title="5.2、GitHub上配置自定义域名"></a>5.2、GitHub上配置自定义域名</h3><p>进入 <username>github.io 仓库，进入设置页面，点击左边 Pages 选项卡，进行下面的配置。</username></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184f6116f2c2beb1e1511a.png"></p>
<h2 id="6、配置域名映射"><a href="#6、配置域名映射" class="headerlink" title="6、配置域名映射"></a>6、配置域名映射</h2><p><strong>各记录类型使用目的</strong></p>
<table>
<thead>
<tr>
<th>记录类型</th>
<th>使用目的</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://docs.dnspod.cn/dns/5f2d4664e8320f1a740d9ce5/">A 记录</a></td>
<td>将域名指向一个 IP 地址（外网地址）。</td>
</tr>
<tr>
<td><a href="https://docs.dnspod.cn/dns/5f2d4664e8320f1a740d9cf9/">CNAME 记录</a></td>
<td>将域名指向另一个域名，再由另一个域名提供 IP 地址（外网地址）。</td>
</tr>
<tr>
<td><a href="https://docs.dnspod.cn/dns/5f2d4665e8320f1a740d9cff/">MX 记录</a></td>
<td>设置邮箱，让邮箱能收到邮件。</td>
</tr>
<tr>
<td><a href="https://docs.dnspod.cn/dns/5f2d4665e8320f1a740d9d11/">NS 记录</a></td>
<td>将子域名交给其他 DNS 服务商解析。</td>
</tr>
<tr>
<td><a href="https://docs.dnspod.cn/dns/5f2d4665e8320f1a740d9d0b/">AAAA 记录</a></td>
<td>将域名指向一个 IPv6 地址。</td>
</tr>
<tr>
<td><a href="https://docs.dnspod.cn/dns/5f2d4665e8320f1a740d9d17/">SRV 记录</a></td>
<td>用来标识某台服务器使用了某个服务，常见于微软系统的目录管理。</td>
</tr>
<tr>
<td><a href="https://docs.dnspod.cn/dns/5f2d4665e8320f1a740d9d05/">TXT 记录</a></td>
<td>对域名进行标识和说明，绝大多数的 TXT 记录是用来做 SPF 记录（反垃圾邮件）。</td>
</tr>
<tr>
<td><a href="https://docs.dnspod.cn/dns/5f2d4664e8320f1a740d9ced/">隐、显性 URL 记录</a></td>
<td>将一个域名指向另外一个已经存在的站点。</td>
</tr>
</tbody></table>
<p><strong>如下图</strong></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184f6f16f2c2beb1e16954.png"></p>
<h2 id="7、DNS检测"><a href="#7、DNS检测" class="headerlink" title="7、DNS检测"></a>7、DNS检测</h2><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184f7816f2c2beb1e1785b.png"></p>
<h2 id="8、查看Pages"><a href="#8、查看Pages" class="headerlink" title="8、查看Pages"></a>8、查看Pages</h2><p>成功解析之后，还存在DNS缓存，一般还需要再等待一会（一般十分钟，或许更长时间）才能生效，如下图成功显示👇</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184f8c16f2c2beb1e1a34c.png"></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>站点绑定的域名已经更换，访问请到👉 <a href="https://home.i-xiao.space/">这里</a></p>
<hr>
<p>🎈🎈🎈</p>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
</body></html>]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Go | 函数注意事项</title>
    <url>/posts/1021065066.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Go/">Golang专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<h1 id="细节汇总"><a href="#细节汇总" class="headerlink" title="细节汇总"></a>细节汇总</h1><ol>
<li>函数的形参列表可以是多个，返回值列表也可以是多个</li>
<li>形参列表和返回值列表的数据类型，可以是值类型、也可以是引用类型</li>
<li>函数的命名遵循标识符命名规范，首字母不能是数字，首字母大写表示该函数可以被本包文件和其它文件使用，类似public；首字母小写只能被本包文件使用，类似private。</li>
<li>函数中的变量是局部的，外部不能访问。<strong>作用域</strong></li>
<li>基本数据类型和数组都是值传递的，即进行值拷贝。在函数内修改，不会影响到原来的值，</li>
<li>如果希望函数内的变量能够修改函数外的变量，可以传入变量的地址（**&amp;<strong>），函数内以指针的方式操作变量，从效果上看类似</strong>引用**</li>
<li>Go函数不支持函数重载。</li>
<li>在Go中，函数也是一种数据类型，可以赋值给一个变量，则该变量是一个函数类型的变量，通过该变量可以对函数调用。</li>
<li>函数既然是一种数据类型，因此在Go中，函数也可以作为形参，并且调用。（<strong>回调函数</strong>）</li>
<li>为了简化数据类型定义，Go支持自定义数据类型<br>语法： type 自定数据类型名 数据类型 // (相当于一个别名)<br>案例： <strong>type myInt int</strong>                           // 这时，myInt就等价于int来使用了<br><strong>type mySum  func(int, int) int</strong>   // 这时，mySum就等价于func(int, int) int</li>
<li>支持对函数返回值命名（<strong>可以不受返回值顺序限制</strong>）</li>
<li>使用 _ 下划线标识符，忽略返回值。（<strong>占位符</strong>）</li>
<li>Go支持可变参数</li>
</ol>
<h1 id="值传递和指针传递"><a href="#值传递和指针传递" class="headerlink" title="值传递和指针传递"></a>值传递和指针传递</h1><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(n1 <span class="type">int</span>)</span></span> {</span><br><span class="line">	n1 = n1 + <span class="number">10</span></span><br><span class="line">	fmt.Println(<span class="string">"test n1="</span>, n1)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针类型接收处理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test02</span><span class="params">(n2 *<span class="type">int</span>)</span></span> {</span><br><span class="line">	*n2 = *n2 + <span class="number">10</span></span><br><span class="line">	fmt.Println(<span class="string">"test02 n2="</span>, *n2)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">	n1 := <span class="number">20</span></span><br><span class="line">	n2 := <span class="number">2</span></span><br><span class="line">	test(n1) <span class="comment">// 值类型</span></span><br><span class="line">	test02(&amp;n2) <span class="comment">// 指针类型</span></span><br><span class="line">	fmt.Println(<span class="string">"main n1="</span>, n1)</span><br><span class="line">	fmt.Println(<span class="string">"main n2="</span>, n2)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="什么是重载"><a href="#什么是重载" class="headerlink" title="什么是重载"></a>什么是重载</h1><p>重载： 函数名相同，但是形参不同或者数据类型不同的情况<br>Golang语言中是不支持传统的函数重载的，<code>fn redeclared in this block</code><br>Golang语言是支持可变参数的，<strong>空接口</strong>的形式</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/637f31c216f2c2beb1c2f216.jpg"></p>
<h1 id="函数类型的变量"><a href="#函数类型的变量" class="headerlink" title="函数类型的变量"></a>函数类型的变量</h1><p>类型： <strong>func(int, int) int</strong></p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSum</span><span class="params">(n1 <span class="type">int</span>, n2 <span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line">	<span class="keyword">return</span> n1 + n2</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSums</span><span class="params">(n1 <span class="type">int</span>, n2 <span class="type">int</span>, n3 <span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line">	<span class="keyword">return</span> n1 + n2 + n3</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// main 函数</span></span><br><span class="line">sumFn := getSum</span><br><span class="line">res := sumFn(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">fmt.Printf(<span class="string">"%T %v\n"</span>, res, res) <span class="comment">// int 30</span></span><br><span class="line">fmt.Printf(<span class="string">"%T \n"</span>, sumFn) <span class="comment">// func(int, int) int</span></span><br><span class="line"></span><br><span class="line">sumsFn := getSums</span><br><span class="line">result := sumsFn(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">fmt.Printf(<span class="string">"result : %T %v\n"</span>, result, result) <span class="comment">// result : int 60</span></span><br><span class="line">fmt.Printf(<span class="string">"sumsFn类型：%T \n"</span>, sumFn) <span class="comment">// sumsFn类型：func(int, int) int</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h1 id="函数作为形参传入"><a href="#函数作为形参传入" class="headerlink" title="函数作为形参传入"></a>函数作为形参传入</h1><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSum</span><span class="params">(n1 <span class="type">int</span>, n2 <span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line">	<span class="keyword">return</span> n1 + n2</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testFn</span><span class="params">(fnVar <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>, num1 <span class="type">int</span>, num2 <span class="type">int</span>) <span class="type">int</span> {</span><br><span class="line">	<span class="keyword">return</span> fnVar(num1, num2) <span class="comment">// 调用传入的函数，并返回值</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数类型形参</span></span><br><span class="line">sumFn := getSum</span><br><span class="line">total := testFn(sumFn, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fmt.Println(<span class="string">"total="</span>, total) <span class="comment">// 3</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="自定义数据类型"><a href="#自定义数据类型" class="headerlink" title="自定义数据类型"></a>自定义数据类型</h1><ol>
<li>自定义函数数据类型， 相当于起了一个别名</li>
</ol>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> mySum <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testFn</span><span class="params">(fnVar mySum, num1 <span class="type">int</span>, num2 <span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line">	<span class="keyword">return</span> fnVar(num1, num2)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// func testFn(fnVar func(int, int) int, num1 int, num2 int) int {</span></span><br><span class="line"><span class="comment">// 	return fnVar(num1, num2)</span></span><br><span class="line"><span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>自定义数据类型</li>
</ol>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// main函数下</span></span><br><span class="line"><span class="keyword">type</span> myInt <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> num1 myInt = <span class="number">2</span></span><br><span class="line"><span class="comment">// var num2 int = num1 // 这样是报错的， myInt和int并不等价</span></span><br><span class="line"><span class="keyword">var</span> num2 <span class="type">int</span> = <span class="type">int</span>(num1) <span class="comment">// 显式类型转换</span></span><br><span class="line">fmt.Printf(<span class="string">"num1的类型：%T 值：%v \n"</span>, num1, num1) <span class="comment">// num1的类型：main.myInt 值：2</span></span><br><span class="line">fmt.Printf(<span class="string">"num2的类型：%T 值：%v \n"</span>, num2, num2) <span class="comment">// num2的类型：int 值：2</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>定义的类型: 包名.类型名，如：<code>utils.myInt</code><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 以下是utils包</span></span><br><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFn</span><span class="params">()</span></span> <span class="type">string</span> {</span><br><span class="line">	fmt.Println(<span class="string">"TestFn 函数被调用"</span>)</span><br><span class="line">	<span class="keyword">type</span> myInt <span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> n myInt = <span class="number">10</span></span><br><span class="line">	fmt.Printf(<span class="string">"n的类型：%T 值：%v"</span>, n, n) <span class="comment">// n的类型：utils.myInt 值：10</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">"hahaha"</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h1 id="返回值命名"><a href="#返回值命名" class="headerlink" title="返回值命名"></a>返回值命名</h1><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumSub</span><span class="params">(n1 <span class="type">int</span>, n2 <span class="type">int</span>)</span></span> (sum <span class="type">int</span>, sub <span class="type">int</span>) {</span><br><span class="line">    <span class="comment">// 这里不需要声明sum, sub变量了，也不用在return时写</span></span><br><span class="line">	sum = n1 + n2</span><br><span class="line">	sub = n1 - n2</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// main函数</span></span><br><span class="line">sum, sub := sumSub(<span class="number">9</span>, <span class="number">8</span>)</span><br><span class="line">fmt.Println(<span class="string">"sum="</span>, sum, <span class="string">"sub="</span>, sub) <span class="comment">// sum= 17 sub= 1</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><p>基本语法<br><strong>1、支持零到多个参数</strong><br><code>func sum(args... int) {}</code><br><strong>2、支持1到多个参数</strong><br><code>func sum(n1 int, args... int) {}</code><br>args：就是一个承接的变量名，可以自定义，如：<code>func sum(n1 int, **vars**... int) {}</code></p>
<p>说明：</p>
<ul>
<li>args是slice切片，通过<code>args[index]</code>可以访问到各个值</li>
<li>args必须放到形参列表的最后面</li>
</ul>
<p>参数个数可变</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumV2</span><span class="params">(n1 <span class="type">int</span>, args ...<span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line">	sum := n1</span><br><span class="line">	fmt.Printf(<span class="string">"args类型是：%T\n"</span>, args) <span class="comment">// args类型是：[]int</span></span><br><span class="line">	<span class="comment">// 遍历args切片</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(args); i++ {</span><br><span class="line">		sum += args[i]</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> sum</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// main函数</span></span><br><span class="line"><span class="comment">// 参数可变</span></span><br><span class="line">total02 := sumV2(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">fmt.Println(<span class="string">"total02="</span>, total02) <span class="comment">// total02= 10</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>交换变量a, b的值</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(n1 *<span class="type">int</span>, n2 *<span class="type">int</span>)</span></span> {</span><br><span class="line">	*n1 = *n1 + *n2</span><br><span class="line">	*n2 = *n1 - *n2 <span class="comment">// *n1</span></span><br><span class="line">	*n1 = *n1 - *n2 <span class="comment">// *n2</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">	a := <span class="number">12</span></span><br><span class="line">	b := <span class="number">20</span></span><br><span class="line">	swap(&amp;a, &amp;b)</span><br><span class="line">	fmt.Println(<span class="string">"a = "</span>, a, <span class="string">"b = "</span>, b)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a>☭</p>
<p>微信公众号：【看见另一种可能】</p>
<p>热爱前端开发，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。数风流人物还看中国、看今朝、看你我。</p>
</body></html>]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go | 函数（包）的使用</title>
    <url>/posts/2122790583.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Go/">Golang专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<p>本文通过一个实现加减乘除运算的小程序来介绍go函数的使用，以及使用函数的注意事项，并引出了对包的了解和使用。</p>
<h1 id="实现加减乘除运算"><a href="#实现加减乘除运算" class="headerlink" title="实现加减乘除运算"></a>实现加减乘除运算</h1><p><strong>传统方法实现：</strong></p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n1 <span class="type">float64</span> = <span class="number">1.2</span></span><br><span class="line"><span class="keyword">var</span> n2 <span class="type">float64</span> = <span class="number">2.1</span></span><br><span class="line"><span class="keyword">var</span> opt <span class="type">byte</span> = <span class="string">'+'</span></span><br><span class="line"><span class="keyword">var</span> res <span class="type">float64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> opt {</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">    res = n1 + n2</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">    res = n1 - n2</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">    res = n1 * n2</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">    res = n1 / n2</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    fmt.Println(<span class="string">"不合法的运算符"</span>)</span><br><span class="line">}</span><br><span class="line">fmt.Printf(<span class="string">"res=%v"</span>, res)</span><br></pre></td></tr></tbody></table></figure>

<p><strong>以上代码的问题：</strong></p>
<ul>
<li><p>需求变更，取模，代码不够灵活</p>
</li>
<li><p>不利于维护</p>
</li>
<li><p>代码冗余</p>
</li>
</ul>
<p><strong>函数可以解决这个问题</strong></p>
<ul>
<li><p>封装</p>
</li>
<li><p>传参调用</p>
</li>
<li><p>返回值</p>
</li>
</ul>
<h1 id="函数基本语法"><a href="#函数基本语法" class="headerlink" title="函数基本语法"></a>函数基本语法</h1><p>func 函数名 (形参列表) (返回值列表) {</p>
<p>执行语句</p>
<p>return 返回值列表</p>
<p>}</p>
<p>上面代码改写：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(n1 <span class="type">float64</span>, n2 <span class="type">float64</span>, opt <span class="type">byte</span>)</span></span> <span class="type">float64</span> {</span><br><span class="line">	<span class="keyword">var</span> res <span class="type">float64</span></span><br><span class="line">	<span class="keyword">switch</span> opt {</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">		res = n1 + n2</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">		res = n1 - n2</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">		res = n1 * n2</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">		res = n1 / n2</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">"不合法的运算符"</span>)</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> res</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">	fmt.Println(<span class="string">"hello fn"</span>)</span><br><span class="line">	<span class="keyword">var</span> n1 <span class="type">float64</span> = <span class="number">1.2</span></span><br><span class="line">	<span class="keyword">var</span> n2 <span class="type">float64</span> = <span class="number">2.1</span></span><br><span class="line">	<span class="keyword">var</span> opt <span class="type">byte</span> = <span class="string">'+'</span></span><br><span class="line">	<span class="keyword">var</span> result <span class="type">float64</span> = calc(n1, n2, opt)</span><br><span class="line">	fmt.Printf(<span class="string">"%T %v \n"</span>, result, result)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="函数的问题"><a href="#函数的问题" class="headerlink" title="函数的问题"></a>函数的问题</h1><p>一个文件里出现超级多的函数</p>
<p><code>utils.go</code> 文件，专门用于定义函数，让其它文件来调用，工具函数的封装，</p>
<p><code>db.go</code> 文件，专门定义对数据库操作的函数</p>
<p><code>main.go</code> 文件，引入其它文件，使用工具函数， 代码更专注</p>
<blockquote>
<p>继而引出包的概念，<strong>分门别类</strong>的使用，也有利于多人协同开发，相同的函数名可以存在不同的包下面</p>
</blockquote>
<h1 id="包的原理"><a href="#包的原理" class="headerlink" title="包的原理"></a>包的原理</h1><p>包的本质，实际上就是创建不同的文件夹，来存放程序文件。</p>
<h1 id="包的介绍"><a href="#包的介绍" class="headerlink" title="包的介绍"></a>包的介绍</h1><p>go的每一个文件都属于一个包的，也就是说go以包的形式来管理文件和项目目录结构的。</p>
<p><strong>大写字母开头的标识符，表示该标识符可导出</strong></p>
<h2 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h2><ul>
<li><p>区分相同名字的函数、变量等标识符</p>
</li>
<li><p>当程序文件很多时，很好的管理项目</p>
</li>
<li><p>控制函数、变量的访问范围，即作用域</p>
</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br></pre></td></tr></tbody></table></figure>

<h2 id="引入使用（封装实现加减乘除的工具函数）"><a href="#引入使用（封装实现加减乘除的工具函数）" class="headerlink" title="引入使用（封装实现加减乘除的工具函数）"></a>引入使用（封装实现加减乘除的工具函数）</h2><p><strong>包名.函数名</strong></p>
<p>省略 <code>GOPATH/src</code> 或 <code>GOROOT/src</code>，前提是在 <code>env.GO111MODULE=off</code> 的情况下</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"包的路径"</span></span><br><span class="line"><span class="comment">// GOPATH or GOROOT src, env.GO111MODULE=off</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p>utils/utils.go 文件</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 标识符大写，表示可导出</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Calc</span><span class="params">(n1 <span class="type">float64</span>, n2 <span class="type">float64</span>, opt <span class="type">byte</span>)</span></span> <span class="type">float64</span> {</span><br><span class="line">	<span class="keyword">var</span> res <span class="type">float64</span></span><br><span class="line">	<span class="keyword">switch</span> opt {</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">		res = n1 + n2</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">		res = n1 - n2</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">		res = n1 * n2</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">		res = n1 / n2</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">"不合法的运算符"</span>)</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> res</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>main/main.go 文件</p>
</li>
</ul>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"go_code/fndemo1/utils"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">  <span class="keyword">var</span> n1 <span class="type">float64</span> = <span class="number">1.233</span></span><br><span class="line">	<span class="keyword">var</span> n2 <span class="type">float64</span> = <span class="number">2.111</span></span><br><span class="line">	<span class="keyword">var</span> opt <span class="type">byte</span> = <span class="string">'+'</span></span><br><span class="line">	<span class="keyword">var</span> result <span class="type">float64</span> = utils.Calc(n1, n2, opt)</span><br><span class="line">	fmt.Printf(<span class="string">"%T %.2f= \n"</span>, result, result)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// %.2f   默认宽度，精度2</span></span><br><span class="line"><span class="comment">// float64 3.34</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="包的注意事项"><a href="#包的注意事项" class="headerlink" title="包的注意事项"></a>包的注意事项</h1><ol>
<li><p><strong>包名建议跟目录名保持一致</strong>，也可以不一致</p>
<p> <code>import "包名"</code></p>
<p> 这个包名，就是 package “包名” 定义的包名，跟目录名字没有关系，倘若 package 定义的名字跟目录名不一致，引入包的时候，要以package定义的包名为准。</p>
</li>
<li><p>package “包名” 必须在文件的第一行，然后再 import</p>
</li>
<li><p>引包路径， GOPATH or GOROOT src目录下， <code>env.GO111MODULE</code></p>
</li>
<li><p>包里面要暴露的函数，函数名必须大写，表示可导出</p>
</li>
<li><p>如果包名比较长，go支持取别名，定义别名之后，原先的包名就不好使了</p>
</li>
<li><p>在同一个包下，不允许有相同的函数名</p>
</li>
<li><p>如果要编译成一个可执行程序文件，就需要将这个包声明为 main</p>
</li>
</ol>
<p><strong>进入项目根目录（go build的执行环境就是运行命令的目录）</strong>，</p>
<p><code>go build go_code/fndemo1/main</code> , 在根目录会生成<code>main.exe</code>可执行文件</p>
<p><code>go build -o bin/my.exe go_code/fndemo1/main</code>， <code>-o</code>表示输出的目录，没有则会自动创建</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	util <span class="string">"go_code/fndemo1/utils"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">util.Calc()</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6368fc4816f2c2beb15b5ba6.jpg"></p>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端开发，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。数风流人物还看中国、看今朝、看你我。</p>
</body></html>]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go | 基本数据类型详解</title>
    <url>/posts/688314459.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Go/">Golang专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>基本数据类型</strong>，变量存的就是值，也叫值类型。每一种数据都定义了明确的数据类型，在内存中分配了不同大小的内存空间。</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/635415fb16f2c2beb1362bf0.jpg"></p>
<h1 id="Printf-和-Println-的区别"><a href="#Printf-和-Println-的区别" class="headerlink" title="Printf 和 Println 的区别"></a>Printf 和 Println 的区别</h1><ul>
<li><p>printf 输出后不换行， println输出后自动换行；</p>
</li>
<li><p>printf 格式化输出，println 直接输出内容</p>
</li>
<li><p>Printf 根据format参数生成格式化的字符串并写入标准输出。</p>
</li>
</ul>
<h1 id="判断数据类型以及查看变量使用内存空间"><a href="#判断数据类型以及查看变量使用内存空间" class="headerlink" title="判断数据类型以及查看变量使用内存空间"></a>判断数据类型以及查看变量使用内存空间</h1><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// import "unsafe"</span></span><br><span class="line"><span class="comment">// import "fmt"</span></span><br><span class="line"><span class="comment">// 引入多个</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">	<span class="keyword">var</span> i <span class="type">int8</span> = <span class="number">12</span></span><br><span class="line">	fmt.Println(<span class="string">"i= "</span>, i)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> i2 <span class="type">uint8</span> = <span class="number">129</span></span><br><span class="line">	fmt.Println(<span class="string">"i2= "</span>, i2)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> n = <span class="number">12</span></span><br><span class="line">	fmt.Printf(<span class="string">"n的类型是%T\n"</span>, n) <span class="comment">// n的类型是int</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> name = <span class="string">"xiao"</span></span><br><span class="line">	fmt.Printf(<span class="string">"name的类型是%T\n"</span>, name) <span class="comment">// name的类型是string</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 查看变量占用的字节大小和数据类型</span></span><br><span class="line">	fmt.Printf(<span class="string">"name的类型是%T"</span>, name, unsafe.Sizeof(name))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h2 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h2><h3 id="整数类型-默认值是0"><a href="#整数类型-默认值是0" class="headerlink" title="整数类型 (默认值是0)"></a>整数类型 (默认值是0)</h3><p>int, int8, int16, int32, int64<br>uint, uint8, uint16, uint32, uint64     无符号数（表示的范围更大）<br>byte</p>
<ul>
<li><p>bit: 计算机中的最小存储单位</p>
</li>
<li><p>byte: 计算机中基本存储单元</p>
</li>
<li><p>1byte = 8bit (一个字节8位)</p>
</li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6354165e16f2c2beb136bb7a.jpg"></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6354166f16f2c2beb136d397.jpg"></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6354167d16f2c2beb136e753.jpg"></p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="type">int8</span> = <span class="number">-129</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// constant -129 overflows int8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i2 <span class="type">uint8</span> = <span class="number">-129</span></span><br><span class="line"><span class="comment">// constant -129 overflows uint8</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="浮点类型-默认值是0"><a href="#浮点类型-默认值是0" class="headerlink" title="浮点类型 (默认值是0)"></a>浮点类型 (默认值是0)</h3><ul>
<li><p>float32</p>
</li>
<li><p>float64（默认类型）</p>
</li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6354168c16f2c2beb136fc17.jpg"></p>
<p><strong>浮点数 = 符号位 + 指数位 + 尾数位</strong></p>
<p>浮点数都是<strong>有符号</strong>的</p>
<p>使用浮点类型的时候就需要注意存在<strong>丢失精度</strong>的问题</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 <span class="type">float32</span> = <span class="number">12.556883123132</span>   <span class="comment">// 精度会丢失</span></span><br><span class="line"><span class="keyword">var</span> num2 <span class="type">float64</span> = <span class="number">12.556883123132</span>   <span class="comment">// 64位比32位精度要准确</span></span><br><span class="line">fmt.Println(<span class="string">"num1="</span>, num1, <span class="string">"num2"</span>, num2) <span class="comment">// num1= 12.556883 num2 12.556883123132</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">12.64</span></span><br><span class="line">fmt.Printf(<span class="string">"num的类型"</span>, num) <span class="comment">// num的类型%!(EXTRA float64=12.64)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="number">5.6e2</span>   <span class="comment">//  5.6 * 10^2 = 5.6 * 100 = 560</span></span><br><span class="line">fmt.Println(<span class="string">"num3="</span>, num3)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><p>没有专门的字符型，使用<code>byte</code>来保存单个字母字符</p>
<p><code>ASCII</code>码（128个）</p>
<ul>
<li><p>Go语言的字符使用UTF-8编码</p>
</li>
<li><p>英文字母：1个字节</p>
</li>
<li><p>汉字：3个字节</p>
</li>
<li><p>字符必须使用单引号括起来，双引号会报错</p>
</li>
</ul>
<p><strong>单引号针对单个字符，字符串要使用双引号</strong></p>
<p><strong>UTF-8是对ASCII的扩容</strong></p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 <span class="type">byte</span> = <span class="string">'a'</span></span><br><span class="line"><span class="keyword">var</span> str2 <span class="type">byte</span> = <span class="string">'0'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当直接输出byte时，输出的使对应字符的ASCII码值(十进制)</span></span><br><span class="line">fmt.Println(<span class="string">"str1"</span>, str1, <span class="string">"str2"</span>, str2) <span class="comment">// str1 97 str2 48</span></span><br><span class="line">fmt.Printf(<span class="string">"str1=%c str2=%c"</span>, str1, str2) <span class="comment">// str1=a str2=0</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"str1=%c"</span>, str1) <span class="comment">// str1=a</span></span><br><span class="line">fmt.Printf(<span class="string">"str2=%c"</span>, str2) <span class="comment">// str2=0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name <span class="type">byte</span> = <span class="string">'吖'</span></span><br><span class="line">fmt.Printf(<span class="string">"name=%c"</span>, name) <span class="comment">// overflows byte 超出byte类型的存储范围了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 汉字更换成int类型</span></span><br><span class="line"><span class="keyword">var</span> name <span class="type">int</span> = <span class="string">'吖'</span></span><br><span class="line">fmt.Printf(<span class="string">"name=%c"</span>, name) <span class="comment">// name=吖</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name1 <span class="type">int</span> =<span class="number">22269</span></span><br><span class="line">fmt.Printf(<span class="string">"name1=%c"</span>, name1) <span class="comment">// name1=国</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据类型只是为了定义存储空间的大小，对应计算机中的内存空间</span></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6354169e16f2c2beb137151f.jpg"></p>
<h2 id="布尔型（bool）-默认值是false"><a href="#布尔型（bool）-默认值是false" class="headerlink" title="布尔型（bool）(默认值是false)"></a>布尔型（bool）(默认值是false)</h2><p>用于逻辑运算，流程控制。<code>bool</code>类型只占用一个字节的内存空间</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">false</span></span><br><span class="line">fmt.Println(a)  <span class="comment">// false</span></span><br><span class="line">fmt.Println(unsafe.Sizeof(a))  <span class="comment">// 1</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="字符串（string）-默认值是””"><a href="#字符串（string）-默认值是””" class="headerlink" title="字符串（string）(默认值是””)"></a>字符串（string）(默认值是””)</h2><p><code>UTF-8</code>编码</p>
<p><strong>字符串一经定义，则不能修改</strong></p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> address <span class="type">string</span> = <span class="string">"北京长城"</span></span><br><span class="line">fmt.Println(address) <span class="comment">// 北京长城</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"hello"</span></span><br><span class="line">str[<span class="number">0</span>] = <span class="string">'a'</span>     <span class="comment">// cannot assign to str[0] (strings are immutable)</span></span><br><span class="line">fmt.Println(str)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反引号</span></span><br><span class="line"><span class="comment">// 以字符串原生形式输出，包括换行和特殊字符，可以实现防止攻击、输出源代码等效果。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串拼接, + 号要放在上面，否则会报错(因为go默认在一行后面加;号)</span></span><br><span class="line"><span class="keyword">var</span> str01 = <span class="string">"hello"</span> + <span class="string">" world"</span></span><br><span class="line">str01 += <span class="string">"  haha!"</span> + <span class="string">"xixi"</span> +</span><br><span class="line"><span class="string">"heihei"</span></span><br><span class="line">fmt.Println(str01)    <span class="comment">// hello world  haha!xixiheihei</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="基本数据类型的默认值"><a href="#基本数据类型的默认值" class="headerlink" title="基本数据类型的默认值"></a>基本数据类型的默认值</h1><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">float32</span></span><br><span class="line"><span class="keyword">var</span> c <span class="type">float64</span></span><br><span class="line"><span class="keyword">var</span> d <span class="type">bool</span></span><br><span class="line"><span class="keyword">var</span> e <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// %v表示按照变量的值输出</span></span><br><span class="line">fmt.Printf(<span class="string">"a=%d,b=%v,c=%v,d=%v e=%v"</span>, a,b,c,d,e)</span><br></pre></td></tr></tbody></table></figure>

<p>上面输出： <code>a=0,b=0,c=0,d=false e=</code></p>
<h1 id="派生-x2F-复杂数据类型"><a href="#派生-x2F-复杂数据类型" class="headerlink" title="派生/复杂数据类型"></a>派生/复杂数据类型</h1><ol>
<li><p>指针（Pointer）</p>
</li>
<li><p>数组</p>
</li>
<li><p>结构体（struct）</p>
</li>
<li><p>管道（Channel）</p>
</li>
<li><p>函数</p>
</li>
<li><p>切片（slice）</p>
</li>
<li><p>接口（interface）</p>
</li>
<li><p>map</p>
</li>
</ol>
<p>后面陆续讲解复杂数据类型。</p>
<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go | 浅谈包管理模式</title>
    <url>/posts/3874691188.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Go/">Golang专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<p>任何一门编程语言都离不开对各种工具包的使用，工具包的管理就显得异常重要了。Go 的包管理方式是逐渐演进的，本文介绍Go语言的两种包管理模式。</p>
<h1 id="GOPATH模式引包（不推荐）"><a href="#GOPATH模式引包（不推荐）" class="headerlink" title="GOPATH模式引包（不推荐）"></a>GOPATH模式引包（不推荐）</h1><p>在 1.5 版本之前，所有的依赖包都是存放在 <code>GOPATH</code> 下，没有多版本控制。</p>
<p>go的编译器会在 <code>$GOPATH/src</code> 下面寻找对应的模块，<code>src</code> 下的每一个目录都可以对应一个模块，目录中的目录也可以是一个模块</p>
<p>下面展示如何在入口文件<code>main.go</code> 里引入非标准库<code>model</code>包中的变量</p>
<ol>
<li>目录层级如下</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">├───main</span><br><span class="line">│       main.go</span><br><span class="line">└───model</span><br><span class="line">        utils.go</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p><code>main/main.go</code> 入口文件引入<code>utils</code>里面的<code>Name</code>变量</p>
</li>
<li><p><code>model/utils.go</code> 文件声明 <code>package model</code>，并定义变量<code>var Name string = "xiao"</code> ，变量必须是大写，否则报错name not exported by package model</p>
</li>
</ul>
<ol start="2">
<li>main.go 文件引model包</li>
</ol>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="comment">// 引包</span></span><br><span class="line">  <span class="comment">// 省略GOPATH/src, Go编译的时候会自动在src目录下寻找</span></span><br><span class="line">	<span class="string">"go_code/pointer/model"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">	fmt.Println(model.Name) <span class="comment">// xiao</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="开启GO111MODULE后非module项目产生的问题"><a href="#开启GO111MODULE后非module项目产生的问题" class="headerlink" title="开启GO111MODULE后非module项目产生的问题"></a>开启GO111MODULE后非module项目产生的问题</h2><p>在<code>GO111MODULE=on</code>，并且已经设置<code>GOPATH</code>的条件下，写的代码在<code>$GOPATH/src</code>下，我想要使用另一个<code>package</code>里面的内容，并且这个package不是标准库，或者说不在<code>GOROOT</code>里(一般我们不会修改GOROOT中的内容)，编译会报错，如下👇👇</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> go_code/pointer/model is not in GOROOT</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/636a062a16f2c2beb1df781f.jpg"></p>
<h3 id="解决方法一："><a href="#解决方法一：" class="headerlink" title="解决方法一："></a>解决方法一：</h3><p>设置GO111MODULE=off</p>
<p><code>go env -w GO111MODULE=off</code></p>
<p>设置完之后， <code>go env</code>查看</p>
<p>然后重新编译即可</p>
<h3 id="解决方法二"><a href="#解决方法二" class="headerlink" title="解决方法二"></a>解决方法二</h3><p><strong>使用<code>go mod</code></strong> ， 请看下文介绍👇</p>
<h1 id="GO-MODULE-模式引包（推荐）"><a href="#GO-MODULE-模式引包（推荐）" class="headerlink" title="GO MODULE 模式引包（推荐）"></a>GO MODULE 模式引包（推荐）</h1><h2 id="go-module-介绍"><a href="#go-module-介绍" class="headerlink" title="go module 介绍"></a>go module 介绍</h2><p>go modules 是 golang 1.11 新加的特性。</p>
<blockquote>
<ul>
<li><p>模块是相关Go包的集合</p>
</li>
<li><p>modules是源代码交换和版本控制的单元</p>
</li>
</ul>
<p>go命令直接支持使用modules，包括记录和解析对其他模块的依赖性。modules替换旧的基于GOPATH的方法来指定在给定构建中使用哪些源文件。</p>
</blockquote>
<p>GO111MODULE 有三个值：off, on和auto（默认值）。</p>
<ol>
<li><p><strong>GO111MODULE=off</strong>，go命令行将不会支持module功能，寻找依赖包的方式将会沿用旧版本那种通过vendor目录或者GOPATH模式来查找(也就是本文最开始介绍的方式)。</p>
</li>
<li><p><strong>GO111MODULE=on</strong>，go命令行会使用modules，不会去GOPATH目录下查找所引用的包。</p>
</li>
<li><p><strong>GO111MODULE=auto</strong>，默认值，go命令行将会根据当前目录来决定是否启用module功能。这种情况下可以分为两种情形：</p>
<ul>
<li><p>当前目录在<code>GOPATH/src</code>之外且该目录包含go.mod文件</p>
</li>
<li><p>当前文件在包含go.mod文件的目录下面。</p>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>当modules功能启用时，依赖包的存放位置变更为<code>$GOPATH/pkg</code>，允许同一个package多个版本并存，且多个项目可以<strong>共享缓存</strong>的 <code>module</code></p>
</blockquote>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/636a063916f2c2beb1df997e.jpg"></p>
<p>利用<code>GO111MODULE</code>和<code>GOPROXY</code>，可以直接将Github上的第三方库直接下载到本地使用，不需要使用go get命令。执行 go run 运行时，GOMODULES包管理工具会自动帮我们下载github上面的包</p>
<h2 id="使用-go-mod-创建新项目"><a href="#使用-go-mod-创建新项目" class="headerlink" title="使用 go mod 创建新项目"></a>使用 go mod 创建新项目</h2><p>当开启<code>GO111MODULE</code>的时候，才可以使用<code>go mod</code></p>
<h3 id="1、初始化项目"><a href="#1、初始化项目" class="headerlink" title="1、初始化项目"></a>1、初始化项目</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> test-mod</span><br><span class="line"><span class="built_in">cd</span> test-moe</span><br><span class="line">go mod init maze-mod</span><br></pre></td></tr></tbody></table></figure>

<p><strong>在项目根目录生成 <code>go.mod</code> 文件</strong></p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">module test-mod</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.17</span></span><br><span class="line"></span><br><span class="line">require github.com/astaxie/beego v1<span class="number">.12</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">	golang.org/x/net v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20190620200207</span><span class="number">-3</span>b0461eec859 <span class="comment">// indirect</span></span><br><span class="line">	golang.org/x/text v0<span class="number">.3</span><span class="number">.0</span> <span class="comment">// indirect</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>注意：</p>
<ol>
<li><p>有<code>indirect</code>注释的代表<strong>间接依赖</strong>，没有的代表<strong>直接依赖</strong>，</p>
</li>
<li><p>前面是<strong>版本号+时间戳+hash</strong>（如：<code>v0.0.0-20190620200207-3b0461eec859</code>）</p>
</li>
</ol>
</blockquote>
<ol>
<li><p><code>go.mod</code>文件一旦创建后，它的内容将会被<code>go toolchain</code>全面掌控。<code>go toolchain</code>会在各类命令执行时(比如go get、go build、go mod等)，修改维护<code>go.mod</code>文件。</p>
</li>
<li><p><code>go.mod</code> 提供了module, require、replace和exclude 四个命令</p>
<ul>
<li><p>module 语句指定包的名字（路径）</p>
</li>
<li><p>require 语句指定的依赖项模块</p>
</li>
<li><p>replace 语句可以替换依赖项模块</p>
</li>
<li><p>exclude 语句可以忽略依赖项模块</p>
</li>
</ul>
</li>
</ol>
<h3 id="2、添加依赖"><a href="#2、添加依赖" class="headerlink" title="2、添加依赖"></a>2、添加依赖</h3><ol>
<li><p>新建<code>main.go</code>文件</p>
</li>
<li><p>执行 <code>go run main.go</code></p>
<ul>
<li><p>一般来说 <code>go mod</code> 模式下，运行 <code>go run</code> 会自动安装所有依赖，但是没有安装</p>
</li>
<li><p>运行 <code>go get ./ ...</code> 可以自动查找并下载安装所有的包</p>
</li>
<li><p>运行 <code>go get package@version</code> 安装指定版本的依赖包</p>
</li>
</ul>
</li>
</ol>
<h3 id="3、查看依赖"><a href="#3、查看依赖" class="headerlink" title="3、查看依赖"></a>3、查看依赖</h3><ul>
<li><p><code>go list -m all</code> 查看当前模块所依赖的包列表</p>
</li>
<li><p><code>go mod tidy</code> 从 <code>go.mod</code> 中移除不需要的依赖</p>
</li>
</ul>
<h3 id="4、go-sum文件"><a href="#4、go-sum文件" class="headerlink" title="4、go.sum文件"></a>4、<code>go.sum</code>文件</h3><p>用来做包版本管理</p>
<p><code>go.sum</code>文件与<code>go.mod</code>文件同级。<code>go.sum</code>文件是对导入的依赖包的特定版本的<code>hash</code>校验值，作用就是记录第一次下载的依赖版本号，防止有依赖版本升级带来的不兼容问题。所以，<code>go.mod</code>和<code>go.sum</code>文件都需要被加入版本管理中。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li><p><code>GOPATH模式</code> 是 go在 1.5 版本之前的包管理模式，不具备版本控制功能，且所有项目的依赖都放在 GOPATH 里面，管理比较混乱</p>
</li>
<li><p><code>GO MODULE</code> 模式是go在1.11 版本推出的，使用git的管理方式，直接从GitHub上下载所需要的依赖，可能会存在一些安全性问题，同时国内需要设置<code>GOPROXY</code>代理服务器才可使用，相对来说好用一点。</p>
</li>
</ol>
<p>包管理模式一直是各个开发语言所面临的棘手问题，比如<code>NPM</code>和<code>Yarn</code>，设计一种完美的包管理模式还需要不断探索实践。</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6368fc4816f2c2beb15b5ba6.jpg"></p>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端开发，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。数风流人物还看中国、看今朝、看你我。</p>
</body></html>]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go | 讲解GOROOT、GOPATH、GOBIN</title>
    <url>/posts/4093397452.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Go/">Golang专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Go（又称 Golang）是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。Go 被誉为是未来的服务器端编程语言。</p>
<p>Go是一门全新的静态类型开发语言，具有自动垃圾回收，丰富的内置类型,函数多返回值，错误处理，匿名函数,并发编程，反射等特性。</p>
<p><strong>特色：</strong></p>
<ul>
<li><p>简洁、快速、安全</p>
</li>
<li><p>并行、有趣、开源</p>
</li>
<li><p>内存管理、数组安全、编译迅速</p>
</li>
</ul>
<h2 id="GOROOT"><a href="#GOROOT" class="headerlink" title="GOROOT"></a>GOROOT</h2><p>其实就是<code>golang</code> 的安装路径</p>
<p>当你安装好<code>golang</code>之后其实这个就已经有了</p>
<h2 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h2><p><code>go</code>命令依赖一个重要的环境变量：<code>GOPATH</code></p>
<p><code>GOPATH</code>允许多个目录，当有多个目录时，请注意分隔符，多个目录的时候<code>Windows</code>是分号<code>;</code></p>
<p>当有多个<code>GOPATH</code>时默认将<code>go get</code>获取的包存放在第一个目录下</p>
<h2 id="GOBIN"><a href="#GOBIN" class="headerlink" title="GOBIN"></a>GOBIN</h2><p><code>go install</code>编译存放路径。不允许设置多个路径。可以为空。为空时则遵循“约定优于配置”原则，可执行文件放在各自<code>GOPATH</code>目录的<code>bin</code>文件夹中（前提是：package main的main函数文件不能直接放到<code>GOPATH</code>的<code>src</code>下面。</p>
<h2 id="GOPATH目录约定有三个子目录"><a href="#GOPATH目录约定有三个子目录" class="headerlink" title="GOPATH目录约定有三个子目录"></a>GOPATH目录约定有三个子目录</h2><ol>
<li><p><strong>src：</strong>存放源代码(比如：.go .c .h .s等)   按照golang默认约定，<code>go run</code>，<code>go install</code>等命令的当前工作路径（即在此路径下执行上述命令）。</p>
</li>
<li><p><strong>pkg：</strong>编译时生成的中间文件（比如：.a）　 <code>golang</code>编译包时</p>
</li>
<li><p><strong>bin：</strong>编译后生成的可执行文件（为了方便，可以把此目录加入到 $PATH 变量中，如果有多个gopath，那么使用${GOPATH//://bin:}/bin添加所有的bin目录）</p>
</li>
</ol>
<h2 id="目录结构规划"><a href="#目录结构规划" class="headerlink" title="目录结构规划"></a>目录结构规划</h2><p><code>GOPATH</code>下的<code>src</code>目录就是接下来开发程序的主要目录，所有的源码都是放在这个目录下面，那么一般我们的做法就是一个目录一个项目，</p>
<p>例如:</p>
<p><code>$GOPATH/src/myproject</code> 表示<code>myproject</code>这个应用包或者可执行应用，这个根据package是main还是其他来决定，main的话就是可执行应用，其他的话就是应用包，这个会在后续详细介绍package。</p>
<h2 id="go-get-和go-install"><a href="#go-get-和go-install" class="headerlink" title="go get 和go install"></a>go get 和go install</h2><p><code>go get</code>会做两件事：</p>
<ol>
<li><p>从远程下载需要用到的包</p>
</li>
<li><p>执行go install</p>
</li>
</ol>
<p><code>go install</code> 会生成可执行文件直接放到<code>bin</code>目录下，当然这是有前提的</p>
<p>你编译的是可执行文件，如果是一个普通的包，会被编译生成到<code>pkg</code>目录下该文件是.a结尾</p>
<h2 id="go-整体开发目录"><a href="#go-整体开发目录" class="headerlink" title="go 整体开发目录"></a>go 整体开发目录</h2><p><strong>不使用 <code>go mod</code> 的方式，项目全在 <code>$GOPATH/src</code> 下</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">go_project     <span class="comment">// go_project为GOPATH目录</span></span><br><span class="line">  -- bin</span><br><span class="line">     -- myApp1  <span class="comment">// 编译生成</span></span><br><span class="line">     -- myApp2  <span class="comment">// 编译生成</span></span><br><span class="line">     -- myApp3  <span class="comment">// 编译生成</span></span><br><span class="line">  -- pkg</span><br><span class="line">  -- src</span><br><span class="line">     -- myApp1     <span class="comment">// project1</span></span><br><span class="line">        -- models</span><br><span class="line">        -- controllers</span><br><span class="line">        -- others</span><br><span class="line">        -- main.<span class="property">go</span></span><br><span class="line">     -- myApp2     <span class="comment">// project2</span></span><br><span class="line">        -- models</span><br><span class="line">        -- controllers</span><br><span class="line">        -- others</span><br><span class="line">        -- main.<span class="property">go</span></span><br><span class="line">     -- myApp3     <span class="comment">// project3</span></span><br><span class="line">        -- models</span><br><span class="line">        -- controllers</span><br><span class="line">        -- others</span><br><span class="line">        -- main.<span class="property">go</span></span><br></pre></td></tr></tbody></table></figure>

<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go | 闭包的使用</title>
    <url>/posts/2531382131.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Go/">Golang专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<h1 id="闭包基本介绍"><a href="#闭包基本介绍" class="headerlink" title="闭包基本介绍"></a>闭包基本介绍</h1><p>闭包就是 <strong>一个函数</strong> 和其相关的 <strong>引用环境</strong> 组合的一个整体</p>
<p><strong>好处：</strong> 保存引用的变量，下次继续使用，不会销毁</p>
<p>下面通过闭包的方式，写一个数字累加器，体验一下闭包的妙处👇</p>
<h2 id="闭包实现数字累加"><a href="#闭包实现数字累加" class="headerlink" title="闭包实现数字累加"></a>闭包实现数字累加</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 累加器</span></span><br><span class="line"><span class="comment">// 闭包 - 函数柯里化</span></span><br><span class="line"><span class="comment">// 返回值类型： func(int) int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUpper</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line">	<span class="keyword">var</span> n <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line">		n = n + i</span><br><span class="line">		<span class="keyword">return</span> n</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">	f := AddUpper()</span><br><span class="line">	fmt.Println(f(<span class="number">1</span>)) <span class="comment">// 101</span></span><br><span class="line">	fmt.Println(f(<span class="number">2</span>)) <span class="comment">// 103</span></span><br><span class="line">	fmt.Println(f(<span class="number">3</span>)) <span class="comment">// 106</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h2><ol>
<li><p>AddUpper是一个函数，返回的数据类型 <strong>func(int) int</strong></p>
</li>
<li><p>闭包的说明</p>
</li>
</ol>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6397d96fb1fccdcd368f168f.jpg"></p>
<p>返回的是一个<code>匿名函数</code>，但是这个匿名函数引用到了函数外的变量 n ，因此这个匿名函数就和 n 形成一个整体，构成闭包</p>
<ol start="3">
<li><p>当反复调用 <code>f</code> 函数时，因为 n 只初始化一次，保存了变量的值，因此每调用一次就相当于进行了累加。</p>
</li>
<li><p>我们要搞清楚闭包，关键就是要分析<strong>返回的函数使用到哪些变量</strong></p>
</li>
</ol>
<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>这里我引入了一个字符串变量<code>str</code>，来帮助分析闭包是怎么保存变量的。</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 累加器</span></span><br><span class="line"><span class="comment">// 闭包 - 函数柯里化</span></span><br><span class="line"><span class="comment">// 返回值类型： func(int) int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUpper</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line">	<span class="keyword">var</span> n <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">	<span class="keyword">var</span> str = <span class="string">"hello"</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line">		n = n + i</span><br><span class="line">		fmt.Println(<span class="string">"i="</span>, i)</span><br><span class="line">		str += <span class="type">string</span>(<span class="number">36</span>) <span class="comment">// ascii 36 = '$'</span></span><br><span class="line">		fmt.Printf(<span class="string">"str==%s\n"</span>, str)</span><br><span class="line">		<span class="keyword">return</span> n</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">	f := AddUpper()</span><br><span class="line">	<span class="comment">// fmt.Println(AddUpper()(1)) // 101</span></span><br><span class="line">	fmt.Println(<span class="string">"f(1)="</span>, f(<span class="number">1</span>)) <span class="comment">// 101</span></span><br><span class="line">	fmt.Println(<span class="string">"f(2)="</span>, f(<span class="number">2</span>)) <span class="comment">// 103</span></span><br><span class="line">	fmt.Println(<span class="string">"f(3)="</span>, f(<span class="number">3</span>)) <span class="comment">// 106</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i= <span class="number">1</span></span><br><span class="line">str==hello$</span><br><span class="line">f(<span class="number">1</span>)= <span class="number">101</span></span><br><span class="line">i= <span class="number">2</span></span><br><span class="line">str==hello$$</span><br><span class="line">f(<span class="number">2</span>)= <span class="number">103</span></span><br><span class="line">i= <span class="number">3</span></span><br><span class="line">str==hello$$$</span><br><span class="line">f(<span class="number">3</span>)= <span class="number">106</span></span><br></pre></td></tr></tbody></table></figure>

<p>从输出可以看出来，闭包引用的变量<code>n</code>和<code>str</code>并没有在调用函数的时候重复声明，而是保留了下次函数调用后更新的值。</p>
<h1 id="闭包案例"><a href="#闭包案例" class="headerlink" title="闭包案例"></a>闭包案例</h1><p>需求：</p>
<ol>
<li><p>编写一个函数 makeSuffix(suffix string) ，可以接收一个文件后缀名，并返回一个闭包</p>
</li>
<li><p>调用闭包，可以传入一个文件名，如果该文件名没有指定后缀，则返回 文件名.jpg ，如果已经有.jpg，则返回原文件名。</p>
</li>
</ol>
<p>strings.HasSuffix，该函数可以判断某个字符串是否有指定的后缀。</p>
<h2 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSuffix</span><span class="params">(suffix <span class="type">string</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>)</span></span> <span class="type">string</span> {</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="type">string</span>)</span></span> <span class="type">string</span> {</span><br><span class="line">		<span class="keyword">if</span> !strings.HasSuffix(name, suffix) {</span><br><span class="line">			<span class="keyword">return</span> name + suffix</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">return</span> name</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统写法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSuffixV2</span><span class="params">(suffix <span class="type">string</span>, name <span class="type">string</span>)</span></span> <span class="type">string</span> {</span><br><span class="line">	<span class="keyword">if</span> !strings.HasSuffix(name, suffix) {</span><br><span class="line">		<span class="keyword">return</span> name + suffix</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> name</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">	<span class="comment">// 闭包调用</span></span><br><span class="line">	f := makeSuffix(<span class="string">".jpg"</span>)</span><br><span class="line">	fmt.Println(f(<span class="string">"xiao"</span>))         <span class="comment">// xiao.jpg</span></span><br><span class="line">	fmt.Println(f(<span class="string">"xiaoxiao.jpg"</span>)) <span class="comment">// xiaoxiao.jpg</span></span><br><span class="line">	fmt.Println(f(<span class="string">"xiaoxiao.666"</span>)) <span class="comment">// xiaoxiao.666.jpg</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 传统写法调用</span></span><br><span class="line">	fmt.Println(<span class="string">"makeSuffixV2="</span>, makeSuffixV2(<span class="string">".jpg"</span>, <span class="string">"allblue"</span>))  <span class="comment">// makeSuffixV2= allblue.jpg</span></span><br><span class="line">	fmt.Println(<span class="string">"makeSuffixV2="</span>, makeSuffixV2(<span class="string">".jpg"</span>, <span class="string">"all.blue"</span>)) <span class="comment">// makeSuffixV2= all.blue.jpg</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="代码说明-1"><a href="#代码说明-1" class="headerlink" title="代码说明"></a>代码说明</h2><p>返回的匿名函数和 makeSuffix(suffix string) 的 suffix 变量组合成一个闭包</p>
<p>传统写法和闭包写法实现效果一样，但是，传统写法需要重复写变量， 比如上面的</p>
<p><strong>makeSuffixV2(“.jpg”, “all.blue”))</strong></p>
<p>闭包则解决了这个问题，是代码看起来更加的简洁</p>
<h2 id="闭包的好处之一：-参数复用"><a href="#闭包的好处之一：-参数复用" class="headerlink" title="闭包的好处之一： 参数复用"></a>闭包的好处之一： 参数复用</h2><p>好处： 保存引用的变量，下次继续使用，不会销毁</p>
<h1 id="函数柯里化（闭包）"><a href="#函数柯里化（闭包）" class="headerlink" title="函数柯里化（闭包）"></a>函数柯里化（闭包）</h1><p>参考我的另一篇文章： <a href="https://www.yuque.com/xiaojt/izub4k/ps5oet">甜点cc的语雀知识库</a></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6368fc4816f2c2beb15b5ba6.jpg"></p>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a>☭</p>
<p>微信公众号：【看见另一种可能】</p>
<p>专注前端开发，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
</body></html>]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+GitHub搭建个人博客</title>
    <url>/posts/3616955208.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>操作环境：Windows10、Node、Git、ssh</p>
<p>前置准备: <code>&lt;username&gt;github.io</code> 仓库已建立，预计托管博客网址为<code>&lt;username&gt;github.io/blog</code></p>
</blockquote>
<p>先对hexo有个清晰的认识，不至于稀里糊涂的跟着步骤走。</p>
<h1 id="1、Hexo发布博客流程概览"><a href="#1、Hexo发布博客流程概览" class="headerlink" title="1、Hexo发布博客流程概览"></a>1、Hexo发布博客流程概览</h1><ol>
<li><p>搭建hexo环境</p>
</li>
<li><p><code>hexo new "title"</code> (创建新文章)</p>
</li>
<li><p>编写md文档</p>
</li>
<li><p><code>hexo clean</code></p>
</li>
</ol>
<ul>
<li>清除缓存文件 (db.json) 和已生成的静态文件 (public)</li>
</ul>
<ol start="5">
<li><p><code>hexo generate</code> (生成静态文件)</p>
</li>
<li><p><code>hexo deploy</code> (Hexo 会将 public 目录中的文件和目录推送至 <code>_config.yml</code> 中指定的远端仓库和分支中，并且完全覆盖该分支下的已有内容。)</p>
</li>
<li><p>本地仓库同步到GitHub (不同步的话，文章源码只会保留在本地，不易管理)</p>
</li>
</ol>
<blockquote>
<p>由于 Hexo 的部署默认使用分支 master，所以如果你同时正在使用 Git 管理你的站点目录，你应当注意你的部署分支应当不同于写作分支。</p>
<p>Hexo 在部署你的站点生成的文件时并不会更新你的站点目录。因此你应该手动提交并推送你的写作分支。</p>
</blockquote>
<p>一般来说第一步环境搭建只需要在最开始创建博客网站的时候进行，写文的话只需要重复第2-7步就可以了，这种使用方式强烈依赖于本地环境。但是，有时候我们并不只是固定在一台电脑上写文，（比如：一直写文的电脑坏了，需要换新电脑；电脑重装系统等等）这样就需要在另一台电脑上搭建环境，这样非常的麻烦，而且难免会带来一些其它依赖版本兼容问题。所以，可以采用<code>GitHub Actions</code>持续集成平台来简化发布文章的流程。</p>
<p>简化后的流程如下：</p>
<ol>
<li><p><code>hexo new "title"</code> (创建新文章)</p>
</li>
<li><p>编写md文档</p>
</li>
<li><p>本地仓库同步到GitHub</p>
</li>
</ol>
<ul>
<li>push到GitHub上之后，<code>GitHub Actions</code>会监听分支文件变动，触发发布流程（跟Jenkins 构建流程类似）</li>
</ul>
<p>下文整体分为两个步骤：</p>
<ol>
<li><p>借助<code>GitHub Pages</code>手动部署。</p>
</li>
<li><p>增加<code>GitHub Actions</code>配置，完成自动部署</p>
</li>
</ol>
<h1 id="2、Hexo-搭建博客"><a href="#2、Hexo-搭建博客" class="headerlink" title="2、Hexo 搭建博客"></a>2、Hexo 搭建博客</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<p><a href="https://hexo.io/docs/">文档</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="built_in">cd</span> [workspace]</span><br><span class="line">hexo init &lt;folder:blog&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder:blog&gt;</span><br><span class="line">npm install</span><br><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184fd416f2c2beb1e20f8a.png"></p>
<p>网站基础配置修改参考<a href="https://hexo.io/docs/configuration">这里</a></p>
<h1 id="3、GitHub-托管-Hexo-博客"><a href="#3、GitHub-托管-Hexo-博客" class="headerlink" title="3、GitHub 托管 Hexo 博客"></a>3、GitHub 托管 Hexo 博客</h1><blockquote>
<p>可以采取<code>分支管理</code>的方式，也可以新建repo，在ci配置上略有不同，这里我采用的是将<code>hexo</code>博客源码托管到<code>独立的repo上</code>，将 <code>Hexo</code> 项目编译生成静态页面，部署到 <code>gh-pages</code> 分支</p>
</blockquote>
<ol>
<li><p>新建仓库：<code>blog</code> （名字自己起）</p>
</li>
<li><p>本地hexo仓库关联远程GitHub仓库<br>将本地仓库推送到远端</p>
</li>
<li><p>本地仓库一些必要的修改配置</p>
</li>
</ol>
<ul>
<li><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/hexojs/</span>hexo-deployer-git</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>修改<code>_config.yml</code>配置，如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">url: https://all-smile.github.io/blog</span><br><span class="line">root: /blog/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">'git'</span></span><br><span class="line">  repo: git@github.com:all-smile/blog.git</span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>提交到远程仓库</p>
</li>
</ul>
<ol start="3">
<li>创建 <code>gh-pages</code> 分支</li>
</ol>
<p>hexo结合GitHub创建个人网站指定的分支名，hexo 内默认设置的分支也是叫这个名字</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git checkout -b gh-pages</span><br><span class="line">git push -u origin gh-pages</span><br></pre></td></tr></tbody></table></figure>

<ol start="4">
<li>远程仓库开启 github pages</li>
</ol>
<p>指定部署分支：gh-pages</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184fe116f2c2beb1e221d9.png"></p>
<h1 id="4、手动部署"><a href="#4、手动部署" class="headerlink" title="4、手动部署"></a>4、手动部署</h1><p>本地项目执行命令：</p>
<figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo deploy</span></span><br></pre></td></tr></tbody></table></figure>

<p>hexo模板引擎生成静态文件，并推送到<code>gh-pages</code>分支下（替换原先分支下的所有文件）</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184ff316f2c2beb1e26ab9.png"></p>
<p>到这里就已经完成了博客的搭建</p>
<blockquote>
<p>需要注意的是：<code>hexo deploy</code> 命令并不会帮助我们同步本地的修改到远程仓库，所以当在本地写完博文之后，要做两件事：一是发布站点，二是同步远程仓库，这样做比较麻烦，下面会讲解如何配置<code>持续集成</code></p>
</blockquote>
<h2 id="4-1、查看效果"><a href="#4-1、查看效果" class="headerlink" title="4.1、查看效果"></a>4.1、查看效果</h2><p>这里我配置了自定义域名</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318500316f2c2beb1e2b0f1.jpg"></p>
<h1 id="5、自动部署"><a href="#5、自动部署" class="headerlink" title="5、自动部署"></a>5、自动部署</h1><blockquote>
<p>就是DevOps，可以理解成 <code>GitHub</code> 通过一些<code>流水线</code>的配置（CI/CD），然后在本地推送代码的时候触发<code>流水线</code>执行，自动部署站点。</p>
</blockquote>
<p>由于 <code>GitHub Actions</code> 也可以实现CI/CD，<code>travis-ci</code> 的市场被挤压了，所以他们改变了运营策略，变成收费使用了！我们换用 <code>GitHub Actions</code></p>
<p><code>GitHub Actions</code> 是开源持续集成构建项目，用来持续集成托管在GitHub上的代码，使用起来也非常的简单方便。</p>
<p>使用 <code>GitHub Actions</code> 后，可以将前面部署的步骤自动化，我们只需要将本地修改的文件推送到 <code>github</code> 仓库，<code>GitHub Actions</code> 检测到 <code>master</code> 分支代码有变动，会自动执行脚本命令，将 <code>Hexo</code> 项目编译生成静态页面，部署到 <code>gh-pages</code> 分支，very good！</p>
<h1 id="6、GitHub-Actions"><a href="#6、GitHub-Actions" class="headerlink" title="6、GitHub Actions"></a>6、GitHub Actions</h1><p><code>GitHub Actions</code>文档请点击<a href="https://docs.github.com/cn/actions">这里</a></p>
<blockquote>
<p>使用<code>Github Action</code>来部署<code>hexo</code>，这样电脑本地就不需要安装npm相关的东西了。另外利用<code>github.dev</code>也可以实现在页面上编辑了。</p>
<p>在线编辑:<br><code>Github</code>有提供一个在线编辑的页面，在Repo页面按下按键<code>.</code>就可以打开编辑页面了</p>
</blockquote>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631854c416f2c2beb1e8b091.png"></p>
<p>每个 <code>action</code> 就是一个独立脚本，因此可以做成代码仓库，使用<code>userName/repoName</code>的语法引用 <code>action</code>。比如，<code>actions/setup-node</code>就表示<a href="https://github.com/actions/setup-node"><code>github.com/actions/setup-node</code></a>这个仓库，它代表一个 <code>action</code>，作用是安装 Node.js。事实上，GitHub 官方的 actions 都放在 <a href="https://github.com/actions"><code>github.com/actions</code></a> 里面。</p>
<h2 id="6-1、支持的令牌"><a href="#6-1、支持的令牌" class="headerlink" title="6.1、支持的令牌"></a>6.1、支持的令牌</h2><p>支持三个令牌。</p>
<table>
<thead>
<tr>
<th>令牌</th>
<th>私人仓库</th>
<th>公开仓库</th>
<th>协议</th>
<th>设置</th>
</tr>
</thead>
<tbody><tr>
<td>github_token</td>
<td>✅️</td>
<td>✅️</td>
<td>HTTPS</td>
<td>不必要</td>
</tr>
<tr>
<td>deploy_key</td>
<td>✅️</td>
<td>✅️</td>
<td>SSH</td>
<td>必要的</td>
</tr>
<tr>
<td>personal_token</td>
<td>✅️</td>
<td>✅️</td>
<td>HTTPS</td>
<td>必要的</td>
</tr>
</tbody></table>
<blockquote>
<p>注意：<code>GITHUB_TOKEN</code>不是个人访问令牌，<code>GitHub Actions</code> 运行器会自动创建一个<code>GITHUB_TOKEN</code>密钥以在您的工作流程中进行身份验证。因此，您无需任何配置即可立即开始部署</p>
</blockquote>
<h2 id="6-2、支持的平台"><a href="#6-2、支持的平台" class="headerlink" title="6.2、支持的平台"></a>6.2、支持的平台</h2><p>所有 <code>Actions</code> 运行器：支持 Linux (Ubuntu)、macOS 和 Windows。</p>
<table>
<thead>
<tr>
<th>环境</th>
<th>github_token</th>
<th>deploy_key</th>
<th>personal_token</th>
</tr>
</thead>
<tbody><tr>
<td>ubuntu-20.04</td>
<td>✅️</td>
<td>✅️</td>
<td>✅️</td>
</tr>
<tr>
<td>ubuntu-18.04</td>
<td>✅️</td>
<td>✅️</td>
<td>✅️</td>
</tr>
<tr>
<td>macos-最新</td>
<td>✅️</td>
<td>✅️</td>
<td>✅️</td>
</tr>
<tr>
<td>windows-最新</td>
<td>✅️</td>
<td>(2)</td>
<td>✅️</td>
</tr>
</tbody></table>
<h1 id="7、为Hexo配置GitHub-Actions"><a href="#7、为Hexo配置GitHub-Actions" class="headerlink" title="7、为Hexo配置GitHub Actions"></a>7、为Hexo配置GitHub Actions</h1><p>具体步骤：</p>
<h2 id="7-1、设置-SSH-私钥-deploy-key"><a href="#7-1、设置-SSH-私钥-deploy-key" class="headerlink" title="7.1、设置 SSH 私钥 deploy_key"></a>7.1、设置 SSH 私钥 <code>deploy_key</code></h2><p>创建 SSH 部署密钥，使用以下命令生成部署密钥。</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"<span class="subst">$(git config user.email)</span>"</span> -f gh-pages -N <span class="string">""</span></span><br></pre></td></tr></tbody></table></figure>

<p>您将获得 2 个文件：</p>
<ul>
<li><p>gh-pages.pub是公钥</p>
</li>
<li><p>gh-pages是私钥</p>
</li>
</ul>
<p>接下来，转到博客源码存储库设置</p>
<ul>
<li>转到<code>Deploy Keys</code>并使用<code>Allow write access</code>添加您的公钥 <code>gh-pages.pub</code>，name写为<code>public key of ACTIONS_DEPLOY_KEY</code>，指定用途，方便后面维护</li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631853cd16f2c2beb1e79fe6.png"></p>
<ul>
<li>转到<code>Actions secrets</code>并将您的私钥 <code>gh-pages</code> 添加为 <code>ACTIONS_DEPLOY_KEY</code>（这个名称在yml文件中需要使用）</li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631853ec16f2c2beb1e7c1f2.png"></p>
<h2 id="7-2、新建-github-x2F-workflows-x2F-pages-yml-文件"><a href="#7-2、新建-github-x2F-workflows-x2F-pages-yml-文件" class="headerlink" title="7.2、新建 .github/workflows/pages.yml 文件"></a>7.2、新建 .github/workflows/pages.yml 文件</h2><p><code>yml</code>文件通过缩进（空格，不是tab）来表示层级关系。</p>
<p><code>yaml</code>不会的，可以去看一下<a href="https://www.runoob.com/w3cnote/yaml-intro.html">这里</a>，了解一下语法即可。</p>
<p>以下文件是我个人的配置的一部分，不建议直接使用</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发器、分支</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span>  <span class="comment"># default branch</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># 子任务</span></span><br><span class="line">  <span class="attr">pages:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 定运行所需要的虚拟机环境</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="comment"># with:</span></span><br><span class="line">        <span class="comment">#   submodules: true</span></span><br><span class="line">        <span class="comment">#   fetch-depth: 0</span></span><br><span class="line">      <span class="comment"># 每个name表示一个步骤:step</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">16.</span><span class="string">x</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">'16.14.1'</span> <span class="comment"># 自己正在使用的node版本即可</span></span><br><span class="line">      <span class="comment"># - run: node -v # 查看node版本号</span></span><br><span class="line">      <span class="comment"># 缓存依赖项: https://docs.github.com/cn/actions/using-workflows/caching-dependencies-to-speed-up-workflows</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">NPM</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># npm cache files are stored in `~/.npm` on Linux/macOS</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">          <span class="comment"># path: node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">${{</span> <span class="string">runner.OS</span> <span class="string">}}-npm-cache</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            ${{ runner.OS }}-npm-cache</span></span><br><span class="line"><span class="string"></span>      <span class="comment"># 查看路径 : /home/runner/work/blog/blog</span></span><br><span class="line">      <span class="comment"># - name: Look Path</span></span><br><span class="line">      <span class="comment">#   run: pwd</span></span><br><span class="line">      <span class="comment"># 查看文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Look</span> <span class="string">Dir</span> <span class="string">List</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">tree</span> <span class="string">-L</span> <span class="number">3</span> <span class="string">-a</span></span><br><span class="line">      <span class="comment"># 第一次或者依赖发生变化的时候执行 Install Dependencies，其它构建的时候不需要这一步</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Look</span> <span class="string">Dir</span> <span class="string">List</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">tree</span> <span class="string">-L</span> <span class="number">3</span> <span class="string">-a</span></span><br><span class="line">      <span class="comment"># - name: clean theme cache</span></span><br><span class="line">      <span class="comment">#   run: git rm -f --cached themes/tenacity</span></span><br><span class="line">        <span class="comment"># run: git submodule deinit themes/tenacity &amp;&amp; git rm themes/tenacity</span></span><br><span class="line">      <span class="comment"># 安装主题</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Theme</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">git</span> <span class="string">submodule</span> <span class="string">add</span> <span class="string">https://github.com/all-smile/tenacity.git</span> <span class="string">themes/tenacity</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Clean</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">clean</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">deploy_key:</span> <span class="string">${{</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span>  <span class="string">}}</span></span><br><span class="line">          <span class="attr">user_name:</span> <span class="string">xiao</span></span><br><span class="line">          <span class="attr">user_email:</span> <span class="string">allblue95@126.com</span></span><br><span class="line">          <span class="comment"># 获取提交文章源码时的commit message，作为发布gh-pages分支的信息</span></span><br><span class="line">          <span class="attr">commit_message:</span> <span class="string">${{</span> <span class="string">github.event.head_commit.message</span> <span class="string">}}</span></span><br><span class="line">          <span class="attr">full_commit_message:</span> <span class="string">${{</span> <span class="string">github.event.head_commit.message</span> <span class="string">}}</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">${{</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">}}</span></span><br><span class="line">          <span class="comment"># GITHUB_TOKEN不是个人访问令牌，GitHub Actions 运行器会自动创建一个GITHUB_TOKEN密钥以在您的工作流程中进行身份验证。因此，您无需任何配置即可立即开始部​​署</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">          <span class="attr">allow_empty_commit:</span> <span class="literal">true</span> <span class="comment"># 允许空提交</span></span><br><span class="line">      <span class="comment"># Use the output from the `deploy` step(use for test action)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">the</span> <span class="string">output</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">"$<span class="template-variable">{{ steps.deploy.outputs.notify }}</span>"</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="7-3、修改-config-yml-文件中的Deploy配置"><a href="#7-3、修改-config-yml-文件中的Deploy配置" class="headerlink" title="7.3、修改 _config.yml 文件中的Deploy配置"></a>7.3、修改 <code>_config.yml</code> 文件中的<code>Deploy</code>配置</h2><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">'git'</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:all-smile/blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br><span class="line">  <span class="comment"># 默认提交信息： Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">${{</span> <span class="string">github.event.head_commit.message</span> <span class="string">}}</span> <span class="comment"># 直接将提交消息传输到 GitHub Pages 存储库</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="发布效果"><a href="#发布效果" class="headerlink" title="发布效果"></a>发布效果</h2><p>本地仓库直接<code>push</code>，触发 <code>GitHub Actions</code> 自动构建发布</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318540a16f2c2beb1e7e06d.png"></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318541616f2c2beb1e7ef0c.png"></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318547016f2c2beb1e849dd.jpg"></p>
<h2 id="Hexo主题"><a href="#Hexo主题" class="headerlink" title="Hexo主题"></a>Hexo主题</h2><p>请查看<a href="https://hexo.io/zh-cn/docs/themes.html">文档</a> ，自行安装配置</p>
<h1 id="8、GitHub-Actions问题解决"><a href="#8、GitHub-Actions问题解决" class="headerlink" title="8、GitHub Actions问题解决"></a>8、GitHub Actions问题解决</h1><h2 id="8-1、非法输入值"><a href="#8-1、非法输入值" class="headerlink" title="8.1、非法输入值"></a>8.1、非法输入值</h2><p>在 <code>pages.yml</code> 文件的 <code>Deploy</code> 步骤下，发布的时候需要一些参数配置，这些参数名是指定好的，不可以随便写，比如 <code>commit_msg</code>应该使用 <code>commit_message</code></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318549416f2c2beb1e87597.jpg"></p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">commit_message:</span> <span class="string">${{</span> <span class="string">github.event.head_commit.message</span> <span class="string">}}</span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>Warning: Unexpected input(s) ‘commit_msg’, valid inputs are [‘deploy_key’, ‘github_token’, ‘personal_token’, ‘publish_branch’, ‘publish_dir’, ‘destination_dir’, ‘external_repository’, ‘allow_empty_commit’, ‘keep_files’, ‘force_orphan’, ‘user_name’, ‘user_email’, ‘commit_message’, ‘full_commit_message’, ‘tag_name’, ‘tag_message’, ‘enable_jekyll’, ‘disable_nojekyll’, ‘cname’, ‘exclude_assets’]</p>
</blockquote>
<h2 id="8-2、The-process-‘-x2F-usr-x2F-bin-x2F-git’-failed-with-exit-code-128"><a href="#8-2、The-process-‘-x2F-usr-x2F-bin-x2F-git’-failed-with-exit-code-128" class="headerlink" title="8.2、The process ‘/usr/bin/git’ failed with exit code 128"></a>8.2、The process ‘/usr/bin/git’ failed with exit code 128</h2><p>这个问题大概率是 <code>GITHUB_TOKEN</code> 造成的，参考<a href="https://docs.github.com/en/actions/security-guides/automatic-token-authentication">配置文档</a></p>
<p><code>GITHUB_TOKEN</code> 是一种 <code>GitHub</code> 应用程序安装访问令牌。 可以使用安装访问令牌代表仓库中安装的 <code>GitHub</code> 应用程序进行身份验证。令牌的权限仅限于包含您的工作流程的仓库。</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318549f16f2c2beb1e8841e.png"></p>
<p>解决：</p>
<ul>
<li>查看 <code>yml</code> 文件中的名字是否写错</li>
</ul>
<figure class="highlight handlebars"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml">github_token: $</span><span class="template-variable">{{ <span class="name">secrets.GITHUB_TOKEN</span> }}</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>在 仓库 <code>Settings/Actions/general</code> 下，修改 <code>GITHUB_TOKEN</code> 的权限</li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631854b716f2c2beb1e8a12a.png"></p>
<h2 id="8-3、deploy-key问题"><a href="#8-3、deploy-key问题" class="headerlink" title="8.3、deploy key问题"></a>8.3、deploy key问题</h2><figure class="highlight subunit"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">ERROR: </span>Permission to all-smile/blog.git denied to deploy key</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></tbody></table></figure>

<p>解决：</p>
<ul>
<li><p>查看 <code>pages.yml</code> 中引用的变量名称是否跟 GitHub 仓库上设置的一样</p>
</li>
<li><p>公私钥是否匹配，如果不匹配，则重新生成添加即可</p>
</li>
</ul>
<p>👉👉 如果还有其它问题也可以看一下<a href="https://github.com/peaceiris/actions-gh-pages#readme">这里</a>，应该会有帮助的😊</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><ul>
<li><p>本地写文只需要在写完之后<code>push</code>到远程仓库即可发布</p>
</li>
<li><p>其它电脑本地使用，有git就可以了，直接拉取远程仓库源码，在本地创建文件、编辑、推送远端，即可发布</p>
</li>
<li><p>也可以用<code>github.dev</code>在线创建、编辑、发文</p>
</li>
</ul>
<hr>
<p>🎈🎈🎈</p>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
</body></html>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Actions</tag>
      </tags>
  </entry>
  <entry>
    <title>Hybrid app本地开发如何调用JSBridge</title>
    <url>/posts/3740751445.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>前天同事问我公司内部的小程序怎么对接的，我回忆了一下，简单记录了一下前端同学需要注意的点。</p>
<p>背后还有小程序架构、网络策略等等。当时恰逢小程序架构调整，（老架构的时候我就发现了有一个问题点可以优化，但是跟那边人反馈之后，人家表示不要我管😂，新架构时发现这个问题还巧妙的遗留下来了😮）我虽然不负责那块，但是本着<strong>这样不优雅</strong>的原则，还是跟新架构的对接人讲了我的优化方案，讲明白了之后，同时上报各自直系领导，并建议我领导牵头开会推动。最后，无奈存量数据太多，老架构那边权衡之后决定不改动。（多说了几句，权当记录一下）</p>
</blockquote>
<h1 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h1><p>公司研发的一款服务软件App（姑且称为“大地”），提供了包涵消息、待办、工作台、同事圈和通讯录五大功能模块，其中，工作台里集成了包括公司的移动客户端、PC端以及第三方平台的部分功能/服务（统称为“应用”）。</p>
<p>我今天要讲的是这个集成平台以什么方式展现“应用”，答案是：借鉴了微信的架构，自研了“小程序”接入“应用”。</p>
<p>我司小程序具有一种相对开放能力（面向全公司），赋能业务快速数字化、场景敏捷迭代，并且可在“大地”上便捷的获取和使用，同时具有完善的使用体验（这就是严格的接入审核标准带来的好处）。</p>
<p>在“大地”开发者平台，创建小程序会自动创建配套的公众号（公众号是为了推送消息使用，可订阅）。小程序开发不限制技术选型，开发完成之后按照小程序接入规范打包上架小程序，审核发布。</p>
<blockquote>
<p>简单来说，可以把“大地”看成是一个“钉钉”，我现在要把我们的业务功能投放到“大地”上，就需要接入“大地”小程序，以小程序的方式在“大地”上为用户提供服务。</p>
</blockquote>
<p>小程序架构：<code>Cordova</code>框架做的<code>WebView</code>，运行我开发的前端程序，通过<code>Nginx</code>帮我把请求代理到微服务网关，由网关转发到目的主机处理请求。它虽然看上去是一个<code>Native App</code>，但只有一个<code>UI WebView</code>，里面访问的是一个<code>Web App</code>，对我来说就是开发一个<code>H5</code>应用调用一些所需的<code>JSBridge</code>，也就是所谓的<code>Hybrid App</code>。</p>
<p>下面看一下本地开发中的一些问题，以及我是怎么处理的</p>
<h1 id="2、问题"><a href="#2、问题" class="headerlink" title="2、问题"></a>2、问题</h1><p><code>Hybrid App</code>本地开发过程中没有真实的<code>Native</code>环境的，同样也无法使用<code>JSBridge</code>，这就会带来一个问题：跟原生交互的行为只能发布小程序才可以调试，本地玩不了，这…，相当fuck。</p>
<p>目的是想让本地开发同小程序测试环境具有相同的体验，我的想法是在本地模拟<code>JSBridge</code>的方法，尽管不能带来真实的效果，至少触发了某个行为之后要有个反应，不至于让操作流程看起来像是“脱节”的（实际跟原生的交互行为并不多，比如：拍照、弹窗提示、定位等等）。</p>
<p>因此，我要做的就是本地模拟<code>JSBridge</code>的一些方法，开发时触发了这些原生交互行为之后提示一些信息，等到上架小程序测试环境时，在手机上会用真实的<code>JSBridge</code>方法自动替换掉我模拟实现的方法。</p>
<p>于是我就开始了下面的准备工作。</p>
<ol>
<li><p>搞清楚<code>JSBridge</code>运行的原理</p>
</li>
<li><p>本地模拟<code>JSBridge</code>的方法</p>
</li>
<li><p>上架小程序是自动使用真实的<code>JSBridge</code></p>
</li>
</ol>
<h1 id="3、了解JSBridge"><a href="#3、了解JSBridge" class="headerlink" title="3、了解JSBridge"></a>3、了解<code>JSBridge</code></h1><p><strong>JSBridge</strong>：望文生义就是<code>js</code>和<code>Native</code>之前的桥梁，而实际上<code>JSBridge</code>确实是<code>JS</code>和<code>Native</code>之前的<strong>一种通信方式</strong>。</p>
<p>简单的说，<code>JSBridge</code>就是定义<code>Native</code>和<code>JS</code>的通信，<code>Native</code>只通过一个固定的桥对象调用<code>JS</code>，<code>JS</code>也只通过固定的桥对象调用<code>Native</code>。<code>JSBridge</code>另一个叫法及大家熟知的<code>Hybrid app</code>技术。</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631aeacc16f2c2beb1834bb9.png"></p>
<p>了解即可，更多的请参考</p>
<ul>
<li><p><a href="https://www.jianshu.com/p/0bd13e9059fb">Cordova浅析架构原理</a></p>
</li>
<li><p><a href="https://toutiao.io/posts/07qll1/preview">JSBridge 深度剖析</a></p>
</li>
</ul>
<p>下图展示了<code>JSBridge</code>的工作流程👇</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631aeaee16f2c2beb18371d9.png"></p>
<p>上图中左侧部分正式我要做的，具体请看下文</p>
<blockquote>
<p>看累了，三连一下，回看不迷路哟😉</p>
</blockquote>
<h2 id="3-1、我们的JSBridge"><a href="#3-1、我们的JSBridge" class="headerlink" title="3.1、我们的JSBridge"></a>3.1、我们的<code>JSBridge</code></h2><p>推测“大地”那边的<code>JSBridge</code>应该是自己写的，没有初始化<code>JSBridge</code>的操作</p>
<p>当调用<code>JSBridge</code>时，必须在页面完全加载完成之后才能够拿到全局的<code>JSBridge</code>，<code>Cordova</code>框架提供<code>deviceready</code>事件，该事件触发的时候表示全局的<code>JSBridge</code>挂载成功。（注意：这就是我接下来操作的切入点，嘻嘻）</p>
<p>简单写下如下：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">'deviceready'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'deviceready OK!'</span>);</span><br><span class="line">  <span class="variable constant_">JSAPI</span>.<span class="title function_">showToast</span>(<span class="number">0</span>, <span class="string">'提示信息'</span>)</span><br><span class="line">}, <span class="literal">false</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>需要注意的是，在开发环境，是没有 <code>deviceready</code> 事件的，所以上面的代码并不会执行，只有在<code>app</code>里面运行的时候才会执行。</p>
<p><strong>思考：</strong></p>
<p><code>JSBridge</code>必须是在<code>deviceready</code>事件触发后方能使用的，因此首先要做的就是自定义<code>deviceready</code>事件，本地环境可以手动触发自定义<code>deviceready</code>事件，生产环境下直接监听<code>deviceready</code>事件即可</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631aeafd16f2c2beb1838190.png"></p>
<h1 id="4、JS发起自定义事件"><a href="#4、JS发起自定义事件" class="headerlink" title="4、JS发起自定义事件"></a>4、JS发起自定义事件</h1><p>我是用 <code>CustomEvent</code> 构造函数，继承至 <code>Event</code>，文档看<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CustomEvent">这里</a></p>
<ol>
<li>用法</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">CustomEvent</span>(eventName, params);</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>示例</li>
</ol>
<p>创建一个自定义事件</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> event=<span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">'mock-event'</span>);</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>传递参数</li>
</ol>
<p>这里值得注意，需要把想要传递的参数包裹在一个包含<code>detail</code>属性的对象，否则传递的参数不会被挂载</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createEvent</span>(<span class="params">params, eventName = <span class="string">'mock-event'</span></span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomEvent</span>(eventName, { <span class="attr">detail</span>: params });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> event = <span class="title function_">createEvent</span>({ <span class="attr">id</span>: <span class="string">'0010'</span> });</span><br></pre></td></tr></tbody></table></figure>

<ol start="4">
<li>发起事件</li>
</ol>
<p>调用<code>dispatchEvent</code>方法发起事件，传入你刚才创建的方法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(event);</span><br></pre></td></tr></tbody></table></figure>

<ol start="5">
<li>监听事件</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">'mock-event'</span>, <span class="function">(<span class="params">{ detail: { id } }</span>) =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'id'</span>,id) <span class="comment">// 会在控制台打印0010</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<ol start="6">
<li>示例：</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventListener</span>(<span class="string">'show'</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> { <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">detail</span>); });</span><br><span class="line"><span class="comment">// 触发</span></span><br><span class="line"><span class="keyword">let</span> myEvent = <span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">'show'</span>, {</span><br><span class="line">    <span class="attr">detail</span>: {</span><br><span class="line">        <span class="attr">username</span>: <span class="string">'xixi'</span>,</span><br><span class="line">        <span class="attr">userid</span>: <span class="string">'2022'</span></span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">dispatchEvent</span>(myEvent);</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>了解了自定义事件之后，通过自定义事件模拟触发<code>deviceready</code>事件，这样上面的 <code>deviceready</code> 事件监听就可以执行了。</p>
<p><strong>注意</strong>：这里还要确定一个问题，在什么时候触发自定义事件<code>deviceready</code>呢？</p>
</blockquote>
<h1 id="5、确定-deviceready-事件执行时机"><a href="#5、确定-deviceready-事件执行时机" class="headerlink" title="5、确定 deviceready 事件执行时机"></a>5、确定 <code>deviceready</code> 事件执行时机</h1><ul>
<li>只需要编写如下代码，查看输出结果即可</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">'load'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'load OK!'</span>);</span><br><span class="line">}, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">'deviceready'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'deviceready OK!'</span>);</span><br><span class="line">}, <span class="literal">false</span>);</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>结果输出</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">load OK!</span><br><span class="line">deviceready OK!</span><br></pre></td></tr></tbody></table></figure>

<p>由此可知，执行顺序：<code>load</code> –&gt; <code>deviceready</code></p>
<h1 id="6、自定义事件模拟Cordova-deviceready事件"><a href="#6、自定义事件模拟Cordova-deviceready事件" class="headerlink" title="6、自定义事件模拟Cordova deviceready事件"></a>6、自定义事件模拟<code>Cordova</code> <code>deviceready</code>事件</h1><ol>
<li><p>自定义<code>deviceready</code>事件</p>
</li>
<li><p>根据上面测试执行顺序得出的结论，我在<code>load</code>事件里触发自定义事件</p>
</li>
<li><p>在开发环境下模拟一些用到的<code>JSBridge-API</code>，比如下面写到的 <code>JSAPI.showToast()</code> 方法</p>
</li>
</ol>
<ul>
<li>mockEvent.js<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">'development'</span>) {</span><br><span class="line">  <span class="comment">//  自定义事件</span></span><br><span class="line">  <span class="keyword">let</span> myEvent = <span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">'deviceready'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模拟JSAPI事件</span></span><br><span class="line">  <span class="variable language_">window</span>[<span class="string">'JSAPI'</span>] = {</span><br><span class="line">    <span class="title function_">showToast</span>(<span class="params">type, desc</span>) {</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(type, desc);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开发环境下，在 原生 load 方法之后 触发自定义事件</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">'load'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'load OK!'</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">dispatchEvent</span>(myEvent);</span><br><span class="line">    }, <span class="number">100</span>)</span><br><span class="line">  }, <span class="literal">false</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="7、封装deviceReady方法"><a href="#7、封装deviceReady方法" class="headerlink" title="7、封装deviceReady方法"></a>7、封装<code>deviceReady</code>方法</h1><p>实现在<code>Cordova</code>框架触发<code>deviceready</code>事件的时候感知到，以便于在<code>deviceReady</code>事件触发后执行<code>JS-API</code>。</p>
<p><strong>可用于开发环境和非开发环境</strong></p>
<h2 id="7-1、方式一"><a href="#7-1、方式一" class="headerlink" title="7.1、方式一"></a>7.1、方式一</h2><p>这里采用<strong>链式调用</strong>的方式，</p>
<p>以下这种借助 <code>Promise</code> 的实现，在这种场景下其实是不合理的👀<br>只是形式上类似，其实并不是</p>
<ol>
<li>定义</li>
</ol>
<ul>
<li>mixin.js</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title function_">deviceReady</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> {</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">'deviceready'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">"ready go!"</span>);</span><br><span class="line">    }, <span class="literal">false</span>);</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>组件内使用<code>JS-API</code></li>
</ol>
<p>使用<code>JSAPI</code>可以如下这么写</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">deviceReady</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// ready go!</span></span><br><span class="line">  <span class="variable constant_">JSAPI</span>.<span class="title function_">showToast</span>(<span class="number">0</span>, <span class="string">'提示'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">deviceReady</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable constant_">JSAPI</span>.<span class="title function_">getUserInfo</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  }, <span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  });</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>开发环境执行效果如下</li>
</ol>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631aeb0a16f2c2beb183900d.png"></p>
<h2 id="7-2、方式二（推荐）"><a href="#7-2、方式二（推荐）" class="headerlink" title="7.2、方式二（推荐）"></a>7.2、方式二（推荐）</h2><p>改写成通用的事件监听函数，支持链式调用</p>
<blockquote>
<ul>
<li><p>开发环境下，由<code>mockEvent.js</code>文件里的<code>dispatchEvent</code>触发自定义的<code>deviceready</code>事件；</p>
</li>
<li><p>小程序里运行，则由真实的<code>deviceready</code>事件触发</p>
</li>
</ul>
</blockquote>
<ol>
<li>定义</li>
</ol>
<ul>
<li>mixin.js</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title function_">receiver</span>(<span class="params">type</span>) {</span><br><span class="line">  <span class="keyword">let</span> callbacks = {</span><br><span class="line">      <span class="attr">fns</span>: [],</span><br><span class="line">      <span class="attr">then</span>: <span class="keyword">function</span>(<span class="params">cb</span>){</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">fns</span>.<span class="title function_">push</span>(cb);</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">      }</span><br><span class="line">  };</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(type, <span class="keyword">function</span>(<span class="params">ev</span>) {</span><br><span class="line">    <span class="keyword">let</span> fns = callbacks.<span class="property">fns</span>.<span class="title function_">slice</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, l = fns.<span class="property">length</span>; i &lt; l; i++){</span><br><span class="line">        fns[i].<span class="title function_">call</span>(<span class="variable language_">this</span>, ev);</span><br><span class="line">    }</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> callbacks;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>使用</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">receiver</span>(<span class="string">'deviceready'</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">ev</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ev);</span><br><span class="line">  <span class="variable constant_">JSAPI</span>.<span class="title function_">getUserInfo</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    },</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    }</span><br><span class="line">  )</span><br><span class="line">})</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">receiver</span>(<span class="string">"click"</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"hi"</span>))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">()=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">22</span>));</span><br></pre></td></tr></tbody></table></figure>


<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>当应用发布到<code>app</code>上，就是监听的真实的 <code>Cordova</code>框架的 <code>deviceready</code> 事件了，之后也就可以拿到真实的<code>JSAPI</code>了，以上只是为了在开发环境的时候模拟使用<code>JSAPI</code>。防止在开发环境下直接调用<code>JSAPI</code>飘红的情况，当然也是可以加<code>try catch</code>处理的，只不过个人感觉模拟事件使得代码看起来更加优雅别致一点，使用更加丝滑，酌情食用😁。</p>
<p>软件架构非常有意思，感兴趣的可以交流探索，嘻嘻。</p>
<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://home.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我</strong>。</p>
</body></html>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Hybrid app</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript代码是怎么在浏览器里面运行的？</title>
    <url>/posts/3718582230.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>JavaScript代码是怎么在浏览器里面运行的？下面让我们从浏览器内核和JS引擎两方面简单探索一下</p>
</blockquote>
<h2 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h2><p>浏览器内核是什么东西。英文叫做：Rendering Engine，常见的叫法如：排版引擎、解释引擎、渲染引擎，现在流行称为浏览器内核</p>
<table>
<thead>
<tr>
<th>浏览器</th>
<th>内核</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>IE</td>
<td>Trident</td>
<td>IE、猎豹安全、360极速浏览器、百度浏览器</td>
</tr>
<tr>
<td>FireFox</td>
<td>Gecko</td>
<td>可惜这几年已经没落了，打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。</td>
</tr>
<tr>
<td>Safari</td>
<td>Webkit</td>
<td>从Safari推出之时起，它的渲染引擎就是Webkit，一提到 webkit，首先想到的便是 chrome，可以说，chrome 将 Webkit内核 深入人心，殊不知，Webkit 的鼻祖其实是 Safari。</td>
</tr>
<tr>
<td>Chrome</td>
<td>Chromium/Blink</td>
<td>在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。大部分国产浏览器最新版都采用Blink内核。二次开发</td>
</tr>
<tr>
<td>Opera</td>
<td>Blink</td>
<td></td>
</tr>
</tbody></table>
<h2 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h2><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/636c858716f2c2beb1bf0eae.jpg"></p>
<ol>
<li>HTML首先会被浏览器内核中的HTML Parser解析，最终会构建成一颗<strong>DOM树</strong></li>
<li>css会被浏览器内核中的CSS Parser解析，形成<strong>css规则</strong>，css规则和DOM树结合形成一个<strong>渲染树</strong>，通过<strong>layout</strong>（布局）生成最终的渲染树。为什么要有layout呢？因为要适配不同尺寸的屏幕。有了渲染树之后就可以绘制展现出来了。</li>
</ol>
<h2 id="常见的js引擎"><a href="#常见的js引擎" class="headerlink" title="常见的js引擎"></a>常见的js引擎</h2><p>● SpiderMonkey：第一款js引擎，由Brendan Eich开发（js作者）。<br>● Chakra：微软开发，由于IE浏览器。<br>● javascriptCore：webkit的js引擎，Apple公司开发。<br>● V8：Google开发的强大js引擎，也帮助Chrome从众多浏览器中脱颖而出。</p>
<h2 id="浏览器内核和js引擎的关系"><a href="#浏览器内核和js引擎的关系" class="headerlink" title="浏览器内核和js引擎的关系"></a>浏览器内核和js引擎的关系</h2><p>这里用webkit为列，webkit最重要的两部分：</p>
<ol>
<li>WebCore： 负责HTML、CSS的解析、布局、渲染等相关工作；</li>
<li>JavascriptCore：解析、执行js代码。</li>
</ol>
<p>下面是Chromium的架构图</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/636c85a316f2c2beb1bf33a5.jpg"></p>
<h2 id="普通JavaScript引擎（笨重）"><a href="#普通JavaScript引擎（笨重）" class="headerlink" title="普通JavaScript引擎（笨重）"></a>普通JavaScript引擎（笨重）</h2><p><strong>作用</strong>：javascript引擎帮助我们将js代码编译成CPU认识的指令集，最终被cpu执行。</p>
<blockquote>
<p>当然除了编译之外还要负责执行以及内存的管理。 js是解释形语言，由引擎直接读取源码，一边编译一边执行，这样效率相对较低，而编译形语言（如c++）是把源码直接编译成可直接执行的代码执行效率更高。</p>
</blockquote>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/636c85ba16f2c2beb1bf617d.jpg"></p>
<p>随着技术的发展，对JavaScript性能的要求越来越高，V8引擎就是在此背景下产生的，它产生的目的就是为了提高javascript执行的性能。</p>
<h2 id="V8引擎（轻量）"><a href="#V8引擎（轻量）" class="headerlink" title="V8引擎（轻量）"></a>V8引擎（轻量）</h2><p>V8是用C++编写的Google开源的高性能js引擎，v8可以独立运行，亦可以嵌入到任何c++程序中，所以node.js可以运行js代码。</p>
<h3 id="将javascript代码转换成AST"><a href="#将javascript代码转换成AST" class="headerlink" title="将javascript代码转换成AST"></a><strong>将javascript代码转换成AST</strong></h3><p>V8引擎会先将javascript代码转换成AST（抽象语法树），而事实上无论使用什么编程语言都会将源代码解析成抽象语法树（abstract syntax tree, AST）。AST是计算机科学中很早的一个概念，不是V8特有的（只是V8在转换过程中做了非常多的优化），更不是javascript特有的。</p>
<h3 id="AST的用途"><a href="#AST的用途" class="headerlink" title="AST的用途"></a>AST的用途</h3><p>AST的作用也不仅仅是用来在V8的编译上，比如我们常用的babel插件将 es6-&gt;es5 、ts-&gt;js 、死区分析、Dead Code、编译压缩打包、css预处理器、eslint等等，这些功能的实现都离不开AST。</p>
<h3 id="AST编译过程"><a href="#AST编译过程" class="headerlink" title="AST编译过程"></a>AST编译过程</h3><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/636c85c516f2c2beb1bfbae3.jpg"></p>
<h3 id="V8执行js的流程"><a href="#V8执行js的流程" class="headerlink" title="V8执行js的流程"></a>V8执行js的流程</h3><ol>
<li>浏览器内核将源码<strong>以流的方式</strong>交给v8引擎，v8引擎获取到源码并进行编码转换</li>
<li>词法分析scanner，将代码转成tokens</li>
<li>语法分析Parser、Preparser，直接将tokens转换成AST树结构</li>
<li>字节码生成<blockquote>
<ol>
<li>parser就是直接将tokens转换成AST树结构</li>
<li>preParse称之为预解析，为什么需要预解析呢？</li>
</ol>
<ul>
<li>这是因为并不是所有的js代码一开始就会被执行，如果对所有的js代码都进行解析，会影响网页运行效率。所以v8引擎就实现了<strong>延迟解析</strong>的方案，将不必要的函数进行预解析，也就是只解析暂时需要的内容，而对函数的全量解析是在函数被调用时才会进行；</li>
<li>比如我们在一个函数outer内部定义了另外一个函数inner，那么inner函数就会进行预解析；</li>
</ul>
</blockquote>
</li>
</ol>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/636c85ef16f2c2beb1c00095.jpg"></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6368fc4816f2c2beb15b5ba6.jpg"></p>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a>☭</p>
<p>微信公众号：【看见另一种可能】</p>
<p>热爱前端开发，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。数风流人物还看中国、看今朝、看你我。</p>
</body></html>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>V8</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux操作系统学习（运维必会）</title>
    <url>/posts/1915044345.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>Linux一切皆文件，最高权限的账户root。</p>
</blockquote>
<h1 id="1、开机登录"><a href="#1、开机登录" class="headerlink" title="1、开机登录"></a>1、开机登录</h1><p>开机会启动很多进程，在Windows上叫“服务”（service），在Linux上叫做“守护进程”（daemon）</p>
<p>登录方式：</p>
<ul>
<li><p>命令行登录</p>
</li>
<li><p>ssh登录</p>
</li>
<li><p>图形界面登录</p>
</li>
</ul>
<h1 id="2、关机"><a href="#2、关机" class="headerlink" title="2、关机"></a>2、关机</h1><p>不管是重启系统还是关闭系统，首先要运行 <strong>sync</strong> 命令，把内存中的数据同步到硬盘中。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sync                # 将数据从内存同步到硬盘中</span><br><span class="line"></span><br><span class="line">shutdown</span><br><span class="line">shutdown -h 10      # 10分钟后关机</span><br><span class="line">shutdown -h +10     # 10分钟后关机</span><br><span class="line">shutdown -h now     # 立马关机</span><br><span class="line">shutdown -h 20:25   # 系统将在今天20:25关机</span><br><span class="line"></span><br><span class="line">shutdown -r now     # 立即重启</span><br><span class="line">shutdown -r +10     # 10分钟后重启</span><br><span class="line">reboot              # 重启，相当于 shutdown -r now</span><br><span class="line">halt                # 关机，相当于 shutdown -h now</span><br></pre></td></tr></tbody></table></figure>

<h1 id="3、根目录结构"><a href="#3、根目录结构" class="headerlink" title="3、根目录结构"></a>3、根目录结构</h1><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">/bin        # Binary的缩写，存在最经常使用的命令</span><br><span class="line">/boot       # 存放启动Linux时要使用的一些核心文件，包括链接文件和镜像文件</span><br><span class="line">/dev        # Device的缩写，存放Linux的外部设备</span><br><span class="line">/etc        # 存放系统管理所需的配置文件和子目录</span><br><span class="line">/home       # 用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录以用户的账号命名</span><br><span class="line">/lib        # 存放系统最基本的动态链接共享库，其作用类似于Windows里的DLL文件</span><br><span class="line">/lost+found # 这个目录一般是空的，当用户非正常关机时就会在这里存放一些文件</span><br><span class="line">/media      # Linux系统识别出来的设备，例如U盘，光驱，Linux把识别到的设备挂载到这个目录下</span><br><span class="line">/mnt        # 让用户临时挂载别的文件系统</span><br><span class="line">/opt        # 给主机额外安装软件所存放的目录，比如安装Oracle数据库可以放到这个目录下面</span><br><span class="line">/proc       # 虚拟目录，系统内存的映射，可以通过访问这个目录来获取系统信息</span><br><span class="line">/root       # 该目录为系统管理员，也称作超级权限的用户主目录</span><br><span class="line">/sbin       # s 就是 Super User的意思，这里存放系统管理员使用的系统管理程序</span><br><span class="line">/srv        # 存放一些服务启动之后需要提取的数据</span><br><span class="line">/sys        # Linux2.6内核一个很大的变化，该目录下安装了2.6内核中新出现的一个文件系统sysfs</span><br><span class="line">/tmp        # 存放临时文件的目录</span><br><span class="line">/usr        # 用户的很多应用程序和文件都存放在这个目录，类似于Windows下的program files</span><br><span class="line">/usr/bin    # 系统用户使用的应用程序</span><br><span class="line"></span><br><span class="line">/www        # 存放服务器网站相关的资源，环境、网站的项目-----------</span><br><span class="line">						#	LNMP: Linux、Nginx、MySQL、Php</span><br><span class="line">            # LTMP: Linux、tomcat、MySQL、Php</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318559c16f2c2beb1e9ba0a.png"></p>
<h1 id="4、文件属性"><a href="#4、文件属性" class="headerlink" title="4、文件属性"></a>4、文件属性</h1><ul>
<li><p>r：read</p>
</li>
<li><p>w： write</p>
</li>
<li><p>x ：可执行execute</p>
</li>
<li><p>-：没有权限</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>文件类型<br>0</th>
<th>属主权限 owner<br>1 2 3</th>
<th>属组权限 group<br>4 5 6</th>
<th>其它用户权限 others<br>7    8    9</th>
</tr>
</thead>
<tbody><tr>
<td>d</td>
<td>r     w    x</td>
<td>r     -    x</td>
<td>r     -    x</td>
</tr>
<tr>
<td>目录文件</td>
<td>读  写   执行</td>
<td>读  写  执行</td>
<td>读  写   执行</td>
</tr>
</tbody></table>
<ul>
<li><p>1、4、7：读</p>
</li>
<li><p>2、5、8：写</p>
</li>
<li><p>3、6、9：可执行</p>
</li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318556c16f2c2beb1e97901.png"></p>
<h2 id="4-1、更改文件权限"><a href="#4-1、更改文件权限" class="headerlink" title="4.1、更改文件权限"></a>4.1、更改文件权限</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 更改9个文件属性</span><br><span class="line"></span><br><span class="line">[-rwxrwxrwx] 这九个权限属性，三个一组，</span><br><span class="line">用数字代表权限</span><br><span class="line">r: 4   w: 2   x: 1   4+2+1=7</span><br><span class="line"><span class="built_in">chmod</span> 777  可读可写可执行     <span class="built_in">chmod</span> rwxrwxrwx</span><br><span class="line"><span class="built_in">chmod</span> 666  可读可写不可执行   <span class="built_in">chmod</span> rw-rw-rw-</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>查看文件方法<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cat   # 显示文件内容不够</span><br><span class="line">tac   # 倒序显示文件内容</span><br><span class="line">nl    # 显示文件内容并展示行号</span><br><span class="line">more  # 一页一页显示文件内容，(空格代表翻页，enter代表向下看一行，:f 查看当前行号)</span><br><span class="line">less  # 和more类似，向上翻页</span><br><span class="line">head  # -n参数 控制显示几行</span><br><span class="line">tail  # -n参数，倒着查看最后n行信息</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="5、硬链接、软链接"><a href="#5、硬链接、软链接" class="headerlink" title="5、硬链接、软链接"></a>5、硬链接、软链接</h1><p>软链接跟Windows上的快捷方式类似，删除源文件，快捷方式也访问不了了。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">硬链接</span></span><br><span class="line">ln 01 02  # 给01文件创建一个硬链接02，01和02指向同一个文件，允许一个文件有多个路径，用户通过这种机制建立硬链接到一些重要文件上，以防误删！</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接</span></span><br><span class="line">ln -s 01 03</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631854f516f2c2beb1e8e786.png"></p>
<h1 id="6、账号管理"><a href="#6、账号管理" class="headerlink" title="6、账号管理"></a>6、账号管理</h1><p>属主、属组</p>
<h2 id="6-1、添加用户"><a href="#6-1、添加用户" class="headerlink" title="6.1、添加用户"></a>6.1、添加用户</h2><p>一切皆文件，相当于在 /etc/passwd 文件中写入用户信息</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">useradd -参数 用户名</span><br><span class="line">-m 使用者主目录不存在，则自动在/home目录下创建用户名目录</span><br><span class="line"></span><br><span class="line">-G 给用户分配属组</span><br><span class="line"></span><br><span class="line">useradd -m xiaotest</span><br><span class="line"></span><br><span class="line">[root@--- home]# cat /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="line">ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class="line">nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class="line">systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class="line">dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class="line">polkitd:x:999:998:User for polkitd:/:/sbin/nologin</span><br><span class="line">sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br><span class="line">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class="line">chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span><br><span class="line">ntp:x:38:38::/etc/ntp:/sbin/nologin</span><br><span class="line">tcpdump:x:72:72::/:/sbin/nologin</span><br><span class="line">nscd:x:28:28:NSCD Daemon:/:/sbin/nologin</span><br><span class="line">mysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/bash</span><br><span class="line">redis:x:997:995:Redis Database Server:/var/lib/redis:/sbin/nologin</span><br><span class="line">jenkins:x:996:992:Jenkins Automation Server:/var/lib/jenkins:/bin/false</span><br><span class="line">tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin</span><br><span class="line">xiao:x:1000:1000::/home/xiao:/bin/bash</span><br><span class="line">xiaotest:x:1001:1001::/home/xiaotest:/bin/bash      # /home/xiaotest 用户主目录</span><br><span class="line">[root@--- home]#</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="6-2、删除用户"><a href="#6-2、删除用户" class="headerlink" title="6.2、删除用户"></a>6.2、删除用户</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">userdel -r xiaotest  # 删除用户的时候 一起删除用户的目录</span><br></pre></td></tr></tbody></table></figure>

<h2 id="6-3、修改用户"><a href="#6-3、修改用户" class="headerlink" title="6.3、修改用户"></a>6.3、修改用户</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">usermod</span><br><span class="line">usermod -d /home/test01 xiaotest # 更改用户xiaotest的主目录</span><br></pre></td></tr></tbody></table></figure>

<h2 id="6-4、切换用户"><a href="#6-4、切换用户" class="headerlink" title="6.4、切换用户"></a>6.4、切换用户</h2><p><code>su 用户名</code></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@--- home]# su xiaotest   # root用户切换到xiaotest用户</span><br><span class="line">[xiaotest@--- home]$ exit      # 退出当前用户，回到root用户</span><br><span class="line">exit</span><br><span class="line">[root@--- home]#</span><br></pre></td></tr></tbody></table></figure>

<h2 id="6-5、修改阿里云服务器主机名"><a href="#6-5、修改阿里云服务器主机名" class="headerlink" title="6.5、修改阿里云服务器主机名"></a>6.5、修改阿里云服务器主机名</h2><p>随机字符串 - 自定义主机名</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">hostname</span><br><span class="line">hostname xiao  # 修改主机名为xiao， 重连即可生效</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启主句，主机名就会变为随机字符串</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="6-6、密码设置"><a href="#6-6、密码设置" class="headerlink" title="6.6、密码设置"></a>6.6、密码设置</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">root 用户配置普通用户密码</span><br><span class="line">passwd xiaotest  # 给xiaotest用户设置登录密码</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重建连接，使用普通用户登录即可</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="6-7、锁定解锁用户"><a href="#6-7、锁定解锁用户" class="headerlink" title="6.7、锁定解锁用户"></a>6.7、锁定解锁用户</h2><p>只有root用户才可以操作</p>
<p>使用场景: 某员工辞职，或者合伙人设置</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">passwd -l xiaotest  # -l  lock 锁定用户，不能继续登录</span><br><span class="line">passwd -d xiaotest  # -d  删除密码，给用户输入空口令，没有密码也不能登录</span><br><span class="line"></span><br><span class="line">-u：解锁用户</span><br><span class="line">passwd -u xiaotest</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318550b16f2c2beb1e9059c.png"></p>
<h1 id="7、用户组管理"><a href="#7、用户组管理" class="headerlink" title="7、用户组管理"></a>7、用户组管理</h1><p><code>/etc/group</code> 文件</p>
<p>每个用户都有一个用户组，系统可以对一个用户组下面的所有用户进行集中管理（开发、测试、运维、root）</p>
<h2 id="7-1、创建用户组"><a href="#7-1、创建用户组" class="headerlink" title="7.1、创建用户组"></a>7.1、创建用户组</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">groupadd test01</span><br><span class="line"></span><br><span class="line">[root@xiao ~]# cat /etc/group</span><br><span class="line">root:x:0:</span><br><span class="line">bin:x:1:</span><br><span class="line">daemon:x:2:</span><br><span class="line">sys:x:3:</span><br><span class="line">adm:x:4:</span><br><span class="line">tty:x:5:</span><br><span class="line">disk:x:6:</span><br><span class="line">lp:x:7:</span><br><span class="line">mem:x:8:</span><br><span class="line">kmem:x:9:</span><br><span class="line">wheel:x:10:</span><br><span class="line">cdrom:x:11:</span><br><span class="line">mail:x:12:postfix</span><br><span class="line">man:x:15:</span><br><span class="line">dialout:x:18:</span><br><span class="line">floppy:x:19:</span><br><span class="line">games:x:20:</span><br><span class="line">tape:x:33:</span><br><span class="line">video:x:39:</span><br><span class="line">ftp:x:50:</span><br><span class="line">lock:x:54:</span><br><span class="line">audio:x:63:</span><br><span class="line">nobody:x:99:</span><br><span class="line">users:x:100:</span><br><span class="line">utmp:x:22:</span><br><span class="line">utempter:x:35:</span><br><span class="line">input:x:999:</span><br><span class="line">systemd-journal:x:190:</span><br><span class="line">systemd-network:x:192:</span><br><span class="line">dbus:x:81:</span><br><span class="line">polkitd:x:998:</span><br><span class="line">ssh_keys:x:997:</span><br><span class="line">sshd:x:74:</span><br><span class="line">postdrop:x:90:</span><br><span class="line">postfix:x:89:</span><br><span class="line">chrony:x:996:</span><br><span class="line">ntp:x:38:</span><br><span class="line">tcpdump:x:72:</span><br><span class="line">nscd:x:28:</span><br><span class="line">mysql:x:27:</span><br><span class="line">redis:x:995:</span><br><span class="line">cgred:x:994:</span><br><span class="line">docker:x:993:</span><br><span class="line">jenkins:x:992:</span><br><span class="line">tss:x:59:</span><br><span class="line">xiao:x:1000:</span><br><span class="line">xiaotest:x:1001:</span><br><span class="line">allblue:x:1002:</span><br><span class="line">test01:x:1003:</span><br><span class="line">test02:x:520:      # 通过使用 -g 参数制定id</span><br><span class="line">dev:x:1003:dev01   # dev组 该组下有dev01用户 新建用户是通过-G参数指定</span><br><span class="line">dev01:x:1004:</span><br><span class="line">[root@xiao ~]#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过使用 -g 参数指定id</span><br><span class="line">groupadd -g 520 test02</span><br></pre></td></tr></tbody></table></figure>

<h2 id="7-2、删除用户组"><a href="#7-2、删除用户组" class="headerlink" title="7.2、删除用户组"></a>7.2、删除用户组</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">groupdel test01</span><br></pre></td></tr></tbody></table></figure>

<h2 id="7-3、修改用户组"><a href="#7-3、修改用户组" class="headerlink" title="7.3、修改用户组"></a>7.3、修改用户组</h2><p>修改权限信息和名字</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">-g 修改id</span><br><span class="line">-n 修改名字</span><br><span class="line">groupmod -g 123 test01</span><br><span class="line">groupmod -n newtest01 test01</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="7-4、切换用户组"><a href="#7-4、切换用户组" class="headerlink" title="7.4、切换用户组"></a>7.4、切换用户组</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录当前用户 xiaotest</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">newgrp root</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="7-5、用户密码"><a href="#7-5、用户密码" class="headerlink" title="7.5、用户密码"></a>7.5、用户密码</h2><p><code>/etc/shadow</code>文件下</p>
<p>密码已经加密</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">allblue:$6$hSPupMOZ$WMbjL2pn8bhSkiD7NicH6sDAJYfEKnU3ofylMuOrSMuqqt/i/wirkCwbinA0VjhXBTExmSSPdFb6LPpLRN3hS.:18917:0:99999:7:::</span><br></pre></td></tr></tbody></table></figure>

<h1 id="8、磁盘管理"><a href="#8、磁盘管理" class="headerlink" title="8、磁盘管理"></a>8、磁盘管理</h1><p><code>du - disk usage</code></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">df  查看系统整体磁盘的使用量</span><br><span class="line">df -h 以兆(m)为单位显示</span><br><span class="line"></span><br><span class="line">du  查看当前磁盘的空间使用量</span><br><span class="line">du -a # 查看全部文件，包括隐藏文件和子文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看根目录下每个目录多占用的容量</span></span><br><span class="line">du -sm /*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">寻找当前目录，哪个文件夹占用空间最大</span></span><br><span class="line">du -h --max-depth=1</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318551816f2c2beb1e916e3.png"></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318552816f2c2beb1e92b24.png"></p>
<h2 id="8-1、释放空间"><a href="#8-1、释放空间" class="headerlink" title="8.1、释放空间"></a>8.1、释放空间</h2><p>使用 <code>du -h --max-depth=1</code>  命令查找大文件</p>
<h3 id="x2F-var-x2F-log-x2F-journal-x2F-垃圾日志清理"><a href="#x2F-var-x2F-log-x2F-journal-x2F-垃圾日志清理" class="headerlink" title="/var/log/journal/ 垃圾日志清理"></a><strong>/var/log/journal/ 垃圾日志清理</strong></h3><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">// <span class="number">1</span>. 只保留近一周的日志</span><br><span class="line">journalctl <span class="literal">--vacuum-time</span>=<span class="number">1</span>w</span><br><span class="line"></span><br><span class="line">// <span class="number">2</span>. 只保留<span class="number">500</span>MB的日志</span><br><span class="line">journalctl <span class="literal">--vacuum-size</span>=<span class="number">500</span>M</span><br></pre></td></tr></tbody></table></figure>

<h1 id="9、进程管理"><a href="#9、进程管理" class="headerlink" title="9、进程管理"></a>9、进程管理</h1><ol>
<li><p>Linux中每一个程序都有一个自己的进程，每一个进程都有一个id</p>
</li>
<li><p>每一个进程都会有一个父进程</p>
</li>
<li><p>进程有两种存在方式：前台、后台</p>
</li>
<li><p>一般服务都是后台运行的，程序都是是前台运行的</p>
</li>
</ol>
<h2 id="9-1、ps-aux"><a href="#9-1、ps-aux" class="headerlink" title="9.1、ps -aux"></a>9.1、ps -aux</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ps   # 查看当前系统中正在执行的各种进程的信息</span><br><span class="line"></span><br><span class="line">-a # 显示当前终端运行的所有进程信息</span><br><span class="line">-u # 以用户的信息显示进程</span><br><span class="line">-x # 显示后台运行进程的参数 启动进程时所携带的参数</span><br><span class="line"></span><br><span class="line">| # 管道符</span><br><span class="line">A | B  # A、B命令，A命令的结果作为输出传递给B命令</span><br><span class="line">grep # 查看文件中复合条件的字符串</span><br><span class="line"></span><br><span class="line">ps -aux|grep nginx   # 查看nginx的进程信息</span><br><span class="line">[root@xiao composetest]# ps -aux|grep nginx</span><br><span class="line">root     15986  0.0  0.0 112712   960 pts/0    S+   19:29   0:00 grep --color=auto nginx</span><br><span class="line">root     19664  0.0  0.0  45940  1168 ?        Ss   Oct06   0:00 nginx: master process /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line">nobody   19668  0.0  0.1  46928  3248 ?        S    Oct06   1:52 nginx: worker process</span><br><span class="line">[root@xiao composetest]#</span><br><span class="line"></span><br><span class="line">ps -aux|grep mongo   # 查看mongo的进程信息</span><br><span class="line">root     16035  0.0  0.0 112712   956 pts/0    S+   19:29   0:00 grep --color=auto mongo</span><br><span class="line">root     19440  0.4  5.3 1635344 101348 ?      SLl  Sep04 308:50 mongod --config /usr/local/mongodb/etc/mongodb.conf</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p>UID    //用户ID、但输出的是用户名</p>
</li>
<li><p>PID    //进程的ID</p>
</li>
<li><p>PPID    //父进程ID</p>
</li>
<li><p>C      //进程占用CPU的百分比</p>
</li>
<li><p>STIME  //进程启动到现在的时间</p>
</li>
<li><p>TTY    //该进程在那个终端上运行，若与终端无关，则显示? 若为pts/0等，则表示由网络连接主机进程。</p>
</li>
<li><p>CMD    //命令的名称和参数</p>
</li>
</ul>
<h2 id="9-2、ps-ef-可以查看到父进程的信息"><a href="#9-2、ps-ef-可以查看到父进程的信息" class="headerlink" title="9.2、ps -ef 可以查看到父进程的信息"></a>9.2、ps -ef 可以查看到父进程的信息</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ps -ef|grep mysql</span><br></pre></td></tr></tbody></table></figure>

<h2 id="9-3、进程树（目录树）"><a href="#9-3、进程树（目录树）" class="headerlink" title="9.3、进程树（目录树）"></a>9.3、进程树（目录树）</h2><p>看父进程可以通过目录树来查看</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">pstree</span><br><span class="line">-p # 显示父id (PPID)</span><br><span class="line">-u # 显示用户组</span><br><span class="line"></span><br><span class="line">pstree -pu</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318553416f2c2beb1e938f0.png"></p>
<h2 id="9-4、top命令"><a href="#9-4、top命令" class="headerlink" title="9.4、top命令"></a>9.4、top命令</h2><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318554716f2c2beb1e94e0b.png"></p>
<h2 id="9-5、结束进程"><a href="#9-5、结束进程" class="headerlink" title="9.5、结束进程"></a>9.5、结束进程</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">kill pid # 终止进程</span><br><span class="line">kill -9 pid # 强制终止进程</span><br></pre></td></tr></tbody></table></figure>

<h2 id="9-6、nohup-后台运行进程"><a href="#9-6、nohup-后台运行进程" class="headerlink" title="9.6、nohup 后台运行进程"></a>9.6、nohup 后台运行进程</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">nohup java -jar jenkins.war &amp;</span><br></pre></td></tr></tbody></table></figure>

<h1 id="10、环境安装"><a href="#10、环境安装" class="headerlink" title="10、环境安装"></a>10、环境安装</h1><p>三种方式：</p>
<ul>
<li><p>rpm</p>
</li>
<li><p>解压缩</p>
</li>
<li><p>yum在线安装</p>
</li>
</ul>
<h1 id="11、防火墙"><a href="#11、防火墙" class="headerlink" title="11、防火墙"></a>11、防火墙</h1><figure class="highlight brainfuck"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">systemctl status firewalld 查看firewalld状态</span></span><br><span class="line"><span class="comment">systemctl</span></span><br><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span></span><br><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">--</span><span class="comment">list</span><span class="literal">-</span><span class="comment">all</span></span><br><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">--</span><span class="comment">add</span><span class="literal">-</span><span class="comment">port=8080/tcp</span> <span class="literal">--</span><span class="comment">premanent</span></span><br><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">--</span><span class="comment">reload</span></span><br></pre></td></tr></tbody></table></figure>

<p>👉 阿里云服务器配置安全组</p>
<hr>
<p>🎈🎈🎈</p>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
</body></html>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB数据库新手入门</title>
    <url>/posts/87748764.html</url>
    <content><![CDATA[<html><head></head><body><h1 id="windows安装mongodb-5-0-2"><a href="#windows安装mongodb-5-0-2" class="headerlink" title="windows安装mongodb   5.0.2"></a>windows安装mongodb   5.0.2</h1><p>官网下载<code>msi</code>文件</p>
<p>自定义安装到 <code>d:/apptoools/mongodb/</code></p>
<p>不要勾选<code>mongodb compass</code></p>
<p>报错：<code>verify that you have sufficient privileges to install system services</code><br>权限不足</p>
<p><strong>解决办法:</strong></p>
<p>1.默认C盘安装路径</p>
<p>2.其它磁盘根目录，<code>D:/mongodb/</code></p>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>bin目录添加到path环境变量里面</p>
<p>创建数据库存储文件 <code>D:/mongoDatabase/</code></p>
<p>指定数据库存储文件<br><code>mongod --dbpath D:/mongoDatabase/</code></p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6360945b16f2c2beb1c47840.jpg"></p>
<p><code>mongo</code></p>
<p>或者指定连接本地数据库  <code>mongo 127.0.0.1:27017</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">show dbs</span><br><span class="line">use admin</span><br><span class="line">show collections</span><br><span class="line">db.product.insert({<span class="string">'title'</span>: <span class="string">'aaa'</span>})</span><br><span class="line">db.product.drop() <span class="comment"># 删除集合</span></span><br><span class="line">db.dropDatabase() <span class="comment"># 删除数据库</span></span><br><span class="line">db.createCollection(<span class="string">"runoob"</span>)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="使用SQL命令强迫关闭mongo服务"><a href="#使用SQL命令强迫关闭mongo服务" class="headerlink" title="使用SQL命令强迫关闭mongo服务"></a>使用SQL命令强迫关闭mongo服务</h2><figure class="highlight stata"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> admin</span><br><span class="line"><span class="keyword">db</span>.shutdownServer()</span><br></pre></td></tr></tbody></table></figure>

<h2 id="创建管理员"><a href="#创建管理员" class="headerlink" title="创建管理员:"></a>创建管理员:</h2><figure class="highlight nsis"><table><tbody><tr><td class="code"><pre><span class="line">use <span class="literal">admin</span></span><br><span class="line"><span class="literal">show</span> users</span><br><span class="line">db.createUser({<span class="literal">user</span>:<span class="string">"root"</span>,pwd:<span class="string">"123456"</span>,roles:[<span class="string">"root"</span>]}) <span class="comment"># 添加管理员</span></span><br><span class="line"></span><br><span class="line">db.dropUser(<span class="string">'grade'</span>) <span class="comment"># 删除用户</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="指定数据库创建用户"><a href="#指定数据库创建用户" class="headerlink" title="指定数据库创建用户"></a>指定数据库创建用户</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">use grade</span><br><span class="line">db.createUser({user:<span class="string">"gradeAdmin"</span>,<span class="built_in">pwd</span>:<span class="string">"123456"</span>,roles:[{role: <span class="string">'dbOwner'</span>,db: <span class="string">'grade'</span>}]})</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Mongodb数据库角色"><a href="#Mongodb数据库角色" class="headerlink" title="Mongodb数据库角色"></a>Mongodb数据库角色</h2><ol>
<li>数据库用户角色:</li>
</ol>
<p>read、 readWrite</p>
<ol start="2">
<li>数据库管理角色:</li>
</ol>
<p> dbAdmin、 dbOwner、 userAdmin</p>
<ol start="3">
<li>集群管理角色:</li>
</ol>
<p>clusterAdmin, clusterManager, clusterMonitor, hostManager</p>
<ol start="4">
<li>备份恢复角色:</li>
</ol>
<p>backup、 restore;</p>
<ol start="5">
<li>所有数据库角色:</li>
</ol>
<p>readAnyDatabase, readWriteAnyDatabase、 userAdminAnyDatabase, dbAdminAnyDatabase</p>
<ol start="6">
<li>超级用户角色:</li>
</ol>
<p>root</p>
<p><strong>开启认证之后连接数据库：</strong></p>
<figure class="highlight 1c"><table><tbody><tr><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.auth('root','<span class="number">123456</span>')</span><br></pre></td></tr></tbody></table></figure>

<h2 id="nodejs连接数据库"><a href="#nodejs连接数据库" class="headerlink" title="nodejs连接数据库"></a>nodejs连接数据库</h2><h3 id="通过client对象连接到MongoDB"><a href="#通过client对象连接到MongoDB" class="headerlink" title="通过client对象连接到MongoDB"></a>通过client对象连接到MongoDB</h3><p>通过实例化一个<code>MongoClient</code>对象连接<code>MongoDB</code>数据库是最常用也是最佳的方式。</p>
<p>创建MongoClient对象实例的语法：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">MongoClient</span>( server, options );</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p>server : 一个serverd对象；</p>
</li>
<li><p>options : 数据库连接选项；</p>
</li>
</ul>
<h3 id="通过一个连接字符串连接到MongoDB"><a href="#通过一个连接字符串连接到MongoDB" class="headerlink" title="通过一个连接字符串连接到MongoDB"></a>通过一个连接字符串连接到MongoDB</h3><p>调用<code>MongoClient</code>类的<code>connect()</code>方法</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">MongoClient</span>.<span class="title function_">connect</span>(connString, options, callback)</span><br></pre></td></tr></tbody></table></figure>

<p><code>connString：mongodb://username:password@host:port/database?opations</code></p>
<h2 id="nosqlbooster连接mongodb"><a href="#nosqlbooster连接mongodb" class="headerlink" title="nosqlbooster连接mongodb"></a>nosqlbooster连接mongodb</h2><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6360951416f2c2beb1c60541.jpg"></p>
<h1 id="linux-安装mongodb，配置以及使用"><a href="#linux-安装mongodb，配置以及使用" class="headerlink" title="linux 安装mongodb，配置以及使用"></a>linux 安装mongodb，配置以及使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官网下载<code>tar</code>包，上传到服务器目录: <code>/usr/local/mongodb</code><br>解压，<code>tar -zxvf  mongodb-linux-x86_64-xxx</code> 并重命名</p>
<h2 id="创建mongodb数据存储文件和日志文件"><a href="#创建mongodb数据存储文件和日志文件" class="headerlink" title="创建mongodb数据存储文件和日志文件"></a>创建mongodb数据存储文件和日志文件</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/mongodb/</span><br><span class="line"><span class="built_in">mkdir</span> data</span><br><span class="line"><span class="built_in">mkdir</span> logs</span><br><span class="line"><span class="built_in">cd</span> ./logs</span><br><span class="line"><span class="built_in">touch</span> mongodb.log</span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line"><span class="built_in">mkdir</span> etc</span><br><span class="line"><span class="built_in">cd</span> etc</span><br><span class="line"><span class="built_in">touch</span> mongodb.conf</span><br></pre></td></tr></tbody></table></figure>

<h2 id="mongodb-conf配置文件："><a href="#mongodb-conf配置文件：" class="headerlink" title="mongodb.conf配置文件："></a>mongodb.conf配置文件：</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#数据库路径</span></span><br><span class="line">dbpath=/usr/local/mongodb/data</span><br><span class="line"><span class="comment">#日志输出文件路径</span></span><br><span class="line">logpath=/usr/local/mongodb/logs/mongodb.log</span><br><span class="line"><span class="comment">#错误日志采用追加模式</span></span><br><span class="line">logappend=<span class="literal">true</span></span><br><span class="line"><span class="comment">#启用日志文件，默认启用</span></span><br><span class="line">journal=<span class="literal">true</span></span><br><span class="line"><span class="comment">#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</span></span><br><span class="line">quiet=<span class="literal">true</span></span><br><span class="line"><span class="comment">#端口号 默认为27017</span></span><br><span class="line">port=27017</span><br><span class="line"><span class="comment">#允许远程访问</span></span><br><span class="line">bind_ip=0.0.0.0</span><br><span class="line"><span class="comment">#开启子进程</span></span><br><span class="line">fork=<span class="literal">true</span></span><br><span class="line"><span class="comment">#开启认证，必选先添加用户，先不开启（不用验证账号密码）</span></span><br><span class="line"><span class="comment">#auth=true</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="配置环境变量-1"><a href="#配置环境变量-1" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><ol>
<li><p><code>vi /etc/profile</code></p>
</li>
<li><p>写入： <code>export PATH=/usr/local/mongodb/bin:$PATH</code><br>保存退出</p>
</li>
<li><p>执行 <code>source /etc/profile</code></p>
</li>
</ol>
<h2 id="启动mongodb服务"><a href="#启动mongodb服务" class="headerlink" title="启动mongodb服务"></a>启动mongodb服务</h2><ol>
<li>方式一</li>
</ol>
<p>bin目录下执行：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">./mongod --config /usr/local/mongodb/etc/mongodb.conf</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>方式二</li>
</ol>
<p>把上面的命令写成脚本文件，我把它放到 <code>~/restartMongo</code> 中，如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">vim restartMongo</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入：</span></span><br><span class="line">mongod --config /usr/local/mongodb/etc/mongodb.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行脚本启动</span></span><br><span class="line">./restartMongo</span><br></pre></td></tr></tbody></table></figure>

<h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2><p><code>mongodb</code>默认端口号<code>27017</code></p>
<p>执行命令查看：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">netstat -ltunp</span><br></pre></td></tr></tbody></table></figure>
<p>或者使用如下命令</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">netstat -lanp | grep <span class="string">"27017"</span></span><br></pre></td></tr></tbody></table></figure>

<p>启动之后就可以连接<code>mongo server</code>了</p>
<h2 id="操作mongo数据库"><a href="#操作mongo数据库" class="headerlink" title="操作mongo数据库"></a>操作mongo数据库</h2><p><code>mongo</code> (或者指定ip:port： <code>mongo ip:port</code>)</p>
<h2 id="admin数据库添加用户、安全认证"><a href="#admin数据库添加用户、安全认证" class="headerlink" title="admin数据库添加用户、安全认证"></a>admin数据库添加用户、安全认证</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">use admin</span><br><span class="line">show <span class="built_in">users</span></span><br><span class="line">db.createUser({user:<span class="string">"root"</span>,<span class="built_in">pwd</span>:<span class="string">"123456"</span>,roles:[{role:<span class="string">"root"</span>,db:<span class="string">"admin"</span>}]})</span><br><span class="line">show <span class="built_in">users</span></span><br><span class="line">关闭mongo server</span><br><span class="line">db.shutdownServer()</span><br></pre></td></tr></tbody></table></figure>

<h2 id="启用安全认证"><a href="#启用安全认证" class="headerlink" title="启用安全认证"></a>启用安全认证</h2><ol>
<li>修改<code>etc/mongodb.conf</code></li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#开启认证，必选先添加用户</span></span><br><span class="line">auth=<span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>重新开启<code>mongo server</code></li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mongod --config /usr/local/mongodb/etc/mongodb.conf</span><br></pre></td></tr></tbody></table></figure>

<p>此时<code>show dbs</code>查看不到任何数据库</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.auth(<span class="string">'root'</span>, <span class="string">'123456'</span>) <span class="comment"># 输出1标记访问数据库成功</span></span><br><span class="line">show dbs</span><br></pre></td></tr></tbody></table></figure>

<h2 id="客户端链接"><a href="#客户端链接" class="headerlink" title="客户端链接"></a>客户端链接</h2><p>开放防火墙端口号，不再赘述。</p>
<h2 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h2><p>配置开机启动脚本文件： <code>/etc/rc.d/init.d/mongod</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">start</span></span>() {</span><br><span class="line">/usr/local/mongodb/bin/mongod --config /usr/local/mongodb/etc/mongodb.conf</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() {</span><br><span class="line">/usr/local/mongodb/bin/mongod --config /usr/local/mongodb/etc/mongodb.conf --shutdown</span><br><span class="line">}</span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">start</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">stop)</span><br><span class="line">stop</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">restart)</span><br><span class="line">stop</span><br><span class="line">start</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line">$<span class="string">"Usage: <span class="variable">$0</span> {start|stop|restart}"</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></tbody></table></figure>

<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端开发，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。数风流人物还看中国、看今朝、看你我。</p>
</body></html>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native环境配置、初始化项目、打包安装到手机，以及开发小知识</title>
    <url>/posts/252268106.html</url>
    <content><![CDATA[<html><head></head><body><h1 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h1><p>环境：Win10 + Android</p>
<p>已经在Windows电脑上安装好 <a href="https://nodejs.org/en/">Node</a>（v14+）、Git、Yarn、<br><a href="https://www.oracle.com/java/technologies/downloads/#java11">JDK</a>(v11)</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">javac -version</span><br><span class="line">javac 11.0.15.1</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">node -v</span><br><span class="line">v16.14.1</span><br></pre></td></tr></tbody></table></figure>
<p>👉 <a href="https://www.react-native.cn/docs/next/environment-setup">官方文档</a></p>
<h1 id="2、Android-Studio下载安装"><a href="#2、Android-Studio下载安装" class="headerlink" title="2、Android Studio下载安装"></a>2、Android Studio下载安装</h1><ul>
<li><a href="https://developer.android.google.cn/studio/">下载地址</a></li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631855c416f2c2beb1e9e38c.png"></p>
<h1 id="3、Android-SDK-下载安装"><a href="#3、Android-SDK-下载安装" class="headerlink" title="3、Android SDK 下载安装"></a>3、Android SDK 下载安装</h1><ul>
<li>安装 android sdk</li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318562016f2c2beb1ea4698.png"></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318567d16f2c2beb1eab904.png"></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318569116f2c2beb1eacfb0.png"></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631856a016f2c2beb1eae08f.png"></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631856be16f2c2beb1eb068f.png"></p>
<h2 id="3-1、环境变量配置"><a href="#3-1、环境变量配置" class="headerlink" title="3.1、环境变量配置"></a>3.1、环境变量配置</h2><ul>
<li><p>配置系统变量<br><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631856cf16f2c2beb1eb1c1c.png"></p>
</li>
<li><p>Path 配置：</p>
</li>
</ul>
<figure class="highlight haml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">%<span class="selector-tag">ANDROID_SDK_ROOT</span></span>%</span><br><span class="line"><span class="tag">%<span class="selector-tag">ANDROID_SDK_ROOT</span></span>%\platform-tools</span><br><span class="line"><span class="tag">%<span class="selector-tag">ANDROID_SDK_ROOT</span></span>%\emulator</span><br><span class="line"><span class="tag">%<span class="selector-tag">ANDROID_SDK_ROOT</span></span>%\tools</span><br><span class="line"><span class="tag">%<span class="selector-tag">ANDROID_SDK_ROOT</span></span>%\tools\bin</span><br></pre></td></tr></tbody></table></figure>

<h1 id="4、Scrcpy-手机模拟器下载安装使用"><a href="#4、Scrcpy-手机模拟器下载安装使用" class="headerlink" title="4、Scrcpy 手机模拟器下载安装使用"></a>4、Scrcpy 手机模拟器下载安装使用</h1><ul>
<li><a href="https://github.com/Genymobile/scrcpy">下载地址</a></li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631856e916f2c2beb1eb3879.png"></p>
<p>下载zip文件，解压，双击运行 <code>scrcpy.exe</code> 可执行文件即可在电脑上投影手机屏幕，如下图👇</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631856fb16f2c2beb1eb4fb0.png"></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318571216f2c2beb1eb7443.png" alt="image.png"></p>
<blockquote>
<p>运行可执行文件之前，使用<strong>数据线</strong>连接Android手机，进行开发者选项设置（不同的手机进入开发者模式略有差异，自行搜索，我用的是华为手机）</p>
</blockquote>
<ul>
<li>电脑端查看连接设备<br><code>adb devices</code></li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">8TFDU18719000649        device</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>adb 命令，在下载 <code>scrcpy</code> 的时候已经内置了</p>
</blockquote>
<h1 id="5、安装-React-Native"><a href="#5、安装-React-Native" class="headerlink" title="5、安装 React Native"></a>5、安装 React Native</h1><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm i react-native-cli -g</span><br><span class="line"></span><br><span class="line">$ react-native -v</span><br><span class="line">react-native-cli: 2.0.1</span><br><span class="line">react-native: n/a - not inside a React Native project directory</span><br></pre></td></tr></tbody></table></figure>

<h1 id="6、初始化项目"><a href="#6、初始化项目" class="headerlink" title="6、初始化项目"></a>6、初始化项目</h1><p>进入到自己的工作目录，执行下面的命令创建 react native 项目</p>
<figure class="highlight actionscript"><table><tbody><tr><td class="code"><pre><span class="line">npx react-<span class="keyword">native</span> init AwesomeProject</span><br></pre></td></tr></tbody></table></figure>

<h1 id="7、运行项目安装软件到安卓机"><a href="#7、运行项目安装软件到安卓机" class="headerlink" title="7、运行项目安装软件到安卓机"></a>7、运行项目安装软件到安卓机</h1><h2 id="7-1、先用数据线连接手机和电脑，运行scrcpy-软件"><a href="#7-1、先用数据线连接手机和电脑，运行scrcpy-软件" class="headerlink" title="7.1、先用数据线连接手机和电脑，运行scrcpy 软件"></a>7.1、先用数据线连接手机和电脑，运行scrcpy 软件</h2><p>开发者选项配置修改，最终实现在电脑上可以投屏手机，并可以在电脑上操控手机</p>
<h2 id="7-2、打开-android-studio-编辑器，运行项目"><a href="#7-2、打开-android-studio-编辑器，运行项目" class="headerlink" title="7.2、打开 android studio 编辑器，运行项目"></a>7.2、打开 android studio 编辑器，运行项目</h2><figure class="highlight asciidoc"><table><tbody><tr><td class="code"><pre><span class="line">npm run android</span><br><span class="line"></span><br><span class="line"><span class="section">or</span></span><br><span class="line"><span class="section">-------------------</span></span><br><span class="line">cd AwesomeProject</span><br><span class="line">yarn android</span><br><span class="line"># 或者</span><br><span class="line">yarn react-native run-android</span><br></pre></td></tr></tbody></table></figure>

<p>运行的时候会在手机上弹窗 “是否统一安装软件”之类的提示，点击同意即可</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318572616f2c2beb1eb9161.png"></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318573616f2c2beb1eba516.png"></p>
<h2 id="7-3、adb-reverse-命令使用"><a href="#7-3、adb-reverse-命令使用" class="headerlink" title="7.3、adb reverse  命令使用"></a>7.3、adb reverse  命令使用</h2><p><a href="https://developer.android.google.cn/studio/command-line/adb?hl=zh-cn">adb 文档</a></p>
<h4 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h4><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318574916f2c2beb1ebbc88.png"></p>
<p>猜测是多设备连接受影响了，可以尝试重启手机解决<br>也可以尝试如下步骤： 启停 adb 服务器</p>
<blockquote>
<p>在某些情况下，您可能需要终止 adb 服务器进程，然后重启以解决问题（例如，如果 adb 不响应命令）。</p>
<p>如需停止 adb 服务器，请使用 adb kill-server 命令。然后，您可以通过发出其他任何 adb 命令来重启服务器。</p>
</blockquote>
<figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">adb kill-<span class="keyword">server</span></span><br><span class="line">adb <span class="keyword">start</span>-<span class="keyword">server</span></span><br><span class="line">adb <span class="keyword">reverse</span> tcp:<span class="number">8081</span> tcp:<span class="number">8081</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">adb</span> reverse tcp:<span class="number">8081</span> tcp:<span class="number">8081</span></span><br></pre></td></tr></tbody></table></figure>

<p>这条命令的意思是，Android允许我们通过ADB，把Android上的某个端口映射到电脑（adb forward），或者把电脑的某个端口映射到Android系统（adb reverse），在这里假设电脑上开启的服务，监听的端口为8081。Android手机通过USB连接电脑后，在终端直接执行<code>adb reverse tcp:8081 tcp:8081</code>，然后在手机中访问<code>127.0.0.1:8081</code>，就可以访问到电脑上启动的服务了。</p>
<p>注意：</p>
<ol>
<li>必须是在连接数据线usb的前提下才能使用该方案进行代码调试。</li>
<li>(Android 5.0 及以上)使用 adb reverse 命令，这个选项只能在 5.0 以上版本(API 21+)的安卓设备上使用。</li>
</ol>
<h1 id="8、react-native开发小知识"><a href="#8、react-native开发小知识" class="headerlink" title="8、react-native开发小知识"></a>8、react-native开发小知识</h1><h2 id="8-1、vscode-上代码飘红"><a href="#8-1、vscode-上代码飘红" class="headerlink" title="8.1、vscode 上代码飘红"></a>8.1、vscode 上代码飘红</h2><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318575a16f2c2beb1ebd220.png"></p>
<ul>
<li>问题原因：</li>
</ul>
<p>VScode是默认解析ts的，但是不会默认识别 <a href="https://flow.org/en/docs/react/"><code>Flow</code></a>(<strong>静态类型检测工具</strong>)的语法，所以这种的代码会被解析成ts语法。</p>
<ul>
<li>解决方法：<br>快捷键<code>Ctrl+Shift+P</code>，输入<code>setting.json</code>，选择 首选项:打开设置(json)。</li>
</ul>
<p><code>settings.json</code></p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> <span class="string">"import type"</span> 声明只能在 TypeScript 文件中使用。</span><br><span class="line"><span class="string">"javascript.validate.enable"</span>: false,</span><br></pre></td></tr></tbody></table></figure>

<h2 id="8-2、npm-run-android-每次都需要在手机上重新安装软件包"><a href="#8-2、npm-run-android-每次都需要在手机上重新安装软件包" class="headerlink" title="8.2、npm run android 每次都需要在手机上重新安装软件包"></a>8.2、npm run android 每次都需要在手机上重新安装软件包</h2><p>开发者模式 -&gt; USB调试 -&gt; 监控ADB安装应用 -&gt; 关闭, 即可解决。</p>
<h2 id="8-3、本地开发启动多个项目"><a href="#8-3、本地开发启动多个项目" class="headerlink" title="8.3、本地开发启动多个项目"></a>8.3、本地开发启动多个项目</h2><p>默认端口号是8081，通过指定不同的端口号来启动。</p>
<figure class="highlight livecodeserver"><table><tbody><tr><td class="code"><pre><span class="line">react-native <span class="built_in">start</span> <span class="comment">--port=8082</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="8-4、修改软件包名称"><a href="#8-4、修改软件包名称" class="headerlink" title="8.4、修改软件包名称"></a>8.4、修改软件包名称</h2><ol>
<li>修改配置文件<br>Android<br>修改配置文件里的 <code>app_name</code> 即可，重新 <code>yarn android</code> ，发现手机上软件的名称已修改成功。</li>
</ol>
<p>文件： <code>android\app\src\main\res\values\strings.xml</code></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>远点<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>react-native-rename 插件修改</li>
</ol>
<p>通过插件修改名字，必须是 使用 <code>react-native init xxx</code> 创建的项目</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm install react-native-rename -g</span><br><span class="line">or</span><br><span class="line">yarn global add react-native-rename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目根目录执行命令</span></span><br><span class="line">npx react-native-rename &lt;newName&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>修改完成。</p>
<p>本篇完！后面继续分享如何调试react native项目。</p>
<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native项目设置路径别名</title>
    <url>/posts/984917644.html</url>
    <content><![CDATA[<html><head></head><body><p>没有设置路径别名之前代码是这样的：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { px2dp } <span class="keyword">from</span> <span class="string">'../../utils/screenKits'</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>路径相当冗长，看着就头疼。增加了路径别名之后，变成这样</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { px2dp } <span class="keyword">from</span> <span class="string">'~/utils/screenKits'</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>心里清爽多了！<br>具体操作见下文，实操性强！</p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>这里我选用 <a href="https://github.com/entwicklerstube/babel-plugin-root-import"><strong>babel-plugin-root-import</strong></a>插件，主要是方便，不需要再为了 <code>eslint</code> 不识别 ‘@’ 而增加配置。</p>
<p>这个<a href="https://links.jianshu.com/go?to=https://github.com/tleunen/babel-plugin-module-resolver">babel-plugin-module-resolver</a>插件，也可以，但是需要处理 eslint 的配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yarn add babel-plugin-root-import --dev</span><br></pre></td></tr></tbody></table></figure>

<h2 id="修改babel-config-js"><a href="#修改babel-config-js" class="headerlink" title="修改babel.config.js"></a>修改babel.config.js</h2><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">'module:metro-react-native-babel-preset'</span>],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [<span class="string">'@babel/plugin-proposal-decorators'</span>, { <span class="attr">legacy</span>: <span class="literal">true</span> }], <span class="comment">// mbox</span></span><br><span class="line">    <span class="comment">// ['react-native-reanimated/plugin'],</span></span><br><span class="line">    [</span><br><span class="line">      <span class="string">'babel-plugin-root-import'</span>,</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">paths</span>: [</span><br><span class="line">          {</span><br><span class="line">            <span class="attr">rootPathSuffix</span>: <span class="string">'./src'</span>,</span><br><span class="line">            <span class="attr">rootPathPrefix</span>: <span class="string">'~/'</span>, <span class="comment">// 使用 ~/  代替 ./src (~指向的就是src目录)</span></span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            <span class="attr">rootPathSuffix</span>: <span class="string">'./src/utils'</span>,</span><br><span class="line">            <span class="attr">rootPathPrefix</span>: <span class="string">'!/'</span>,</span><br><span class="line">          },</span><br><span class="line">        ],</span><br><span class="line">      },</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="修改import路径测试"><a href="#修改import路径测试" class="headerlink" title="修改import路径测试"></a>修改import路径测试</h2><h2 id="清除rn缓存并重新启动项目"><a href="#清除rn缓存并重新启动项目" class="headerlink" title="清除rn缓存并重新启动项目"></a>清除rn缓存并重新启动项目</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yarn clear-run</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"scripts"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"android"</span><span class="punctuation">:</span> <span class="string">"react-native run-android"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"ios"</span><span class="punctuation">:</span> <span class="string">"react-native run-ios"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"start"</span><span class="punctuation">:</span> <span class="string">"react-native start"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"test"</span><span class="punctuation">:</span> <span class="string">"jest"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"lint"</span><span class="punctuation">:</span> <span class="string">"npx eslint --ext .js,.jsx,.ts,.tsx ./src"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"lint:fix"</span><span class="punctuation">:</span> <span class="string">"npx eslint --fix ."</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"check"</span><span class="punctuation">:</span> <span class="string">"lint-staged"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"format"</span><span class="punctuation">:</span> <span class="string">"prettier --write 'src/**/*.js'"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"prettier"</span><span class="punctuation">:</span> <span class="string">"npx prettier --write ."</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"prepare"</span><span class="punctuation">:</span> <span class="string">"husky install"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"clear"</span><span class="punctuation">:</span> <span class="string">"yarn cache clean"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"clear-run"</span><span class="punctuation">:</span> <span class="string">"react-native start --reset-cache"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"del"</span><span class="punctuation">:</span> <span class="string">"rimraf node_modules yarn.lock"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure>

<p>可以看到项目可以正常启动、正常运行</p>
<h2 id="👉修复函数跳转到定义功能"><a href="#👉修复函数跳转到定义功能" class="headerlink" title="👉修复函数跳转到定义功能"></a>👉修复函数跳转到定义功能</h2><p>配置vscode： <a href="https://code.visualstudio.com/docs/languages/jsconfig">https://code.visualstudio.com/docs/languages/jsconfig</a><br>再项目根目录增加 <code>jsconfig.json</code> 文件</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="string">"compilerOptions"</span>: {</span><br><span class="line">    <span class="string">"baseUrl"</span>: <span class="string">"."</span>, <span class="comment">// 基础目录</span></span><br><span class="line">    <span class="string">"paths"</span>: { <span class="comment">//  指定相对于 baseUrl 选项计算的路径映射, 别名路径也可以跳转</span></span><br><span class="line">      <span class="string">"~/*"</span>: [</span><br><span class="line">        <span class="string">"src/*"</span></span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>这个配置是针对编辑器的，不用重启项目，配置即生效</strong></p>
<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a>☭</p>
<p>公众号：【看见另一种可能】</p>
</body></html>]]></content>
      <categories>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>V8中的快慢数组（附源码分析、图文更易理解😃）</title>
    <url>/posts/1787681656.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>接上一篇 <a href="https://juejin.cn/post/7125763016582234142">V8 中的快慢属性</a>，本篇分析V8 中的快慢数组，了解数组全填充还是带孔、快慢数组、快慢转化、动态扩缩容等等。其实很多语言底层都采用类似的处理方式，比如：Golang中切片的append操作就涉及扩容处理。</p>
</blockquote>
<p>🎁 D8调试工具使用请来<a href="https://juejin.cn/post/7126505899337711647">这里</a></p>
<h1 id="1、全填充-or-带孔"><a href="#1、全填充-or-带孔" class="headerlink" title="1、全填充 or 带孔"></a>1、全填充 or 带孔</h1><p>通过一个小李子，看一下什么是全填充数组(<code>Paked-Array</code>)，什么是带孔数组(<code>Holey-Array</code>)</p>
<p>前面还写了<strong>稀疏数组</strong>，稀疏数组更加具有业务应用性，清洗的是无意义的数据，可以对比带孔数组来分析一下，有兴趣请看👉 <a href="https://juejin.cn/post/7124557913921847327">稀疏数组——实现五子棋存盘和续上盘功能</a></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> o = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o[<span class="number">1</span>])          <span class="comment">// 'b'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> o[<span class="number">1</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o[<span class="number">1</span>])          <span class="comment">// undefined</span></span><br><span class="line">o.<span class="property">__proto__</span> = { <span class="number">1</span>: <span class="string">'B'</span> }</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o[<span class="number">0</span>])          <span class="comment">// 'a'</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o[<span class="number">1</span>])          <span class="comment">// 'B'   但如何确定要访问原型链？？🤔</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o[<span class="number">2</span>])          <span class="comment">// 'c'</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o[<span class="number">3</span>])          <span class="comment">// undefined</span></span><br></pre></td></tr></tbody></table></figure>

<p>如果一个数组中所有位置均有值，我们称之为<code>全填充</code>（<strong>Packed</strong>）数组；</p>
<p>若某些位置在初始化时未定义（如&nbsp;<code>const arr = [1, , 3]</code>&nbsp;中的 arr[1]），或定义后被删除（delete，如上述例子），称之为<code>带孔</code>（<strong>Holey</strong>）数组。</p>
<p>该例子在 V8 的访问可以通过下图解释：</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318579016f2c2beb1ec1125.png" alt="image.png"></p>
<p>一开始数组 o 是 packed 的，所以访问 o[1] 时可以直接获取值，而不需要访问原型。</p>
<p>而行 4：<code>delete o[1]</code>&nbsp;为数组引入了一个孔洞（<code>the_hole</code>），用于标记不存在的属性，同时又行 6 为 o 定义了原型上的 1 属性，当再次获取 o[1] 时会<strong>穿孔</strong>进而继续往原型链上查询。原型链上的查询是昂贵的，<em>可以根据是否有 the_hole 来降低这部分查询开销</em>。</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631857f616f2c2beb1ec80c6.png" alt="image.png"></p>
<h1 id="2、快慢数组"><a href="#2、快慢数组" class="headerlink" title="2、快慢数组"></a>2、快慢数组</h1><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr[<span class="number">1999</span>] = <span class="number">1999</span></span><br><span class="line"><span class="comment">// arr 会如何存储？</span></span><br></pre></td></tr></tbody></table></figure>

<p>这个例子中，在行 1 声明完毕后 arr 是一个全填充的数组，但在行 2 马上又定义索引 1999 处值为 1999，此时如果为 arr 创建一个长度为 2000 的完整数组来存储这样的稀疏数据将会非常占用内存，为了应对这种情况，V8 会将数组降级为<code>慢数组</code>，创建一个字典来存储<code>「键、值、描述符」</code>（<strong>key、value、descriptor</strong>） 三元组。这就是&nbsp;<code>Object.defineProperty(object, key, descriptor)</code>&nbsp;API 同样会做的事情。</p>
<blockquote>
<ol>
<li><p>鉴于我们没有办法在 JavaScript 的 API 层面让 V8 找到 HiddenClass 并存储对应的 descriptor 信息，所以当使用&nbsp;<code>Object.defineProperty</code>&nbsp;自定义 key、value、descriptor 时，V8 都会使用慢属性，对应到数组中就是慢数组。</p>
</li>
<li><p><code>Object.defineProperty</code>&nbsp;是 Vue 2 的核心 API，当对象或数组很庞大时，不可避免地导致访问速度下降，这是底层原理决定的。</p>
</li>
</ol>
</blockquote>
<p>那究竟什么是快数组和慢数组呢？我们看下V8底层对于数组的定义：👉 <a href="https://source.chromium.org/chromium/chromium/src/+/master:v8/src/objects/js-array.h">源代码：v8/src/objects/js-array.h</a></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318581016f2c2beb1ec9d8a.png" alt="image.png"></p>
<ul>
<li><p>快模式：数组实现的是 V8 里一个叫&nbsp;<code>FixedArray</code>&nbsp;的类，它在内存中是<strong>连续的空间</strong>，直接通过索引读写值，非常快。如果有 push 或 pop 操作，它会动态地扩容或收缩。</p>
</li>
<li><p>慢模式：如前文所介绍，V8 创建了一个字典（<code>HashTable</code>）来记录映射关系，其中索引的整数值即是字典的键。</p>
</li>
</ul>
<h2 id="为什么数组也是对象类型的？"><a href="#为什么数组也是对象类型的？" class="headerlink" title="为什么数组也是对象类型的？"></a>为什么数组也是对象类型的？</h2><p>在 V8 源码中清晰地表明，JSArray 继承自 JSObject，即数组是一个特殊的对象，而 JS 中所有非原始类型都是对象的实例，所以 JS 中数组可以存储多种类型的值。</p>
<p>数组内部也是用key-value的存储形式</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> testArr = [<span class="number">1</span>, <span class="string">"hello"</span>, <span class="literal">true</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}];</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318583516f2c2beb1ecca7c.png" alt="image.png"></p>
<h2 id="2-1、快数组何时转换为慢数组"><a href="#2-1、快数组何时转换为慢数组" class="headerlink" title="2.1、快数组何时转换为慢数组"></a>2.1、快数组何时转换为慢数组</h2><h3 id="1-、看一下源码先👇"><a href="#1-、看一下源码先👇" class="headerlink" title="(1)、看一下源码先👇"></a>(1)、看一下源码先👇</h3><ol>
<li><p>path:v8/src/objects/js-objects-inl.h</p>
<p> 快慢模式转化： <code>ShouldConvertToSlowElements</code></p>
</li>
</ol>
<figure class="highlight haxe"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// path:v8/src/objects/js-objects-inl.h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// If the fast-case backing storage takes up much more memory than a dictionary</span></span><br><span class="line"><span class="comment">// backing storage would, the object should have slow elements.</span></span><br><span class="line"><span class="comment">// static</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> bool ShouldConvertToSlowElements(uint32_t used_elements,</span><br><span class="line">                                               uint32_t <span class="keyword">new</span><span class="type">_capacity</span>) {</span><br><span class="line">  uint32_t size_threshold = NumberDictionary:<span class="type"></span>:kPreferFastElementsSizeFactor *</span><br><span class="line">                            NumberDictionary:<span class="type"></span>:ComputeCapacity(used_elements) *</span><br><span class="line">                            NumberDictionary:<span class="type"></span>:kEntrySize;</span><br><span class="line">  <span class="keyword">return</span> size_threshold &lt;= <span class="keyword">new</span><span class="type">_capacity</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> bool ShouldConvertToSlowElements(JSObject object,</span><br><span class="line">                                               uint32_t capacity,</span><br><span class="line">                                               uint32_t index,</span><br><span class="line">                                               uint32_t* <span class="keyword">new</span><span class="type">_capacity</span>) {</span><br><span class="line">  STATIC_ASSERT(JSObject:<span class="type"></span>:kMaxUncheckedOldFastElementsLength &lt;=</span><br><span class="line">                JSObject:<span class="type"></span>:kMaxUncheckedFastElementsLength);</span><br><span class="line">  <span class="keyword">if</span> (index &lt; capacity) {</span><br><span class="line">    *<span class="keyword">new</span><span class="type">_capacity</span> = capacity;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> (index - capacity &gt;= JSObject:<span class="type"></span>:kMaxGap) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  *<span class="keyword">new</span><span class="type">_capacity</span> = JSObject:<span class="type"></span>:NewElementsCapacity(index + <span class="number">1</span>);</span><br><span class="line">  DCHECK_LT(index, *<span class="keyword">new</span><span class="type">_capacity</span>);</span><br><span class="line">  <span class="keyword">if</span> (*<span class="keyword">new</span><span class="type">_capacity</span> &lt;= JSObject:<span class="type"></span>:kMaxUncheckedOldFastElementsLength ||</span><br><span class="line">      (*<span class="keyword">new</span><span class="type">_capacity</span> &lt;= JSObject:<span class="type"></span>:kMaxUncheckedFastElementsLength &amp;&amp;</span><br><span class="line">       ObjectInYoungGeneration(object))) {</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> ShouldConvertToSlowElements(object.GetFastElementsUsage(),</span><br><span class="line">                                     *<span class="keyword">new</span><span class="type">_capacity</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-、分析"><a href="#2-、分析" class="headerlink" title="(2)、分析"></a>(2)、分析</h3><ul>
<li><p>如果快数组扩容后的容量是原来的&nbsp;<strong>3 倍以上</strong>，意味着它比&nbsp;<code>HashTable</code>&nbsp;形式存储占用更大的内存，快数组会转换为慢数组</p>
</li>
<li><p>如果快数组新增的索引与原来最大索引的差值大于 1024，快数组会被转换会慢数组</p>
</li>
</ul>
<p>所以，前面的例子：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr[<span class="number">1999</span>] = <span class="number">1999</span>;</span><br><span class="line">%<span class="title class_">DebugPrint</span>(arr);</span><br></pre></td></tr></tbody></table></figure>

<p><code>1999 - 2 &gt; 1024</code>，arr 从快数组转换为哈希形式存储的慢数组。</p>
<p>下面看一下详细运行信息👇</p>
<ul>
<li>修改arr之前:</li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318584c16f2c2beb1ece5b1.png" alt="image.png"></p>
<ul>
<li>修改arr之后：<br><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318586416f2c2beb1ed0169.png" alt="9c1a1af43947b4da39b9c554d56c312.png"></li>
</ul>
<h2 id="2-2、慢数组何时转换为快数组"><a href="#2-2、慢数组何时转换为快数组" class="headerlink" title="2.2、慢数组何时转换为快数组"></a>2.2、慢数组何时转换为快数组</h2><h3 id="1-、看一下源码先👇-1"><a href="#1-、看一下源码先👇-1" class="headerlink" title="(1)、看一下源码先👇"></a>(1)、看一下源码先👇</h3><ol>
<li>path:v8/src/objects/js-objects.cc</li>
</ol>
<figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// path:v8/src/objects/js-objects.cc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// line:4932</span></span><br><span class="line">static <span class="built_in">bool</span> ShouldConvertToFastElements(JSObject object,</span><br><span class="line">                                        NumberDictionary <span class="built_in">dictionary</span>,</span><br><span class="line">                                        <span class="built_in">uint32</span>_t index,</span><br><span class="line">                                        <span class="built_in">uint32</span>_t* new_capacity) {</span><br><span class="line">  <span class="comment">// If properties with non-standard attributes or accessors were added, we</span></span><br><span class="line">  <span class="comment">// cannot go back to fast elements.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">dictionary</span>.requires_slow_elements()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Adding a property with this index will require slow elements.</span></span><br><span class="line">  <span class="keyword">if</span> (index &gt;= static_cast&lt;<span class="built_in">uint32</span>_t&gt;(Smi::kMaxValue)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (object.IsJSArray()) {</span><br><span class="line">    Object length = JSArray::<span class="keyword">cast</span>(object).length();</span><br><span class="line">    <span class="keyword">if</span> (!length.IsSmi()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    *new_capacity = static_cast&lt;<span class="built_in">uint32</span>_t&gt;(Smi::ToInt(length));</span><br><span class="line">  } <span class="keyword">else</span> <span class="keyword">if</span> (object.IsJSArgumentsObject()) {</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    *new_capacity = <span class="built_in">dictionary</span>.max_number_key() + <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">  *new_capacity = std::max(index + <span class="number">1</span>, *new_capacity);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">uint32</span>_t <span class="built_in">dictionary</span>_size = static_cast&lt;<span class="built_in">uint32</span>_t&gt;(<span class="built_in">dictionary</span>.Capacity()) *</span><br><span class="line">                             NumberDictionary::kEntrySize;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 看这里👇， 当慢数组转换成快数组能节省 不少于 50%&nbsp;的空间时，才会将其转换</span></span><br><span class="line">  <span class="comment">// Turn fast if the dictionary only saves 50% space.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">dictionary</span>_size &gt;= *new_capacity;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-、分析-1"><a href="#2-、分析-1" class="headerlink" title="(2)、分析"></a>(2)、分析</h3><p>元素能存放在快数组中并且长度不在smi之间（64位-2^31到2^32-1），并且当前慢数组空间相比快数组节省值小于等于50%，则转变成为快数组。</p>
<h2 id="快慢转换总结"><a href="#快慢转换总结" class="headerlink" title="快慢转换总结"></a>快慢转换总结</h2><ul>
<li><p>快数组就是以空间换时间的方式，申请了大块连续内存，提高了执行效率。</p>
</li>
<li><p>慢数组以时间换空间，不必申请连续的空间，节省了内存，但需要付出效率变差的代价。</p>
</li>
</ul>
<h1 id="3、动态扩容与收缩"><a href="#3、动态扩容与收缩" class="headerlink" title="3、动态扩容与收缩"></a>3、动态扩容与收缩</h1><h2 id="3-1、扩容"><a href="#3-1、扩容" class="headerlink" title="3.1、扩容"></a>3.1、扩容</h2><p>看下源码👇</p>
<ol>
<li><p>path:v8/src/objects/js-array.h</p>
<p> 空数组预分配的大小: 4</p>
</li>
</ol>
<figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// path:v8/src/objects/js-array.h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Dispatched behavior.</span></span><br><span class="line"><span class="built_in">DECL_PRINTER</span>(JSArray)</span><br><span class="line"><span class="built_in">DECL_VERIFIER</span>(JSArray)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Number of element slots to pre-allocate for an empty array.</span></span><br><span class="line"><span class="comment">// 空数组预分配的大小为4</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> kPreallocatedArrayElements = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> kLengthDescriptorIndex = <span class="number">0</span>;</span><br></pre></td></tr></tbody></table></figure>

<p>上面代码表明，当声明一个空数组时，已预分配好 4 个字节的存储空间。</p>
<p>所以 [] 与 [1, 2, 3, 4] 占用一样多的内存。 前面说过，JSArray 继承自 JSObject，我们可以在 js-objects.h 中找到如下代码：</p>
<ol start="2">
<li><p>path:v8/src/objects/js-objects.h</p>
<p> 扩容公式</p>
</li>
</ol>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// path:v8/src/objects/js-objects.h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// line:551👇</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint32_t</span> kMinAddedElementsCapacity = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Computes the new capacity when expanding the elements of a JSObject.</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title">NewElementsCapacity</span><span class="params">(<span class="type">uint32_t</span> old_capacity)</span> </span>{</span><br><span class="line">  <span class="comment">// (old_capacity + 50%) + kMinAddedElementsCapacity</span></span><br><span class="line">  <span class="comment">// 扩容公式:原有内存容量（1.5倍）+ 16</span></span><br><span class="line">  <span class="keyword">return</span> old_capacity + (old_capacity &gt;&gt; <span class="number">1</span>) + kMinAddedElementsCapacity;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>这是对 JSObject elements 扩容和对 JSArray 扩容的通用方法。扩容后容量的计算逻辑是：<strong>在原占用空间 old_capacity 的基础上增加一半（old_capacity &gt;&gt; 1 右移 1 位表示除 2，再相加得原空间 1.5 倍），再加上 16</strong>。</p>
<p><strong>举例：</strong></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">5</span>);</span><br><span class="line">%<span class="title class_">DebugPrint</span>(arr);</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p>arr.push 之前：<br><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318587716f2c2beb1ed15cf.png" alt="image.png"></p>
</li>
<li><p>arr.push 后：</p>
</li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318588716f2c2beb1ed28c0.png" alt="image.png"></p>
<p><strong>具体分析如下：</strong><br>👇</p>
<ol>
<li><p>向数组 [1, 2, 3, 4] push 5 时，首先判断到当前容量已满，需要计算新容量。</p>
</li>
<li><p>old_capacity = 4，new_capacity = 4 + 4 &gt;&gt; 1 + 16 = 22，得出 [1, 2, 3, 4, 5] 的容量为 22 个字节，</p>
</li>
<li><p>V8 向操作系统申请一块连续大小为 22 字节的内存空间，随后将老数据一一 copy，再新将新增元素写入。</p>
</li>
</ol>
<h2 id="3-2-缩容"><a href="#3-2-缩容" class="headerlink" title="3.2 缩容"></a>3.2 缩容</h2><p>紧接着，我们在&nbsp;<code>src/objects/elements.cc</code>&nbsp;中找到&nbsp;<code>SetLengthImpl</code>&nbsp;方法中的如下代码：</p>
<figure class="highlight arcade"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// path:src/objects/elements.cc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// line:750</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> * <span class="built_in">length</span> + JSObject::kMinAddedElementsCapacity &lt;= capacity) {</span><br><span class="line">  <span class="comment">// If more than half the elements won't be used, trim the array.</span></span><br><span class="line">  <span class="comment">// Do not trim from short arrays to prevent frequent trimming on</span></span><br><span class="line">  <span class="comment">// repeated pop operations.</span></span><br><span class="line">  <span class="comment">// Leave some space to allow for subsequent push operations.</span></span><br><span class="line">  int elements_to_trim = <span class="built_in">length</span> + <span class="number">1</span> == old_length</span><br><span class="line">                             ? (capacity - <span class="built_in">length</span>) / <span class="number">2</span></span><br><span class="line">                             : capacity - <span class="built_in">length</span>;</span><br><span class="line">  isolate-&gt;heap()-&gt;RightTrimFixedArray(*backing_store, elements_to_trim);</span><br><span class="line">  <span class="comment">// Fill the non-trimmed elements with holes.</span></span><br><span class="line">  BackingStore::cast(*backing_store)</span><br><span class="line">      .FillWithHoles(<span class="built_in">length</span>,</span><br><span class="line">                     <span class="attr">std</span>::<span class="built_in">min</span>(old_length, capacity - elements_to_trim));</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">  <span class="comment">// Otherwise, fill the unused tail with holes.</span></span><br><span class="line">  BackingStore::cast(*backing_store).FillWithHoles(<span class="built_in">length</span>, old_length);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>当数组元素减少（如 pop）后，如果数组容量大于等于 length 的 2 倍，则进行容量调整，使用&nbsp;<code>RightTrimFixedArray</code>&nbsp;函数，计算出需要释放的空间大小，做好标记，等待 GC 回收；如果数组容量小于 length 的 2 倍，则用 holes 对象填充。</p>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol>
<li><p>数组元素少的时候是线性结构存储（FixedArray）的，内存地址连续，查找速度快，可以动态扩缩容；</p>
</li>
<li><p>数组元素多的时候转化为慢数组，通过创建了一个字典来记录映射关系，内存不连续，通过大名鼎鼎的Object.defineProperty(object, key, descriptor)创建</p>
</li>
</ol>
<p>js的数组看似不同，其实只是V8 在底层实现上做了一层封装，使用两种数据结构实现数组，并且通过时间和空间2个纬度的取舍，优化了数组的性能。</p>
<p><a href="https://z3rog.tech/blog/2020/fast-properties.html">参考学习博客</a></p>
<hr>
<p>🎈🎈🎈</p>
<p>🌹 关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得<strong>点赞关注收藏</strong>哟，回看不迷路 😉</p>
<p>✨ 欢迎大家转发、评论交流</p>
<p>🎁 蟹蟹😊</p>
</body></html>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>V8</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令——排错很有帮助😏</title>
    <url>/posts/1627929391.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇收录至<a href="https://blog.i-xiao.space/categories/Docker/">Docker专栏</a>，持续更新，欢迎访问😊</p>
</blockquote>
<p>众所周知，docker 排查问题相较而言是困难的。因此，熟知一些常用命令对我们快速的排查定位问题是非常有帮助的。下面让我们一起来学习一下吧👇</p>
<h2 id="1、显示docker的系统信息"><a href="#1、显示docker的系统信息" class="headerlink" title="1、显示docker的系统信息"></a>1、显示docker的系统信息</h2><p>docker info</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@xiao docker]<span class="comment"># docker info</span></span><br><span class="line">Client:</span><br><span class="line"> Context:    default</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"> Plugins:</span><br><span class="line">  app: Docker App (Docker Inc., v0.9.1-beta3)</span><br><span class="line">  buildx: Build with BuildKit (Docker Inc., v0.6.1-docker)</span><br><span class="line">  scan: Docker Scan (Docker Inc.)</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Containers: 8</span><br><span class="line">  Running: 5</span><br><span class="line">  Paused: 0</span><br><span class="line">  Stopped: 3</span><br><span class="line"> Images: 16</span><br><span class="line"> Server Version: 20.10.8</span><br><span class="line"> Storage Driver: overlay2</span><br><span class="line">  Backing Filesystem: extfs</span><br><span class="line">  Supports d_type: <span class="literal">true</span></span><br><span class="line">  Native Overlay Diff: <span class="literal">true</span></span><br><span class="line">  userxattr: <span class="literal">false</span></span><br><span class="line"> Logging Driver: json-file</span><br><span class="line"> Cgroup Driver: cgroupfs</span><br><span class="line"> Cgroup Version: 1</span><br><span class="line"> Plugins:</span><br><span class="line">  Volume: <span class="built_in">local</span></span><br><span class="line">  Network: bridge host ipvlan macvlan null overlay</span><br><span class="line">  Log: awslogs fluentd gcplogs gelf journald json-file <span class="built_in">local</span> logentries splunk syslog</span><br><span class="line"> Swarm: inactive</span><br><span class="line"> Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc</span><br><span class="line"> Default Runtime: runc</span><br><span class="line"> Init Binary: docker-init</span><br><span class="line"> containerd version: e25210fe30a0a703442421b0f60afac609f950a3</span><br><span class="line"> runc version: v1.0.1-0-g4144b63</span><br><span class="line"> init version: de40ad0</span><br><span class="line"> Security Options:</span><br><span class="line">  seccomp</span><br><span class="line">   Profile: default</span><br><span class="line"> Kernel Version: 3.10.0-1062.1.2.el7.x86_64</span><br><span class="line"> Operating System: CentOS Linux 7 (Core)</span><br><span class="line"> OSType: linux</span><br><span class="line"> Architecture: x86_64</span><br><span class="line"> CPUs: 1</span><br><span class="line"> Total Memory: 1.795GiB</span><br><span class="line"> Name: xiao</span><br><span class="line"> ID: SR3Y:RSZT:2ZAE:M33P:O2LT:55KN:A3XY:WE7V:QXJY:7Z32:M34L:NX7N</span><br><span class="line"> Docker Root Dir: /var/lib/docker</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"> Registry: https://index.docker.io/v1/</span><br><span class="line"> Labels:</span><br><span class="line"> Experimental: <span class="literal">false</span></span><br><span class="line"> Insecure Registries:</span><br><span class="line">  127.0.0.0/8</span><br><span class="line"> Registry Mirrors:</span><br><span class="line">  https://4h8ex9ed.mirror.aliyuncs.com/</span><br><span class="line"> Live Restore Enabled: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">[root@xiao docker]<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">version</span>       <span class="comment">#显示docker的版本信息</span></span><br><span class="line">docker info	     <span class="comment">#显示docker的系统信息，包括镜像和容器的数量</span></span><br><span class="line">docker <span class="comment">--help</span></span><br></pre></td></tr></tbody></table></figure>

<p>文档地址： <a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">port  	  <span class="comment"># 查看映射端口对应的容器内部源端口</span></span><br><span class="line">pause	    <span class="comment"># 暂停容器</span></span><br><span class="line">ps        <span class="comment"># 容器列表</span></span><br><span class="line">pull      <span class="comment"># 从docker镜像源服务器拉取指定镜像或者库镜像</span></span><br><span class="line">push      <span class="comment"># 推送指定镜像或者库镜像至docker源服务器</span></span><br><span class="line">restart   <span class="comment"># 重启运行的容器</span></span><br><span class="line"><span class="built_in">rm</span>        <span class="comment"># 移除一个或多个容器</span></span><br><span class="line">rmi       <span class="comment"># 移除一个或多个镜像 （无容器使用该镜像才可删除，否则需要删除相关容器才可继续或 -f 强制删除）</span></span><br><span class="line">run       <span class="comment"># 创建一个新的容器并运行一个命令</span></span><br><span class="line">save      <span class="comment"># 保存一个镜像为一个 tar 包【对应 load】</span></span><br><span class="line">search    <span class="comment"># 在 docker hub 中搜索镜像</span></span><br><span class="line">start     <span class="comment"># 启动容器</span></span><br><span class="line">stop      <span class="comment"># 停止容器</span></span><br><span class="line">tag       <span class="comment"># 给源中镜像打标签</span></span><br><span class="line">top       <span class="comment"># 查看容器中运行的进程信息</span></span><br><span class="line">unpause   <span class="comment"># 取消暂停容器</span></span><br><span class="line">version   <span class="comment"># 查看 docker版本号</span></span><br><span class="line"><span class="built_in">wait</span>      <span class="comment"># 截取容器停止时的退出状态值</span></span><br><span class="line">attach    <span class="comment"># Attach to a running container  #当前shell下attach连接指定运行镜像</span></span><br><span class="line">build     <span class="comment"># Build an image from a Dockerfile  #通过Dockerfile定制镜像</span></span><br><span class="line">commit    <span class="comment"># Create a new image from a containers changes  #提交当前容器为新的镜像</span></span><br><span class="line"><span class="built_in">cp</span>        <span class="comment"># Copy files/folders from a container to a HOSTDIR or to STDOUT  #从容器中拷贝指定文件或者目录到宿主机中</span></span><br><span class="line">create    <span class="comment"># Create a new container  #创建一个新的容器，同run 但不启动容器</span></span><br><span class="line">diff      <span class="comment"># Inspect changes on a containers filesystem  #查看docker容器变化</span></span><br><span class="line">events    <span class="comment"># Get real time events from the server#从docker服务获取容器实时事件</span></span><br><span class="line"><span class="built_in">exec</span>      <span class="comment"># Run a command in a running container#在已存在的容器上运行命令</span></span><br><span class="line"><span class="built_in">export</span>    <span class="comment"># Export a containers filesystem as a tar archive  #导出容器的内容流作为一个tar归档文件(对应import)</span></span><br><span class="line"><span class="built_in">history</span>   <span class="comment"># Show the history of an image  #展示一个镜像形成历史</span></span><br><span class="line">inspect   <span class="comment"># 查看容器详细信息</span></span><br><span class="line"><span class="built_in">kill</span>      <span class="comment"># kill 指定的容器</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="2、镜像命令"><a href="#2、镜像命令" class="headerlink" title="2、镜像命令"></a>2、镜像命令</h2><p>docker images</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">jenkins/jenkins       latest    ba8a0e5dc5cb   4 months ago   570MB</span><br><span class="line">nginx                 latest    d1a364dc548d   4 months ago   133MB</span><br><span class="line">portainer/portainer   latest    580c0e4e98b0   6 months ago   79.1MB</span><br><span class="line">hello-world           latest    d1165f221234   6 months ago   13.3kB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解释</span></span><br><span class="line">REPOSITORY: 镜像仓库源</span><br><span class="line">TAG: 镜像版本信息</span><br><span class="line">IMAGE ID: 镜像的ID</span><br><span class="line">CREATED: 镜像的创建实际爱你</span><br><span class="line">SIZE: 镜像的大小</span><br><span class="line"></span><br><span class="line">可选参数</span><br><span class="line">docker images</span><br><span class="line">	-a : (--all) 列出所有镜像</span><br><span class="line">	-q : (--quiet) 只显示镜像ID</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-1、搜索镜像"><a href="#2-1、搜索镜像" class="headerlink" title="2.1、搜索镜像"></a>2.1、搜索镜像</h3><p>docker search [xxx]</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker search mysql</span><br><span class="line"></span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   11470     [OK]</span><br><span class="line">mariadb                           MariaDB Server is a high performing open sou…   4354      [OK]</span><br><span class="line">mysql/mysql-server                Optimized MySQL Server Docker images. Create…   848                  [OK]</span><br><span class="line">percona                           Percona Server is a fork of the MySQL relati…   555       [OK]</span><br><span class="line">phpmyadmin                        phpMyAdmin - A web interface <span class="keyword">for</span> MySQL and M…   332       [OK]</span><br><span class="line">centos/mysql-57-centos7           MySQL 5.7 SQL database server                   91                    [OK]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker search mysql --filter=STARS=3000 <span class="comment"># 搜索start数大于3000的</span></span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   11470     [OK]</span><br><span class="line">mariadb   MariaDB Server is a high performing open sou…   4354      [OK]</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-2、拉取镜像"><a href="#2-2、拉取镜像" class="headerlink" title="2.2、拉取镜像"></a>2.2、拉取镜像</h3><p>hub 搜索</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6335750c16f2c2beb163c4cf.jpg"></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker pull 镜像名[:tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># eg</span></span><br><span class="line">docker pull mysql</span><br><span class="line">Using default tag: latest               <span class="comment"># 如果不写tag, 默认就是latest</span></span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">a330b6cecb98: Pull complete 		<span class="comment"># 分层下载，docker image 的核心 联合文件系统</span></span><br><span class="line">9c8f656c32b8: Pull complete</span><br><span class="line">88e473c3f553: Pull complete</span><br><span class="line">062463ea5d2f: Pull complete</span><br><span class="line">daf7e3bdf4b6: Pull complete</span><br><span class="line">1839c0b7aac9: Pull complete</span><br><span class="line">cf0a0cfee6d0: Pull complete</span><br><span class="line">1b42041bb11e: Pull complete</span><br><span class="line">10459d86c7e6: Pull complete</span><br><span class="line">b7199599d5f9: Pull complete</span><br><span class="line">1d6f51e17d45: Pull complete</span><br><span class="line">50e0789bacad: Pull complete</span><br><span class="line">Digest: sha256:99e0989e7e3797cfbdb8d51a19d32c8d286dd8862794d01a547651a896bcf00c  <span class="comment"># 签名</span></span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:latest</span><br><span class="line">docker.io/library/mysql:latest				<span class="comment"># 真实地址</span></span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line">docker pull mysql</span><br><span class="line">等价于</span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment"># 指定tag</span></span><br><span class="line">docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">a330b6cecb98: Already exists 			<span class="comment"># 联合文件系统，已存在的不再重复下载</span></span><br><span class="line">9c8f656c32b8: Already exists</span><br><span class="line">88e473c3f553: Already exists</span><br><span class="line">062463ea5d2f: Already exists</span><br><span class="line">daf7e3bdf4b6: Already exists</span><br><span class="line">1839c0b7aac9: Already exists</span><br><span class="line">cf0a0cfee6d0: Already exists</span><br><span class="line">fae7a809788c: Pull complete 			<span class="comment"># 下载不存在的</span></span><br><span class="line">dae5a82a61f0: Pull complete</span><br><span class="line">7063da9569eb: Pull complete</span><br><span class="line">51a9a9b4ef36: Pull complete</span><br><span class="line">Digest: sha256:d9b934cdf6826629f8d02ea01f28b2c4ddb1ae27c32664b14867324b3e5e1291</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">mysql                 5.7       1d7aba917169   3 weeks ago    448MB</span><br><span class="line">mysql                 latest    0716d6ebcc1a   3 weeks ago    514MB</span><br><span class="line">jenkins/jenkins       latest    ba8a0e5dc5cb   4 months ago   570MB</span><br><span class="line">nginx                 latest    d1a364dc548d   4 months ago   133MB</span><br><span class="line">portainer/portainer   latest    580c0e4e98b0   6 months ago   79.1MB</span><br><span class="line">hello-world           latest    d1165f221234   6 months ago   13.3kB</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-3、删除镜像"><a href="#2-3、删除镜像" class="headerlink" title="2.3、删除镜像"></a>2.3、删除镜像</h3><p>docker rmi -f [镜像名、镜像ID]</p>
<figure class="highlight llvm"><table><tbody><tr><td class="code"><pre><span class="line">docker rmi -f [镜像名、镜像ID]</span><br><span class="line"></span><br><span class="line">docker rmi -f <span class="number">1</span>d<span class="number">7</span>aba<span class="number">917169</span></span><br><span class="line">Untagged: mysql:<span class="number">5.7</span></span><br><span class="line">Untagged: mysql<span class="title">@sha256</span>:d<span class="number">9</span>b<span class="number">934</span>cdf<span class="number">6826629</span>f<span class="number">8</span>d<span class="number">02</span>ea<span class="number">01</span>f<span class="number">28</span>b<span class="number">2</span><span class="keyword">c</span><span class="number">4</span>ddb<span class="number">1</span>ae<span class="number">27</span><span class="keyword">c</span><span class="number">32664</span>b<span class="number">14867324</span>b<span class="number">3e5</span>e<span class="number">1291</span></span><br><span class="line">Deleted: sha<span class="number">256</span>:<span class="number">1</span>d<span class="number">7</span>aba<span class="number">9171693947</span>d<span class="number">53</span>f<span class="number">474014821972</span>bf<span class="number">25</span>d<span class="number">72</span>b<span class="number">7</span>d<span class="number">143</span>ce<span class="number">4</span>af<span class="number">4</span><span class="keyword">c</span><span class="number">8</span>d<span class="number">8484623417</span></span><br><span class="line">Deleted: sha<span class="number">256</span>:<span class="number">94</span>ebbead<span class="number">5</span><span class="keyword">c</span><span class="number">58282</span>fef<span class="number">91</span><span class="keyword">cc</span><span class="number">7</span>d<span class="number">0</span>fb<span class="number">56e4006</span>a<span class="number">72434</span>b<span class="number">4</span>a<span class="number">6</span>ae<span class="number">2</span>cd<span class="number">5</span>be<span class="number">98</span>f<span class="number">369</span>cb<span class="number">8</span><span class="keyword">c</span><span class="number">21</span></span><br><span class="line">Deleted: sha<span class="number">256</span>:<span class="number">989</span>da<span class="number">5</span>efad<span class="number">29</span>ec<span class="number">59</span>bd<span class="number">536</span>cd<span class="number">393</span>d<span class="number">277</span>bc<span class="number">777</span>f<span class="number">8</span>b<span class="number">9</span>b<span class="number">34</span>b<span class="number">8e3</span>ad<span class="number">9593</span>a<span class="number">4</span>b<span class="number">0</span>a<span class="number">83</span>b<span class="number">40</span>f<span class="number">4</span></span><br><span class="line">Deleted: sha<span class="number">256</span>:<span class="number">7457</span>ee<span class="number">6817</span><span class="keyword">c</span><span class="number">678</span>da<span class="number">3</span>cb<span class="number">383</span>d<span class="number">27</span>a<span class="number">3</span>d<span class="number">79</span>d<span class="number">5</span>f<span class="number">3</span>f<span class="number">25</span>fbcb<span class="number">92958</span>d<span class="number">5e8</span>d<span class="number">5709e7631</span>e<span class="number">23</span><span class="keyword">c</span></span><br><span class="line">Deleted: sha<span class="number">256</span>:fe<span class="number">7</span>dac<span class="number">53</span>adebe<span class="number">33519</span>b<span class="number">4e4</span>fc<span class="number">577</span>bfcddd<span class="number">7372</span><span class="keyword">cc</span><span class="number">313</span><span class="keyword">c</span><span class="number">35</span>fae<span class="number">681</span>fc<span class="number">82</span>fb<span class="number">325</span>fdc<span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>



<h2 id="3、容器命令"><a href="#3、容器命令" class="headerlink" title="3、容器命令"></a>3、容器命令</h2><p>有了镜像才可以创建容器，下载centos镜像进行学习</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-1、新建容器并启动"><a href="#3-1、新建容器并启动" class="headerlink" title="3.1、新建容器并启动"></a>3.1、新建容器并启动</h3><figure class="highlight ldif"><table><tbody><tr><td class="code"><pre><span class="line">docker run [可选参数] imageName/imageId</span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="literal">-</span>-name "NAME"  容器名字，tomcat01, tomcat02, 用来区分容器</span><br><span class="line"><span class="literal">-</span>d  后台方式运行</span><br><span class="line"><span class="literal">-</span>i  , -t   <span class="comment">#使用交互模式运行，可以进入容器查看内容</span></span><br><span class="line"><span class="literal">-</span>p         <span class="comment">#指定容器端口 -p 8080</span></span><br><span class="line">	   -p ip:主机端口:容器端口  -p 3344:80</span><br><span class="line">	   -p 主机端口:容器端口   (常用)</span><br><span class="line">           -p 容器端口</span><br><span class="line">           容器端口</span><br><span class="line"><span class="literal">-</span>P  	   <span class="comment">#随机指定端口</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-2、启动容器，并进入容器"><a href="#3-2、启动容器，并进入容器" class="headerlink" title="3.2、启动容器，并进入容器"></a>3.2、启动容器，并进入容器</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@iZm5e----- ~]<span class="comment"># docker run -it centos /bin/bash</span></span><br><span class="line">[root@c4a1504a9cf9 /]<span class="comment"># ls  #查看容器内的centos</span></span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@c4a1504a9cf9 /]<span class="comment"># exit # 退出容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@iZm5e----- ~]<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6335753016f2c2beb163e49e.jpg"></p>
<p>CONTAINER ID c4a1504a9cf9</p>
<h3 id="3-3、查看所有运行的容器"><a href="#3-3、查看所有运行的容器" class="headerlink" title="3.3、查看所有运行的容器"></a>3.3、查看所有运行的容器</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker ps     <span class="comment"># 查看运行的容器  exit之后就停止了容器</span></span><br><span class="line">docker ps -a  <span class="comment"># 查看所有运行过的以及在运行的容器</span></span><br><span class="line"></span><br><span class="line">docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS                      PORTS     NAMES</span><br><span class="line">c4a1504a9cf9   centos                <span class="string">"/bin/bash"</span>              7 minutes ago   Exited (0) 3 minutes ago              hungry_euler</span><br><span class="line">dc0c5076048e   hello-world           <span class="string">"/hello"</span>                 2 months ago    Exited (0) 2 months ago               busy_cori</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker ps -a -n=[数字]  <span class="comment"># 最近创建的容器</span></span><br><span class="line">docker ps -a -n=1</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                     PORTS     NAMES</span><br><span class="line">c4a1504a9cf9   centos    <span class="string">"/bin/bash"</span>   11 minutes ago   Exited (0) 7 minutes ago             hungry_euler</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-4、退出容器"><a href="#3-4、退出容器" class="headerlink" title="3.4、退出容器"></a>3.4、退出容器</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span>          <span class="comment">#容器停止并退出</span></span><br><span class="line">ctrl + p + q  <span class="comment">#容器不停止退出</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-5、删除容器"><a href="#3-5、删除容器" class="headerlink" title="3.5、删除容器"></a>3.5、删除容器</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> 容器ID                  <span class="comment"># 删除指定容器  不能删除正在运行的容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -aq)     <span class="comment"># 递归删除所有容器</span></span><br><span class="line">docker ps -a -q|xargs docker <span class="built_in">rm</span>   <span class="comment"># 删除所有容器</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-6、启动和停止容器"><a href="#3-6、启动和停止容器" class="headerlink" title="3.6、启动和停止容器"></a>3.6、启动和停止容器</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker start 容器ID	<span class="comment"># 启动容器</span></span><br><span class="line">docker restart 容器ID 	<span class="comment"># 重启容器</span></span><br><span class="line">docker stop 容器ID      <span class="comment"># 停止当前正在运行的容器</span></span><br><span class="line">docker <span class="built_in">kill</span> 容器ID      <span class="comment"># 强制停止当前容器</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="4、常用其它命令"><a href="#4、常用其它命令" class="headerlink" title="4、常用其它命令"></a>4、常用其它命令</h2><h3 id="4-1、后台运行容器"><a href="#4-1、后台运行容器" class="headerlink" title="4.1、后台运行容器"></a>4.1、后台运行容器</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d centos</span><br><span class="line">463f1dc43e444ff6b6d0efd3f0c5047e118ddf64deed3aea2a8b5a6c89df61bb</span><br><span class="line">[root@iZm5e----- ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@iZm5e----- ~]#</span><br></pre></td></tr></tbody></table></figure>

<p>发现后台运行的容器，停止了</p>
<p>❗ docker使用后台运行，就必须要有一个前台进程。否则，docker发现没有服务，就会自动停止👀</p>
<h3 id="4-2、查看日志"><a href="#4-2、查看日志" class="headerlink" title="4.2、查看日志"></a>4.2、查看日志</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker logs --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#shell脚本造日志</span></span><br><span class="line">docker run -d centos /bin/sh -c <span class="string">"while true;do echo xiao;sleep 1;done"</span></span><br><span class="line">d5033adf13b49f537430fc19df9fe00b477301dfd3a2d9c287060c65c1a59d7b</span><br><span class="line">[root@iZm5e----- ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS     NAMES</span><br><span class="line">d5033adf13b4   centos    <span class="string">"/bin/sh -c 'while t…"</span>   5 seconds ago   Up 4 seconds             competent_jang</span><br><span class="line">[root@iZm5e----- ~]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示日志</span></span><br><span class="line">docker logs -f -t --<span class="built_in">tail</span> 10 d5033adf13b4</span><br><span class="line">2021-09-27T07:05:08.800676670Z xiao</span><br><span class="line">2021-09-27T07:05:09.803226803Z xiao</span><br><span class="line">2021-09-27T07:05:10.806019019Z xiao</span><br><span class="line">2021-09-27T07:05:11.809012200Z xiao</span><br><span class="line">2021-09-27T07:05:12.811505073Z xiao</span><br><span class="line">2021-09-27T07:05:13.817109532Z xiao</span><br><span class="line">2021-09-27T07:05:14.819543508Z xiao</span><br><span class="line">2021-09-27T07:05:15.822718210Z xiao</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">-tf                 <span class="comment">#显示日志</span></span><br><span class="line">--<span class="built_in">tail</span> [数字]	    <span class="comment"># 显示日志的条数</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="4-3、查看容器中的进程信息-ps-linux"><a href="#4-3、查看容器中的进程信息-ps-linux" class="headerlink" title="4.3、查看容器中的进程信息 (ps - linux)"></a>4.3、查看容器中的进程信息 (ps - linux)</h3><p>docker top命令</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker top 容器ID</span><br><span class="line"></span><br><span class="line">docker top d5033adf13b4</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                29087               29069               0                   15:01               ?                   00:00:00            /bin/sh -c <span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span> <span class="built_in">echo</span> xiao;<span class="built_in">sleep</span> 1;<span class="keyword">done</span></span><br><span class="line">root                29908               29087               0                   15:08               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=<span class="built_in">sleep</span> /usr/bin/sleep 1</span><br><span class="line">[root@iZm5e----- ~]<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="4-4、查看镜像的源数据"><a href="#4-4、查看镜像的源数据" class="headerlink" title="4.4、查看镜像的源数据"></a>4.4、查看镜像的源数据</h3><p>dockers inspect 命令</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6335754d16f2c2beb1640b75.jpg"></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker inspect d5033adf13b4</span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"d5033adf13b49f537430fc19df9fe00b477301dfd3a2d9c287060c65c1a59d7b"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2021-09-27T07:01:42.833109605Z"</span>,</span><br><span class="line">        <span class="string">"Path"</span>: <span class="string">"/bin/sh"</span>,</span><br><span class="line">        <span class="string">"Args"</span>: [</span><br><span class="line">            <span class="string">"-c"</span>,</span><br><span class="line">            <span class="string">"while true;do echo xiao;sleep 1;done"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"State"</span>: {</span><br><span class="line">            <span class="string">"Status"</span>: <span class="string">"running"</span>,</span><br><span class="line">            <span class="string">"Running"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"Paused"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Restarting"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"OOMKilled"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Dead"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Pid"</span>: 29087,</span><br><span class="line">            <span class="string">"ExitCode"</span>: 0,</span><br><span class="line">            <span class="string">"Error"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"StartedAt"</span>: <span class="string">"2021-09-27T07:01:43.288158158Z"</span>,</span><br><span class="line">            <span class="string">"FinishedAt"</span>: <span class="string">"0001-01-01T00:00:00Z"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"Image"</span>: <span class="string">"sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6"</span>,</span><br><span class="line">        <span class="string">"ResolvConfPath"</span>: <span class="string">"/var/lib/docker/containers/d5033adf13b49f537430fc19df9fe00b477301dfd3a2d9c287060c65c1a59d7b/resolv.conf"</span>,</span><br><span class="line">        <span class="string">"HostnamePath"</span>: <span class="string">"/var/lib/docker/containers/d5033adf13b49f537430fc19df9fe00b477301dfd3a2d9c287060c65c1a59d7b/hostname"</span>,</span><br><span class="line">        <span class="string">"HostsPath"</span>: <span class="string">"/var/lib/docker/containers/d5033adf13b49f537430fc19df9fe00b477301dfd3a2d9c287060c65c1a59d7b/hosts"</span>,</span><br><span class="line">        <span class="string">"LogPath"</span>: <span class="string">"/var/lib/docker/containers/d5033adf13b49f537430fc19df9fe00b477301dfd3a2d9c287060c65c1a59d7b/d5033adf13b49f537430fc19df9fe00b477301dfd3a2d9c287060c65c1a59d7b-json.log"</span>,</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"/competent_jang"</span>,</span><br><span class="line">        <span class="string">"RestartCount"</span>: 0,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">        <span class="string">"Platform"</span>: <span class="string">"linux"</span>,</span><br><span class="line">        <span class="string">"MountLabel"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"ProcessLabel"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"AppArmorProfile"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"ExecIDs"</span>: null,</span><br><span class="line">        <span class="string">"HostConfig"</span>: {</span><br><span class="line">            <span class="string">"Binds"</span>: null,</span><br><span class="line">            <span class="string">"ContainerIDFile"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"LogConfig"</span>: {</span><br><span class="line">                <span class="string">"Type"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">                <span class="string">"Config"</span>: {}</span><br><span class="line">            },</span><br><span class="line">            <span class="string">"NetworkMode"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"PortBindings"</span>: {},</span><br><span class="line">            <span class="string">"RestartPolicy"</span>: {</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"no"</span>,</span><br><span class="line">                <span class="string">"MaximumRetryCount"</span>: 0</span><br><span class="line">            },</span><br><span class="line">            <span class="string">"AutoRemove"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"VolumeDriver"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"VolumesFrom"</span>: null,</span><br><span class="line">            <span class="string">"CapAdd"</span>: null,</span><br><span class="line">            <span class="string">"CapDrop"</span>: null,</span><br><span class="line">            <span class="string">"CgroupnsMode"</span>: <span class="string">"host"</span>,</span><br><span class="line">            <span class="string">"Dns"</span>: [],</span><br><span class="line">            <span class="string">"DnsOptions"</span>: [],</span><br><span class="line">            <span class="string">"DnsSearch"</span>: [],</span><br><span class="line">            <span class="string">"ExtraHosts"</span>: null,</span><br><span class="line">            <span class="string">"GroupAdd"</span>: null,</span><br><span class="line">            <span class="string">"IpcMode"</span>: <span class="string">"private"</span>,</span><br><span class="line">            <span class="string">"Cgroup"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"Links"</span>: null,</span><br><span class="line">            <span class="string">"OomScoreAdj"</span>: 0,</span><br><span class="line">            <span class="string">"PidMode"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"Privileged"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"PublishAllPorts"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"ReadonlyRootfs"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"SecurityOpt"</span>: null,</span><br><span class="line">            <span class="string">"UTSMode"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"UsernsMode"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"ShmSize"</span>: 67108864,</span><br><span class="line">            <span class="string">"Runtime"</span>: <span class="string">"runc"</span>,</span><br><span class="line">            <span class="string">"ConsoleSize"</span>: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"Isolation"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"CpuShares"</span>: 0,</span><br><span class="line">            <span class="string">"Memory"</span>: 0,</span><br><span class="line">            <span class="string">"NanoCpus"</span>: 0,</span><br><span class="line">            <span class="string">"CgroupParent"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"BlkioWeight"</span>: 0,</span><br><span class="line">            <span class="string">"BlkioWeightDevice"</span>: [],</span><br><span class="line">            <span class="string">"BlkioDeviceReadBps"</span>: null,</span><br><span class="line">            <span class="string">"BlkioDeviceWriteBps"</span>: null,</span><br><span class="line">            <span class="string">"BlkioDeviceReadIOps"</span>: null,</span><br><span class="line">            <span class="string">"BlkioDeviceWriteIOps"</span>: null,</span><br><span class="line">            <span class="string">"CpuPeriod"</span>: 0,</span><br><span class="line">            <span class="string">"CpuQuota"</span>: 0,</span><br><span class="line">            <span class="string">"CpuRealtimePeriod"</span>: 0,</span><br><span class="line">            <span class="string">"CpuRealtimeRuntime"</span>: 0,</span><br><span class="line">            <span class="string">"CpusetCpus"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"CpusetMems"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"Devices"</span>: [],</span><br><span class="line">            <span class="string">"DeviceCgroupRules"</span>: null,</span><br><span class="line">            <span class="string">"DeviceRequests"</span>: null,</span><br><span class="line">            <span class="string">"KernelMemory"</span>: 0,</span><br><span class="line">            <span class="string">"KernelMemoryTCP"</span>: 0,</span><br><span class="line">            <span class="string">"MemoryReservation"</span>: 0,</span><br><span class="line">            <span class="string">"MemorySwap"</span>: 0,</span><br><span class="line">            <span class="string">"MemorySwappiness"</span>: null,</span><br><span class="line">            <span class="string">"OomKillDisable"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"PidsLimit"</span>: null,</span><br><span class="line">            <span class="string">"Ulimits"</span>: null,</span><br><span class="line">            <span class="string">"CpuCount"</span>: 0,</span><br><span class="line">            <span class="string">"CpuPercent"</span>: 0,</span><br><span class="line">            <span class="string">"IOMaximumIOps"</span>: 0,</span><br><span class="line">            <span class="string">"IOMaximumBandwidth"</span>: 0,</span><br><span class="line">            <span class="string">"MaskedPaths"</span>: [</span><br><span class="line">                <span class="string">"/proc/asound"</span>,</span><br><span class="line">                <span class="string">"/proc/acpi"</span>,</span><br><span class="line">                <span class="string">"/proc/kcore"</span>,</span><br><span class="line">                <span class="string">"/proc/keys"</span>,</span><br><span class="line">                <span class="string">"/proc/latency_stats"</span>,</span><br><span class="line">                <span class="string">"/proc/timer_list"</span>,</span><br><span class="line">                <span class="string">"/proc/timer_stats"</span>,</span><br><span class="line">                <span class="string">"/proc/sched_debug"</span>,</span><br><span class="line">                <span class="string">"/proc/scsi"</span>,</span><br><span class="line">                <span class="string">"/sys/firmware"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"ReadonlyPaths"</span>: [</span><br><span class="line">                <span class="string">"/proc/bus"</span>,</span><br><span class="line">                <span class="string">"/proc/fs"</span>,</span><br><span class="line">                <span class="string">"/proc/irq"</span>,</span><br><span class="line">                <span class="string">"/proc/sys"</span>,</span><br><span class="line">                <span class="string">"/proc/sysrq-trigger"</span></span><br><span class="line">            ]</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"GraphDriver"</span>: {</span><br><span class="line">            <span class="string">"Data"</span>: {</span><br><span class="line">                <span class="string">"LowerDir"</span>: <span class="string">"/var/lib/docker/overlay2/9aec4e083e254075a863c62c5c54f7ad2d7321750b4384ff1e092e25c5dc257e-init/diff:/var/lib/docker/overlay2/d6e4be0166eac21b08ff7e34bb088bd7488086c5fd04603879424af35f8e6190/diff"</span>,</span><br><span class="line">                <span class="string">"MergedDir"</span>: <span class="string">"/var/lib/docker/overlay2/9aec4e083e254075a863c62c5c54f7ad2d7321750b4384ff1e092e25c5dc257e/merged"</span>,</span><br><span class="line">                <span class="string">"UpperDir"</span>: <span class="string">"/var/lib/docker/overlay2/9aec4e083e254075a863c62c5c54f7ad2d7321750b4384ff1e092e25c5dc257e/diff"</span>,</span><br><span class="line">                <span class="string">"WorkDir"</span>: <span class="string">"/var/lib/docker/overlay2/9aec4e083e254075a863c62c5c54f7ad2d7321750b4384ff1e092e25c5dc257e/work"</span></span><br><span class="line">            },</span><br><span class="line">            <span class="string">"Name"</span>: <span class="string">"overlay2"</span></span><br><span class="line">        },</span><br><span class="line">        <span class="string">"Mounts"</span>: [],</span><br><span class="line">        <span class="string">"Config"</span>: {</span><br><span class="line">            <span class="string">"Hostname"</span>: <span class="string">"d5033adf13b4"</span>,</span><br><span class="line">            <span class="string">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"User"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Env"</span>: [</span><br><span class="line">                <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"Cmd"</span>: [</span><br><span class="line">                <span class="string">"/bin/sh"</span>,</span><br><span class="line">                <span class="string">"-c"</span>,</span><br><span class="line">                <span class="string">"while true;do echo xiao;sleep 1;done"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"Image"</span>: <span class="string">"centos"</span>,</span><br><span class="line">            <span class="string">"Volumes"</span>: null,</span><br><span class="line">            <span class="string">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"Entrypoint"</span>: null,</span><br><span class="line">            <span class="string">"OnBuild"</span>: null,</span><br><span class="line">            <span class="string">"Labels"</span>: {</span><br><span class="line">                <span class="string">"org.label-schema.build-date"</span>: <span class="string">"20210915"</span>,</span><br><span class="line">                <span class="string">"org.label-schema.license"</span>: <span class="string">"GPLv2"</span>,</span><br><span class="line">                <span class="string">"org.label-schema.name"</span>: <span class="string">"CentOS Base Image"</span>,</span><br><span class="line">                <span class="string">"org.label-schema.schema-version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">                <span class="string">"org.label-schema.vendor"</span>: <span class="string">"CentOS"</span></span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"NetworkSettings"</span>: {</span><br><span class="line">            <span class="string">"Bridge"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"SandboxID"</span>: <span class="string">"182c5e5a4f65a8c8ae6fffc733ef2ff02b9c7ea0e374331017cb651077fb77c6"</span>,</span><br><span class="line">            <span class="string">"HairpinMode"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"LinkLocalIPv6Address"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"LinkLocalIPv6PrefixLen"</span>: 0,</span><br><span class="line">            <span class="string">"Ports"</span>: {},</span><br><span class="line">            <span class="string">"SandboxKey"</span>: <span class="string">"/var/run/docker/netns/182c5e5a4f65"</span>,</span><br><span class="line">            <span class="string">"SecondaryIPAddresses"</span>: null,</span><br><span class="line">            <span class="string">"SecondaryIPv6Addresses"</span>: null,</span><br><span class="line">            <span class="string">"EndpointID"</span>: <span class="string">"7dd5c90916bf7c472a88dc308498f198b59c9606c144c6d413b77ecc03e05cc1"</span>,</span><br><span class="line">            <span class="string">"Gateway"</span>: <span class="string">"172.17.0.1"</span>,</span><br><span class="line">            <span class="string">"GlobalIPv6Address"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"GlobalIPv6PrefixLen"</span>: 0,</span><br><span class="line">            <span class="string">"IPAddress"</span>: <span class="string">"172.17.0.2"</span>,</span><br><span class="line">            <span class="string">"IPPrefixLen"</span>: 16,</span><br><span class="line">            <span class="string">"IPv6Gateway"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:11:00:02"</span>,</span><br><span class="line">            <span class="string">"Networks"</span>: {</span><br><span class="line">                <span class="string">"bridge"</span>: {</span><br><span class="line">                    <span class="string">"IPAMConfig"</span>: null,</span><br><span class="line">                    <span class="string">"Links"</span>: null,</span><br><span class="line">                    <span class="string">"Aliases"</span>: null,</span><br><span class="line">                    <span class="string">"NetworkID"</span>: <span class="string">"feafa30d4051f24353508959bd420fd163ad0c98d6b30ec8ff13b59a59552bb1"</span>,</span><br><span class="line">                    <span class="string">"EndpointID"</span>: <span class="string">"7dd5c90916bf7c472a88dc308498f198b59c9606c144c6d413b77ecc03e05cc1"</span>,</span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"172.17.0.1"</span>,</span><br><span class="line">                    <span class="string">"IPAddress"</span>: <span class="string">"172.17.0.2"</span>,</span><br><span class="line">                    <span class="string">"IPPrefixLen"</span>: 16,</span><br><span class="line">                    <span class="string">"IPv6Gateway"</span>: <span class="string">""</span>,</span><br><span class="line">                    <span class="string">"GlobalIPv6Address"</span>: <span class="string">""</span>,</span><br><span class="line">                    <span class="string">"GlobalIPv6PrefixLen"</span>: 0,</span><br><span class="line">                    <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:11:00:02"</span>,</span><br><span class="line">                    <span class="string">"DriverOpts"</span>: null</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line">[root@iZm5e----- ~]<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="4-5、进入当前正在运行的容器"><a href="#4-5、进入当前正在运行的容器" class="headerlink" title="4.5、进入当前正在运行的容器"></a>4.5、进入当前正在运行的容器</h3><h4 id="4-5-1、docker-exec-it-容器ID-bashShell-（常用）"><a href="#4-5-1、docker-exec-it-容器ID-bashShell-（常用）" class="headerlink" title="4.5.1、docker exec -it 容器ID bashShell （常用）"></a>4.5.1、docker exec -it 容器ID bashShell （常用）</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it d5033adf13b4 /bin/bash</span><br><span class="line">[root@d5033adf13b4 /]<span class="comment"># ls</span></span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@d5033adf13b4 /]<span class="comment"># ps -ef</span></span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 07:01 ?        00:00:00 /bin/sh -c <span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span> <span class="built_in">echo</span> xiao;<span class="built_in">sleep</span> 1;<span class="keyword">done</span></span><br><span class="line">root      1895     0  0 07:33 pts/0    00:00:00 /bin/bash</span><br><span class="line">root      1937     1  0 07:33 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=<span class="built_in">sleep</span> /usr/bin/sleep 1</span><br><span class="line">root      1938  1895  0 07:33 pts/0    00:00:00 ps -ef</span><br><span class="line">[root@d5033adf13b4 /]<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="4-5-2、docker-attach-容器ID"><a href="#4-5-2、docker-attach-容器ID" class="headerlink" title="4.5.2、docker attach 容器ID"></a>4.5.2、docker attach 容器ID</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker attach d5033adf13b4</span><br><span class="line">xiao</span><br><span class="line">xiao</span><br><span class="line">xiao</span><br><span class="line">xiao</span><br><span class="line">xiao</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure>

<h4 id="4-5-3、二者区别"><a href="#4-5-3、二者区别" class="headerlink" title="4.5.3、二者区别"></a>4.5.3、二者区别</h4><ul>
<li><p>docker exec   # 进入容器后，<strong>开启一个新的终端</strong>，可以在里面操作</p>
</li>
<li><p>docker attach # 进入容器正在执行的终端，<strong>不会开启新的进程</strong>。</p>
</li>
</ul>
<h3 id="4-6、拷贝容器内文件到主机上"><a href="#4-6、拷贝容器内文件到主机上" class="headerlink" title="4.6、拷贝容器内文件到主机上"></a>4.6、拷贝容器内文件到主机上</h3><p>手动同步</p>
<p>docker cp 命令</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> 容器ID:容器内路径 目的主机路径</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">cp</span> 2b7529b86ad0:/home/index.txt /home</span><br><span class="line">[root@iZm5e----- ~]<span class="comment"># ls</span></span><br><span class="line">life  mysql-community-release-el7-5.noarch.rpm  study  testSH  work</span><br><span class="line">[root@iZm5e----- ~]<span class="comment"># cd /home/</span></span><br><span class="line">[root@iZm5e----- home]<span class="comment"># ls</span></span><br><span class="line">index.txt  jenkins  <span class="built_in">test</span></span><br><span class="line">[root@iZm5e----- home]<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6335757416f2c2beb16430f8.jpg"></p>
<h4 id="4-6-1、问题探索"><a href="#4-6-1、问题探索" class="headerlink" title="4.6.1、问题探索"></a>4.6.1、问题探索</h4><p>👀如何实现自动同步，打通容器和主机</p>
<p>这个问题下篇讲解😊</p>
<h3 id="4-7、查看cpu内存使用情况"><a href="#4-7、查看cpu内存使用情况" class="headerlink" title="4.7、查看cpu内存使用情况"></a>4.7、查看cpu内存使用情况</h3><p>docker stats</p>
<p>每秒刷新</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6335759016f2c2beb1644ece.jpg"></p>
<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>element-ui 日期范围组件，时间跨度不能超过一年</title>
    <url>/posts/2990280294.html</url>
    <content><![CDATA[<html><head></head><body><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>日期范围的筛选，开始日期和结束日期不能超过1年（1年固定按365天计算），并且在选定一个时间的时候计算可选的日期范围，不在范围内的日期要置灰不可选中。如下图：<br><img data-src="/images/base/loading03.svg" data-original="https://pic2.imgdb.cn/item/645b216a0d2dde57772df748.jpg"><br>查看<code>element-ui</code>中<code>DatePicker</code>组件的<code>属性、事件、方法</code>，发现组件提供了<code>Picker Options</code>属性配置项<br><img data-src="/images/base/loading03.svg" data-original="https://pic2.imgdb.cn/item/645b218a0d2dde57772e14fd.jpg"><br>使用<code>disabledDate</code>和<code>onPick</code>配置项</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>这里有一个需要注意的点，可选择的日期范围是根据用户选择的第一个日期动态计算出来的，所以，我们应该吧Picker Options放到计算属性<code>computed</code>中返回。</p>
<p>下面展示我的日期范围筛选的基础控件代码（该控件集成在业务架构中，无关代码可自行忽略，可直接定位到<code>pickerOptions</code>部分）</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">ref</span>=<span class="string">"form"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:rules</span>=<span class="string">"rules"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:model</span>=<span class="string">"controlForm"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:label-width</span>=<span class="string">"itemData.labelWidth"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:label-position</span>=<span class="string">"itemData.labelPosition"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-form-item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:label</span>=<span class="string">"itemData.showLabel ? itemData.fieldLabel : ''"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:prop</span>=<span class="string">"propName"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-date-picker</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:style</span>=<span class="string">"{ width: itemData.rightWidth }"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">v-model</span>=<span class="string">"controlForm.value"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:format</span>=<span class="string">"itemData.format || 'yyyy-MM-dd'"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:value-format</span>=<span class="string">"itemData.format || 'yyyyMMdd'"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">align</span>=<span class="string">"right"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">"daterange"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">unlink-panels</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">range-separator</span>=<span class="string">"至"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">start-placeholder</span>=<span class="string">"开始日期"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">end-placeholder</span>=<span class="string">"结束日期"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:picker-options</span>=<span class="string">"pickerOptions"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:readonly</span>=<span class="string">"isDisable"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:editable</span>=<span class="string">"itemData.editable"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:clearable</span>=<span class="string">"!itemData.required"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        @<span class="attr">change</span>=<span class="string">"handleChange"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">"moment"</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> { isObject, getWeekStartDate, getWeekEndDate } <span class="keyword">from</span> <span class="string">'@/libs/utils'</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">'Control-RangeDate'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">itemData</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">Object</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="function">() =&gt;</span> { }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: {},</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isDisable</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">controlForm</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">value</span>: <span class="string">''</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">rules</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">value</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">required</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">message</span>: <span class="string">`请选择<span class="subst">${<span class="variable language_">this</span>.itemData.placeholder || <span class="variable language_">this</span>.itemData.fieldLabel}</span>`</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">trigger</span>: <span class="string">'blur'</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">pickTime</span>: <span class="literal">null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">propName</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> name = <span class="string">''</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">isNotNull</span> === <span class="number">1</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        name = <span class="string">'value'</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> name</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// pick-option 采用计算属性的方式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">pickerOptions</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> _this = <span class="variable language_">this</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">disabledDate</span>(<span class="params">time</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (_this.<span class="property">pickTime</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> curTime = <span class="title function_">moment</span>(<span class="title function_">moment</span>(_this.<span class="property">pickTime</span>).<span class="title function_">format</span>(<span class="string">'YYYY-MM-DD'</span>)).<span class="title function_">valueOf</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// pickTime 前后 365 天 &amp;&amp; 不大于今天</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>(curTime - <span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">365</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> end = <span class="keyword">new</span> <span class="title class_">Date</span>(curTime + <span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">365</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> time.<span class="title function_">getTime</span>() &gt; <span class="title class_">Date</span>.<span class="title function_">now</span>() || time.<span class="title function_">getTime</span>() &lt; start || time.<span class="title function_">getTime</span>() &gt; end</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> time.<span class="title function_">getTime</span>() &gt; <span class="title class_">Date</span>.<span class="title function_">now</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">onPick</span>(<span class="params">{ maxDate, minDate }</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (!maxDate) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            _this.<span class="property">pickTime</span> = minDate</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">shortcuts</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">text</span>: <span class="string">'今天'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">onClick</span>(<span class="params">picker</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> end = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">setHours</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              picker.$emit(<span class="string">'pick'</span>, [start, end])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">text</span>: <span class="string">'昨天'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">onClick</span>(<span class="params">picker</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> end = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">setHours</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)) - <span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              end.<span class="title function_">setTime</span>(start.<span class="title function_">getTime</span>() + (<span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">1</span> - <span class="number">1</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              picker.$emit(<span class="string">'pick'</span>, [start, end])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">text</span>: <span class="string">'本周'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">onClick</span>(<span class="params">picker</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">let</span> end = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">let</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              start = <span class="title function_">getWeekStartDate</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              end = <span class="title function_">getWeekEndDate</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              end.<span class="title function_">setTime</span>(end.<span class="title function_">getTime</span>() + (<span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">1</span> - <span class="number">1</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              picker.$emit(<span class="string">'pick'</span>, [start, end])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">text</span>: <span class="string">'最近一周'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">onClick</span>(<span class="params">picker</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> end = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              start.<span class="title function_">setTime</span>(start.<span class="title function_">getTime</span>() + (<span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">7</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              picker.$emit(<span class="string">'pick'</span>, [start, end])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">text</span>: <span class="string">'最近一个月'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">onClick</span>(<span class="params">picker</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> end = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              start.<span class="title function_">setTime</span>(start.<span class="title function_">getTime</span>() + (<span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">30</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              picker.$emit(<span class="string">'pick'</span>, [start, end])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">text</span>: <span class="string">'最近三个月'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">onClick</span>(<span class="params">picker</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> end = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              start.<span class="title function_">setTime</span>(start.<span class="title function_">getTime</span>() + (<span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">90</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              picker.$emit(<span class="string">'pick'</span>, [start, end])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">watch</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">itemData</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">handler</span>(<span class="params">newV</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">isDisable</span> = newV.<span class="property">readonly</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">deep</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">immediate</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) { },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) { },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 移除校验</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">clearVerify</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">form</span>.<span class="title function_">clearValidate</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 初始化带入值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">initVal</span>(<span class="params">obj = {}</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">clearVerify</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (<span class="title function_">isObject</span>(obj)) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">controlForm</span>.<span class="property">value</span> = obj[<span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">fieldName</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">controlData</span> = obj[<span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">fieldName</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// this.$emit('update:controlData', obj[this.itemData.fieldName])</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 初始化默认值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">updata</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">clearVerify</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">controlForm</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">defaultValue</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">controlData</span> = <span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">defaultValue</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 重置 - 恢复成默认值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">reset</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">controlForm</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">defaultValue</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">controlData</span> = <span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">defaultValue</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleChange</span>(<span class="params">val</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">controlData</span> = val</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">'update:controlData'</span>, val || <span class="string">''</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">verifyForm</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> isPass = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">form</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (!valid) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          isPass = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      })</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> isPass</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">updated</span>(<span class="params"></span>) { },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>) { },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">'less'</span> <span class="attr">rel</span>=<span class="string">'stylesheet/less'</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="keyword">@import</span> <span class="string">"../common.less"</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="主要代码解析"><a href="#主要代码解析" class="headerlink" title="主要代码解析"></a>主要代码解析</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="title function_">disabledDate</span>(<span class="params">time</span>) {</span><br><span class="line">    <span class="keyword">if</span> (_this.<span class="property">pickTime</span>) {</span><br><span class="line">      <span class="keyword">const</span> curTime = <span class="title function_">moment</span>(<span class="title function_">moment</span>(_this.<span class="property">pickTime</span>).<span class="title function_">format</span>(<span class="string">'YYYY-MM-DD'</span>)).<span class="title function_">valueOf</span>();</span><br><span class="line">      <span class="comment">// pickTime 前后 365 天 &amp;&amp; 不大于今天</span></span><br><span class="line">      <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>(curTime - <span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">365</span>)</span><br><span class="line">      <span class="keyword">const</span> end = <span class="keyword">new</span> <span class="title class_">Date</span>(curTime + <span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">365</span>)</span><br><span class="line">      <span class="keyword">return</span> time.<span class="title function_">getTime</span>() &gt; <span class="title class_">Date</span>.<span class="title function_">now</span>() || time.<span class="title function_">getTime</span>() &lt; start || time.<span class="title function_">getTime</span>() &gt; end</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> time.<span class="title function_">getTime</span>() &gt; <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">  },</span><br><span class="line">  <span class="title function_">onPick</span>(<span class="params">{ maxDate, minDate }</span>) {</span><br><span class="line">    <span class="keyword">if</span> (!maxDate) {</span><br><span class="line">      _this.<span class="property">pickTime</span> = minDate</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>通过<code>onPick</code>回调函数可以拿到选中的日期<code>pickTime</code>，然后在<code>disabledDate</code>属性中计算并返回可选的日期范围，主要还是依赖<code>computed</code>的计算属性，依赖的<code>data</code>属性发生变化后会重新计算。</p>
</body></html>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>.env.[mode]文件中如何添加注释？</title>
    <url>/posts/2584380968.html</url>
    <content><![CDATA[<html><head></head><body><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Vue-Cli</code> 允许我们在项目根目录创建<code>.env.[mode]</code>文件来设置一些打包编译的启动参数，通过执行脚本的时候加<code>mode</code>参数，指定不同环境需要加载的配置文件</p>
<p>形如： <code>.env.prod</code></p>
<figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">NODE_ENV</span>=<span class="string">'production'</span></span><br><span class="line"><span class="attr">VUE_APP_PATH</span>=<span class="string">'./'</span></span><br><span class="line"><span class="attr">VUE_APP_RUNTIME</span>=<span class="string">'prod'</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>怎么在 <code>.env.prod</code> 文件中添加注释呢？</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这要看<code>vue</code>是怎么解析 <code>.env.prod</code> 文件的</p>
<p>通过启动脚本参数 <code>--mode prod</code>，一路找到了处理 <code>.env.prod</code> 文件的逻辑，让我们一块看下</p>
<p><code>path：node_modules\@vue\cli-service\lib\Service.js</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">'dotenv'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">loadEnv (mode) {</span><br><span class="line">    <span class="keyword">const</span> logger = <span class="title function_">debug</span>(<span class="string">'vue:env'</span>)</span><br><span class="line">    <span class="keyword">const</span> basePath = path.<span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="string">`.env<span class="subst">${mode ? <span class="string">`.<span class="subst">${mode}</span>`</span> : <span class="string">``</span>}</span>`</span>)</span><br><span class="line">    <span class="keyword">const</span> localPath = <span class="string">`<span class="subst">${basePath}</span>.local`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">load</span> = envPath =&gt; {</span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">const</span> env = dotenv.<span class="title function_">config</span>({ <span class="attr">path</span>: envPath, <span class="attr">debug</span>: process.<span class="property">env</span>.<span class="property">DEBUG</span> })</span><br><span class="line">        <span class="title function_">dotenvExpand</span>(env)</span><br><span class="line">        <span class="title function_">logger</span>(envPath, env)</span><br><span class="line">      } <span class="keyword">catch</span> (err) {</span><br><span class="line">        <span class="comment">// only ignore error if file is not found</span></span><br><span class="line">        <span class="keyword">if</span> (err.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">'ENOENT'</span>) &lt; <span class="number">0</span>) {</span><br><span class="line">          <span class="title function_">error</span>(err)</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="title function_">load</span>(localPath)</span><br><span class="line">    <span class="title function_">load</span>(basePath)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// by default, NODE_ENV and BABEL_ENV are set to "development" unless mode</span></span><br><span class="line">    <span class="comment">// is production or test. However the value in .env files will take higher</span></span><br><span class="line">    <span class="comment">// priority.</span></span><br><span class="line">    <span class="keyword">if</span> (mode) {</span><br><span class="line">      <span class="comment">// always set NODE_ENV during tests</span></span><br><span class="line">      <span class="comment">// as that is necessary for tests to not be affected by each other</span></span><br><span class="line">      <span class="keyword">const</span> shouldForceDefaultEnv = (</span><br><span class="line">        process.<span class="property">env</span>.<span class="property">VUE_CLI_TEST</span> &amp;&amp;</span><br><span class="line">        !process.<span class="property">env</span>.<span class="property">VUE_CLI_TEST_TESTING_ENV</span></span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">const</span> defaultNodeEnv = (mode === <span class="string">'production'</span> || mode === <span class="string">'test'</span>)</span><br><span class="line">        ? mode</span><br><span class="line">        : <span class="string">'development'</span></span><br><span class="line">      <span class="keyword">if</span> (shouldForceDefaultEnv || process.<span class="property">env</span>.<span class="property">NODE_ENV</span> == <span class="literal">null</span>) {</span><br><span class="line">        process.<span class="property">env</span>.<span class="property">NODE_ENV</span> = defaultNodeEnv</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> (shouldForceDefaultEnv || process.<span class="property">env</span>.<span class="property">BABEL_ENV</span> == <span class="literal">null</span>) {</span><br><span class="line">        process.<span class="property">env</span>.<span class="property">BABEL_ENV</span> = defaultNodeEnv</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<p>从上面的代码，可以得知，<code>vue</code>使用<code>dotenv</code>解析<code> .env.prod</code> 文件，并将环境变量从 <code>.env[mode]</code> 文件中加载到 <code>process.env</code> 环境变量中</p>
<h2 id="解决（dotenv）"><a href="#解决（dotenv）" class="headerlink" title="解决（dotenv）"></a>解决（dotenv）</h2><p><code>dotenv</code>插件已经被 <code>Vue-Cli</code> 集成了</p>
<p><a href="https://github.com/motdotla/dotenv#rules">GitHub地址</a></p>
<p><code>README.md</code> 中有这么一段话：</p>
<ul>
<li>“# marks the beginning of a comment (unless when the value is wrapped in quotes)”</li>
</ul>
<p>这就是我们要找的，在<code>.env.[mode]</code> 文件中，可以使用 <code>#</code> 进行注释</p>
<h3 id="使用测试"><a href="#使用测试" class="headerlink" title="使用测试"></a>使用测试</h3><ol>
<li><code>path: .env.prod</code> 参数配置</li>
</ol>
<figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">NODE_ENV</span>=<span class="string">'production'</span></span><br><span class="line"><span class="comment"># VUE_APP_PATH='/pc/'</span></span><br><span class="line"><span class="attr">VUE_APP_PATH</span>=<span class="string">'./'</span></span><br><span class="line"><span class="attr">VUE_APP_RUNTIME</span>=<span class="string">'prod'</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li><code>package.json</code> 文件脚本命令配置<code>--mode</code>参数</li>
</ol>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: {</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"vue-cli-service build --mode prod"</span>,</span><br><span class="line">  },</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>执行 <code>npm run build</code> 命令，输出如下：</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">NODE_ENV=== production</span><br><span class="line">VUE_APP_PATH=== ./</span><br></pre></td></tr></tbody></table></figure>

<p>本文到此为止，要想了解更多<code>dotenv</code>请自行探索，感谢观看😉</p>
<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://img-blog.csdnimg.cn/img_convert/bd14318dfe358078af5f56cdf6895446.gif"></p>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>git代码数据统计</title>
    <url>/posts/389559366.html</url>
    <content><![CDATA[<html><head></head><body><h2 id="gitbash-终端执行如下命令"><a href="#gitbash-终端执行如下命令" class="headerlink" title="gitbash 终端执行如下命令"></a>gitbash 终端执行如下命令</h2><ol>
<li><p>查看git上的个人代码量（username为gitlab的账户名）：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --author=<span class="string">"username"</span> --pretty=tformat: --numstat | awk <span class="string">'{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc }'</span> -</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>统计每个人的增删行数：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --format=<span class="string">'%aN'</span> | <span class="built_in">sort</span> -u | <span class="keyword">while</span> <span class="built_in">read</span> name; <span class="keyword">do</span> <span class="built_in">echo</span> -en <span class="string">"<span class="variable">$name</span>\t"</span>; git <span class="built_in">log</span> --author=<span class="string">"<span class="variable">$name</span>"</span> --pretty=tformat: --numstat | awk <span class="string">'{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc }'</span> -; <span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>统计某段时间内所有人的代码量（修改起止时间，如果指定某一个人，将name更换为gitlab的账户名）：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --format=<span class="string">'%aN'</span> | <span class="built_in">sort</span> -u | <span class="keyword">while</span> <span class="built_in">read</span> name; <span class="keyword">do</span> <span class="built_in">echo</span> -en <span class="string">"<span class="variable">$name</span>\t"</span>; git <span class="built_in">log</span> --author=<span class="string">"<span class="variable">$name</span>"</span> --pretty=tformat: --since ==2021–10-01 --until=2021-10-30 --numstat | awk <span class="string">'{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc }'</span> -; <span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>查看仓库提交者排名前5：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=<span class="string">'%aN'</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -k1 -n -r | <span class="built_in">head</span> -n 5</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>贡献值统计：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=<span class="string">'%aN'</span> | <span class="built_in">sort</span> -u | <span class="built_in">wc</span> -l</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>提交数统计：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline | <span class="built_in">wc</span> -l</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="git-log参数说明"><a href="#git-log参数说明" class="headerlink" title="git log参数说明"></a>git log参数说明</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">--author   指定作者</span><br><span class="line">--<span class="built_in">stat</span>   显示每次更新的文件修改统计信息，会列出具体文件列表</span><br><span class="line">--shortstat    统计每个commit 的文件修改行数，包括增加，删除，但不列出文件列表：</span><br><span class="line">--numstat   统计每个commit 的文件修改行数，包括增加，删除，并列出文件列表：</span><br><span class="line"></span><br><span class="line">-p 选项展开显示每次提交的内容差异，用-2 则仅显示最近的两次更新,例如：git <span class="built_in">log</span> -p  -2</span><br><span class="line">--name-only 仅在提交信息后显示已修改的文件清单</span><br><span class="line">--name-status 显示新增、修改、删除的文件清单</span><br><span class="line">--abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符</span><br><span class="line">--relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）</span><br><span class="line">--graph 显示 ASCII 图形表示的分支合并历史</span><br><span class="line">--pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）,例如： git <span class="built_in">log</span> --pretty=oneline ; git <span class="built_in">log</span> --pretty=short ; git <span class="built_in">log</span> --pretty=full ; git <span class="built_in">log</span> --pretty=fuller</span><br><span class="line">--pretty=tformat:   可以定制要显示的记录格式，这样的输出便于后期编程提取分析</span><br><span class="line">       例如：git <span class="built_in">log</span> --pretty=format:<span class="string">""</span>%h - %an, %ar : %s<span class="string">""</span></span><br><span class="line">       下面列出了常用的格式占位符写法及其代表的意义。</span><br><span class="line">       选项       说明</span><br><span class="line">       %H      提交对象（commit）的完整哈希字串</span><br><span class="line">       %h      提交对象的简短哈希字串</span><br><span class="line">       %T      树对象（tree）的完整哈希字串</span><br><span class="line">       %t      树对象的简短哈希字串</span><br><span class="line">       %P      父对象（parent）的完整哈希字串</span><br><span class="line">       %p      父对象的简短哈希字串</span><br><span class="line">       %an     作者（author）的名字</span><br><span class="line">       %ae     作者的电子邮件地址</span><br><span class="line">       %ad     作者修订日期（可以用 -<span class="built_in">date</span>= 选项定制格式）</span><br><span class="line">       %ar     作者修订日期，按多久以前的方式显示</span><br><span class="line">       %cn     提交者(committer)的名字</span><br><span class="line">       %ce     提交者的电子邮件地址</span><br><span class="line">       %<span class="built_in">cd</span>     提交日期</span><br><span class="line">       %cr     提交日期，按多久以前的方式显示</span><br><span class="line">       %s      提交说明</span><br><span class="line"></span><br><span class="line">--since  限制显示输出的范围，</span><br><span class="line">       例如： git <span class="built_in">log</span> --since=2.weeks    显示最近两周的提交</span><br><span class="line">       选项 说明</span><br><span class="line">       -(n)    仅显示最近的 n 条提交</span><br><span class="line">       --since, --after 仅显示指定时间之后的提交。</span><br><span class="line">       --until, --before 仅显示指定时间之前的提交。</span><br><span class="line">       --author 仅显示指定作者相关的提交。</span><br><span class="line">       --committer 仅显示指定提交者相关的提交。</span><br></pre></td></tr></tbody></table></figure>

<h2 id="其它统计方式"><a href="#其它统计方式" class="headerlink" title="其它统计方式"></a>其它统计方式</h2><ol>
<li>工具、插件统计：gitstats、cloc</li>
<li>python统计</li>
<li>还有用接口统计的</li>
<li>……</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>通过 Git log 统计，稍微会麻烦一些，需要有一些 awk 知识的储备；</li>
<li>使用插件 git_stats 来生成可视化报告，对用户友好。美中不足就是会在当前项目增加很多 html 统计可视化文件；</li>
<li>命令行工具 cloc，简单易用，无侵入，使用门槛低；</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>js获取项目git分支信息</title>
    <url>/posts/3067788882.html</url>
    <content><![CDATA[<html><head></head><body><h2 id="1、git-bash-获取分支信息"><a href="#1、git-bash-获取分支信息" class="headerlink" title="1、git bash 获取分支信息"></a>1、git bash 获取分支信息</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取当前分支名</span></span><br><span class="line">git rev-parse --abbrev-ref HEAD</span><br><span class="line">git branch --show-current</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前hash</span></span><br><span class="line">git rev-parse HEAD</span><br><span class="line">git rev-parse --short HEAD  <span class="comment"># 短的</span></span><br></pre></td></tr></tbody></table></figure>
<p>上面的代码是通过git命令获取的分支信息，怎么可以在项目代码里面获取分支信息呢？请看下文👇</p>
<h2 id="2、JavaScript-通过-execa-插件获取项目分支信息"><a href="#2、JavaScript-通过-execa-插件获取项目分支信息" class="headerlink" title="2、JavaScript 通过 execa 插件获取项目分支信息"></a>2、JavaScript 通过 <a href="https://github.com/sindresorhus/execa">execa</a> 插件获取项目分支信息</h2><p>execa具备如下特点：</p>
<ul>
<li><p>Promise接口</p>
</li>
<li><p>从输出中删除最后的换行符，这样您就不必执行stdout.trim()</p>
</li>
<li><p>支持<strong>跨平台</strong>的shebang二进制文件</p>
</li>
<li><p>改进Windows支持。</p>
</li>
<li><p>更高的最大缓冲区。100mb而不是200kb。</p>
</li>
<li><p>按名称执行本地安装的二进制文件。</p>
</li>
<li><p>在父进程终止时清除派生的进程。</p>
</li>
<li><p>从 stdout和stderr获得交错输出，类似于在终端上打印的输出。(<strong>异步</strong>)</p>
</li>
<li><p>可以指定文件和参数作为一个单一的字符串没有外壳</p>
</li>
<li><p>更具描述性的错误。</p>
</li>
</ul>
<ol>
<li><p>安装 execa</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install execa -S</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>简单使用 execa</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; {</span><br><span class="line">    <span class="keyword">const</span> {stdout} = <span class="keyword">await</span> <span class="title function_">execa</span>(<span class="string">'echo'</span>, [<span class="string">'unicorns'</span>]);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stdout);</span><br><span class="line">    <span class="comment">//=&gt; 'unicorns'</span></span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line"><span class="comment">// stdout 表示执行命令的输出结果</span></span><br><span class="line"><span class="comment">/*{</span></span><br><span class="line"><span class="comment">  command: 'echo unicorns',</span></span><br><span class="line"><span class="comment">  escapedCommand: 'echo unicorns',</span></span><br><span class="line"><span class="comment">  exitCode: 0,</span></span><br><span class="line"><span class="comment">  stdout: '"unicorns"',</span></span><br><span class="line"><span class="comment">  stderr: '',</span></span><br><span class="line"><span class="comment">  all: undefined,</span></span><br><span class="line"><span class="comment">  failed: false,</span></span><br><span class="line"><span class="comment">  timedOut: false,</span></span><br><span class="line"><span class="comment">  isCanceled: false,</span></span><br><span class="line"><span class="comment">  killed: false</span></span><br><span class="line"><span class="comment">}*/</span></span><br></pre></td></tr></tbody></table></figure>
<p>execa还可以执行脚本命令，并输出结果，下面看一下如何在代码里面获取当前操作的分支👇</p>
</li>
<li><p>实际项目中的代码</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getGitBranch</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> res = execa.<span class="title function_">commandSync</span>(<span class="string">'git rev-parse --abbrev-ref HEAD'</span>);</span><br><span class="line">  <span class="keyword">return</span> res.<span class="property">stdout</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> curbranch = <span class="title function_">getGitBranch</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'curbranch=='</span>, curbranch); <span class="comment">// master</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下是res输出</span></span><br><span class="line">curbranch== master</span><br><span class="line">{</span><br><span class="line">  <span class="attr">command</span>: <span class="string">'git rev-parse --abbrev-ref HEAD'</span>,</span><br><span class="line">  <span class="attr">escapedCommand</span>: <span class="string">'git rev-parse --abbrev-ref HEAD'</span>,</span><br><span class="line">  <span class="attr">exitCode</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">stdout</span>: <span class="string">'master'</span>, # 命令执行结果输出</span><br><span class="line">  <span class="attr">stderr</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">failed</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">timedOut</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">isCanceled</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">killed</span>: <span class="literal">false</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>下面说一下脚本获取方式</p>
</li>
</ol>
<h2 id="3、脚本获取"><a href="#3、脚本获取" class="headerlink" title="3、脚本获取"></a>3、脚本获取</h2><blockquote>
<p>我在掘金 <a href="https://juejin.cn/post/7113502858481254413">git编写脚本 组合 commit-msg</a> 一文中使用脚本获取分支信息，感兴趣可以看一下。</p>
</blockquote>
<ol>
<li><p>可以看一下项目中 <code>.git/HEAD</code> 文件中的内容</p>
<p> HEAD指向最新放入仓库的版本</p>
</li>
</ol>
<figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">ref</span>: <span class="built_in">ref</span>s/heads/dev_0922</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>编写脚本</li>
</ol>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前分支</span></span><br><span class="line">line=$(<span class="built_in">head</span> -n +1 .git/HEAD)</span><br><span class="line">branch=<span class="variable">${line##*/}</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$branch</span> <span class="comment"># dev_0922</span></span><br></pre></td></tr></tbody></table></figure>

<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx部署多个前端项目</title>
    <url>/posts/1377411827.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>前端采用vue框架，主要介绍在同一个<code>ip+port</code>下（或域名），通过访问不同的<strong>子路径</strong>部署多个项目</p>
</blockquote>
<p>把前端打包好的项目直接放进 <code>nginx/html</code> 目录下面，</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://files.mdnice.com/user/34064/b05479c5-8e4f-432f-bf6a-c9cb8e2cd650.png"></p>
<h1 id="路由采用hash模式"><a href="#路由采用hash模式" class="headerlink" title="路由采用hash模式"></a>路由采用hash模式</h1><p>浏览器访问的时候在url后面拼接上要访问的项目子路径即可，会由<code>vue-router</code>接管路由（hash模式），后面的路径跳转、资源访问的操作也都会在子路径下处理，nginx配置很简单。</p>
<p><code>nginx/nginx.conf</code> 文件的部分配置如下：</p>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">        <span class="attribute">listen</span>        <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>   www.axample.com;</span><br><span class="line">        <span class="comment">#rewrite      ^ https://$server_name$request_uri permanent;</span></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line">        <span class="comment"># 在443端口配置里设置</span></span><br><span class="line">        <span class="section">location</span> / {</span><br><span class="line">             <span class="attribute">root</span> html;</span><br><span class="line">             <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">             <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html; <span class="comment"># uri统一资源标志符</span></span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>浏览器访问：</strong></p>
<ul>
<li><code>https://www.axample.com/lily/</code> -&gt; <code>https://www.axample.com/lily/#/home</code></li>
<li><code>https://www.axample.com/mimosa/</code> -&gt; <code>https://www.axample.com/mimosa/#/home</code></li>
</ul>
<h1 id="路由采用的都是history模式"><a href="#路由采用的都是history模式" class="headerlink" title="路由采用的都是history模式"></a>路由采用的都是history模式</h1><p>不同于 hash模式，History 模式需要服务器的支持，还是通过访问不同的子路径部署多个项目，当浏览器访问项目的时候，会把子路径带上去请求资源，存在找不到资源的情况，所以需要在应用路径和nginx配置上做修改。</p>
<h2 id="1、router-js设置"><a href="#1、router-js设置" class="headerlink" title="1、router.js设置"></a>1、router.js设置</h2><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Router({</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  <span class="keyword">base</span>: <span class="string">'/mimosa/'</span>,</span><br><span class="line">  routes,</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<p><code>base</code> 是应用的基路径，默认值: “/“。</p>
<p>例如，如果整个单页应用服务在 <code>/app/</code> 下，然后 <code>base</code> 就应该设为 <code>/app/</code>。</p>
<h2 id="2、vue-config-js修改publicPath"><a href="#2、vue-config-js修改publicPath" class="headerlink" title="2、vue.config.js修改publicPath"></a>2、vue.config.js修改publicPath</h2><blockquote>
<p>如果只修改了router的设置，没有修改<code>publicPath</code>，浏览器地址栏键入 <code>https://www.axample.com/lily/</code> 首次进入由于<code>vue-router</code>设置的 <code>redirect</code> 会重定向到首页地址，正常显示网页，但是再次刷新的时候，浏览器请求的是重定向过后的地址，静态文件地址指向错乱，<code>404</code>一般来说就是配置和真实的路径不符合，需要指定<code>try_files</code></p>
</blockquote>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">publicPath: IS_PROD ? <span class="string">'/lily/'</span> : <span class="string">'/'</span>,  <span class="regexp">//</span> 公共路径</span><br></pre></td></tr></tbody></table></figure>

<p><strong>publicPath用法：</strong></p>
<p><code>publicPath</code>: 部署应用包时的基本 URL，用法和 <code>webpack</code> 本身的 <code>output.publicPath</code> 一致，</p>
<p>但是 <code>Vue CLI</code> 在一些其他地方也需要用到这个值，所以为了保持统一，直接修改 <code>publicPath</code> 而不要直接修改 <code>webpack</code> 的 <code>output.publicPath</code>。</p>
<ol>
<li>默认情况下，<code>Vue CLI</code> 会假设你的应用是被部署在一个<strong>域名的根路径</strong>上，</li>
</ol>
<p>例如 <code>https://www.my-app.com/</code>。</p>
<ol start="2">
<li>如果应用被部署在一个<strong>子路径</strong>上，你就需要用这个选项指定这个子路径。</li>
</ol>
<p>例如，如果你的应用被部署在 <code>https://www.my-app.com/my-app/</code>，则设置 <code>publicPath</code> 为 <code>/my-app/</code>。</p>
<h2 id="3、nginx设置"><a href="#3、nginx设置" class="headerlink" title="3、nginx设置"></a>3、nginx设置</h2><p>增加子应用的配置</p>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 443端口配置</span></span><br><span class="line"></span><br><span class="line"><span class="section">location</span> / {</span><br><span class="line">  <span class="attribute">root</span> html;</span><br><span class="line">  <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">  <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">}</span><br><span class="line"><span class="section">location</span> /lily {</span><br><span class="line">  <span class="comment">#alias /usr/local/nginx/html/lily/;#把匹配到的路径重写, 注意要以/结尾</span></span><br><span class="line">  <span class="attribute">root</span> /usr/local/nginx/html; <span class="comment">#在匹配到的路径前面，增加root基础路径配置</span></span><br><span class="line">  <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /lily/index.html; <span class="comment"># 特定目录，匹配不到文件的话，增加/lily/index.html配置</span></span><br><span class="line">  <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">}</span><br><span class="line"><span class="section">location</span> /mimosa {</span><br><span class="line">  <span class="comment">#alias /usr/local/nginx/html/mimosa/;</span></span><br><span class="line">  <span class="attribute">root</span> /usr/local/nginx/html;</span><br><span class="line">  <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /mimosa/index.html;</span><br><span class="line">  <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>浏览器访问:</strong></p>
<ul>
<li><code>https://www.axample.com/lily/</code></li>
<li><code>https://www.axample.com/mimosa/</code></li>
</ul>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>上面讲解了通过访问不同的子路径部署多个前端项目，并结合<code>vue-router</code>的不同路由模式，给出不同的配置。</p>
<p>nginx方面的配置是写在同一个 <code>server</code> 块下的，通过 <code>location</code> 去分发。</p>
<p>也可以通过<strong>域名+端口</strong>的配置，实现部署多个前端项目，这个时候就需要添加不同的<code>server</code> 块配置了，感兴趣的小伙伴可以自己尝试一下🎁</p>
<hr>
<p>我是 <strong>甜点cc</strong>，个人网站: <a href="https://blog.i-xiao.space/">https://blog.i-xiao.space/</a></p>
<p>做人做事在于扬长而不是补短</p>
<p>公众号：【看见另一种可能】</p>
</body></html>]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx配置文件</title>
    <url>/posts/220664946.html</url>
    <content><![CDATA[<html><head></head><body><p>云服务器到期了，备份一下<code>nginx</code>的配置文件😊</p>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="comment"># 启动进程，通常设置成和cpu数量相等</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 起到 ulimit -a 的作用</span></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> {</span><br><span class="line">  <span class="comment"># epoll 是多路复用IO(I/O Multiplexing)中的一种方式</span></span><br><span class="line">  <span class="comment"># use epoll;</span></span><br><span class="line">  <span class="comment"># 单个worker processes 进程最大并发连接数，worker_connections小于work_rlimit_nofile</span></span><br><span class="line">  <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> {</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 关闭在错误页面中nginx的版本信息</span></span><br><span class="line">  <span class="attribute">server_tokens</span>   <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 反向代理设置为on, fastdfs设置为off</span></span><br><span class="line">  <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">  <span class="comment"># 在一个数据包里发送所有头文件</span></span><br><span class="line">  <span class="attribute">tcp_nopush</span>     <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">  <span class="attribute">tcp_nodelay</span>        <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">gzip</span>  <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">gzip_static</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</span><br><span class="line">  <span class="attribute">gzip_types</span> text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">  <span class="attribute">gzip_disable</span> <span class="string">"MSIE [1-6]."</span>;</span><br><span class="line">  <span class="comment"># 打开缓存的同时也指定了缓存最大数目，以及缓存的时间。我们可以设置一个相对高的最大时间，这样我们可以在它们不活动超过20秒后清除掉。</span></span><br><span class="line">  <span class="attribute">open_file_cache</span> max=<span class="number">65535</span> inactive=<span class="number">60s</span>;</span><br><span class="line">  <span class="comment"># 在open_file_cache中指定检测正确信息的间隔时间。</span></span><br><span class="line">  <span class="attribute">open_file_cache_valid</span> <span class="number">80s</span>;</span><br><span class="line">  <span class="comment"># 定义了open_file_cache中指令参数不活动时间期间里最小的文件数。</span></span><br><span class="line">  <span class="attribute">open_file_cache_min_uses</span> <span class="number">1</span>;</span><br><span class="line">  <span class="comment"># 指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件。我们也包括了服务器模缺，这些是在不同文件中定义的，如果你的服务模块不再这些位置，你就得修正这一行来指定正确的位置</span></span><br><span class="line">  <span class="attribute">open_file_cache_errors</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 设置请求头缓冲</span></span><br><span class="line">  <span class="comment"># 客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1x，不过由于一般系统分页都要大于1k，所以这里设置分页大小。分页大小用命令 getconf PAGESIZE 获得</span></span><br><span class="line">  <span class="attribute">client_header_buffer_size</span> <span class="number">4096</span>;</span><br><span class="line">  <span class="attribute">client_body_buffer_size</span> <span class="number">512k</span>;</span><br><span class="line">  <span class="comment"># 缓冲区代理缓冲用户端请求的最大字节数,如果请求大于指定的大小，则NGINX发回HTTP 413（Raquest Entity too large）错误.</span></span><br><span class="line">  <span class="attribute">client_max_body_size</span> <span class="number">128m</span>;</span><br><span class="line">  <span class="attribute">large_client_header_buffers</span> <span class="number">4</span> <span class="number">128k</span>;</span><br><span class="line">  <span class="attribute">client_header_timeout</span> <span class="number">15</span>;</span><br><span class="line">  <span class="attribute">client_body_timeout</span> <span class="number">15</span>;</span><br><span class="line">  <span class="comment"># 指定客户端的响应超时时间</span></span><br><span class="line">  <span class="attribute">send_timeout</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">18600</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  <span class="number">0.0.0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / {</span><br><span class="line">      <span class="attribute">root</span>   D:\mine-project\pc-web\dist;</span><br><span class="line">      <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">      <span class="attribute">try_files</span>  <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">      <span class="comment"># add_header Cache-Control no-cache;</span></span><br><span class="line">      <span class="comment"># add_header Content-Encoding gzip;</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /pcApi/ {</span><br><span class="line">      <span class="attribute">rewrite</span><span class="regexp"> ^/pcApi/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>; <span class="comment"># 把请求路径里不存在的路径重写掉</span></span><br><span class="line">      <span class="attribute">proxy_pass</span> http://172.15.37.225:3000;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="section">location</span> = /50x.html {</span><br><span class="line">      <span class="attribute">root</span>   html;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># server {</span></span><br><span class="line">    <span class="comment">#	listen 80;</span></span><br><span class="line">    <span class="comment">#	server_name 123.123.123.123;</span></span><br><span class="line">    <span class="comment">#	server_name my.example.com t.example.com;</span></span><br><span class="line">    <span class="comment">#	rewrite ^/(.*) https://${host}:1900/$1 redirect;</span></span><br><span class="line">    <span class="comment">#}</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server {</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / {</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    }</span></span><br><span class="line">    <span class="comment">#}</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server {</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / {</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    }</span></span><br><span class="line">    <span class="comment">#}</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># https配置 80转发443</span></span><br><span class="line">    <span class="comment">#server {</span></span><br><span class="line">      <span class="comment">#    listen        80;</span></span><br><span class="line">      <span class="comment">#    server_name   www.i-xiao.space;</span></span><br><span class="line">      <span class="comment">#    #server_name   118.190.59.105;</span></span><br><span class="line">      <span class="comment">#    rewrite       ^ https://$server_name$request_uri permanent; # http -&gt; https 80端口转发443端口</span></span><br><span class="line">      <span class="comment">#    # rewrite       ^ https://$server_name:8090 permanent;</span></span><br><span class="line">      <span class="comment">#    #charset koi8-r;</span></span><br><span class="line">      <span class="comment">#    add_header Cache-Control no-cache;</span></span><br><span class="line">    <span class="comment">#}</span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> {</span><br><span class="line">       <span class="comment">#监听443端口</span></span><br><span class="line">       <span class="attribute">listen</span>               <span class="number">443</span>;</span><br><span class="line">       <span class="comment">#你的域名</span></span><br><span class="line">       <span class="comment">#server_name          i-xiao.space;</span></span><br><span class="line">       <span class="attribute">ssl</span>                  <span class="literal">on</span>;</span><br><span class="line">       <span class="attribute">root</span>                 /usr/local/nginx/html;</span><br><span class="line">       <span class="comment">#index index.html index.htm;</span></span><br><span class="line">       <span class="attribute">ssl_certificate</span>      /usr/local/nginx/cert/i-xiao.space.pem;</span><br><span class="line">       <span class="attribute">ssl_certificate_key</span>  /usr/local/nginx/cert/i-xiao.space.key;</span><br><span class="line">       <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line">       <span class="attribute">ssl_ciphers</span>          ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">       <span class="attribute">ssl_protocols</span>        TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">       <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">       <span class="section">location</span> / {</span><br><span class="line">           <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">	       <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line"></span><br><span class="line">           <span class="comment"># To allow POST on static pages 允许静态页使用POST方法</span></span><br><span class="line">           <span class="attribute">error_page</span>  <span class="number">405</span> =<span class="number">200</span> <span class="variable">$uri</span>;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 禁用缓存</span></span><br><span class="line">       <span class="section">location</span> = /index.html {</span><br><span class="line">            <span class="attribute">add_header</span> Cache-Control <span class="string">"no-cache, no-store"</span>;</span><br><span class="line">       }</span><br><span class="line">       <span class="section">location</span> /lily {</span><br><span class="line">             <span class="comment">#alias /usr/local/nginx/html/lily/;#把匹配到的路径重写, 注意要以/结尾</span></span><br><span class="line">             <span class="attribute">root</span> /usr/local/nginx/html; <span class="comment">#在匹配到的路径前面，增加root基础路径配置</span></span><br><span class="line">             <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /lily/index.html; <span class="comment"># 指定特定路径</span></span><br><span class="line">             <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">        }</span><br><span class="line">        <span class="section">location</span> /mimosa {</span><br><span class="line">             <span class="comment">#alias /usr/local/nginx/html/mimosa/;</span></span><br><span class="line">             <span class="attribute">root</span> /usr/local/nginx/html;</span><br><span class="line">             <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /mimosa/index.html;</span><br><span class="line">             <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">        }</span><br><span class="line">        <span class="section">location</span> /pcApi/ {</span><br><span class="line">             <span class="attribute">proxy_pass</span> http://118.190.59.105:3000/;</span><br><span class="line">        }</span><br><span class="line">        <span class="section">location</span> /supervisor/ {</span><br><span class="line">             <span class="attribute">proxy_pass</span> http://118.190.59.105:9001/;</span><br><span class="line">        }</span><br><span class="line">        <span class="section">location</span> /pc/ {</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://118.190.59.105:8090/;</span><br><span class="line">            <span class="comment"># try_files $uri $uri/ /index.html;</span></span><br><span class="line">            <span class="comment"># index index.html index.htm;</span></span><br><span class="line">        }</span><br><span class="line">        <span class="section">location</span> /h5/ {</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://118.190.59.105:8001/;</span><br><span class="line">            <span class="attribute">add_header</span> Cache-Control <span class="literal">no</span>-cache;</span><br><span class="line">        }</span><br><span class="line">        <span class="section">location</span> /student/ {</span><br><span class="line">            <span class="comment"># 暂时不正确访问</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://118.190.59.105:3000/;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment"># 静态文件-人脸识别模型文件</span></span><br><span class="line">        <span class="section">location</span> /model-face/ {</span><br><span class="line">            <span class="attribute">root</span> /var/pc-h5/static;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Credentials'</span> <span class="string">'true'</span>;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET, POST, OPTIONS'</span>;</span><br><span class="line">            <span class="attribute">add_header</span> Cache-Control <span class="literal">no</span>-cache;</span><br><span class="line">            <span class="comment"># add_header Content-Encoding gzip;</span></span><br><span class="line">            <span class="comment"># add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';</span></span><br><span class="line">        }</span><br><span class="line">        <span class="section">location</span> /static/ {</span><br><span class="line">            <span class="attribute">root</span> /var/pc-h5;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</span><br><span class="line">            <span class="attribute">add_header</span> Cache-Control <span class="literal">no</span>-cache;</span><br><span class="line">        }</span><br><span class="line">       <span class="attribute">error_page</span>  <span class="number">404</span>              /<span class="number">404</span>.html;</span><br><span class="line">       <span class="attribute">error_page</span>  <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">       <span class="section">location</span> = /50x.html {</span><br><span class="line">             <span class="attribute">root</span>   html;</span><br><span class="line">       }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>npm 脚本命令使用解析</title>
    <url>/posts/2334529800.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇是初识npm脚本命令，来个引子，看看风向，可以的话后面陆续介绍其它实用命令😉。</p>
</blockquote>
<h2 id="1、执行原理"><a href="#1、执行原理" class="headerlink" title="1、执行原理"></a>1、执行原理</h2><p>使用npm run script执行脚本的时候都会创建一个shell，然后在shell中执行指定的脚本。</p>
<p>这个shell会将当前项目的可执行依赖目录（即<code>node_modules/.bin</code>）添加到环境变量path中，当执行之后之后再恢复原样。就是说脚本命令中的依赖名会直接找到node_modules/.bin下面的对应脚本，而不需要加上路径。</p>
<h2 id="2、执行顺序"><a href="#2、执行顺序" class="headerlink" title="2、执行顺序"></a>2、执行顺序</h2><p>一个npm脚本可以执行多个任务，这些任务之间可以指定不同的执行顺序。</p>
<ol>
<li>‘&amp;’ 并行执行顺序，同时执行<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"dev"</span><span class="punctuation">:</span><span class="string">"node test.js &amp; webpack"</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>‘&amp;&amp;’继发顺序，执行前面之后才可以执行后面</li>
</ol>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"dev"</span><span class="punctuation">:</span><span class="string">"node test.js &amp;&amp; webpack"</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="3、顺序钩子"><a href="#3、顺序钩子" class="headerlink" title="3、顺序钩子"></a>3、顺序钩子</h2><p>npm脚本自带两个顺序钩子，’pre’ 和 ‘post’</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"predev"</span><span class="punctuation">:</span><span class="string">"node test_one.js"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"dev"</span><span class="punctuation">:</span><span class="string">"node test_two.js"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"postdev"</span><span class="punctuation">:</span><span class="string">"node test_three.js"</span></span><br></pre></td></tr></tbody></table></figure>

<p>当执行 npm run dev 的时候默认就会执行</p>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">npm <span class="built_in">run</span> predev &amp;&amp; npm <span class="built_in">run</span> dev &amp;&amp; npm <span class="built_in">run</span> postdev</span><br></pre></td></tr></tbody></table></figure>

<h2 id="4、生命周期脚本"><a href="#4、生命周期脚本" class="headerlink" title="4、生命周期脚本"></a>4、生命周期脚本</h2><ol>
<li><p><code>prepare</code>: (@4.0.0) 在打包之前运行，新版的<strong>husky</strong>就是写入的prepare脚本，进行安装的：<code>"prepare": "husky install",</code>。</p>
<p>👉 若想了解代码规范以及git提交信息规范，请来<a href="https://juejin.cn/post/7110083169067466766">这里</a></p>
</li>
<li><p><code>prepublish</code>: 在包发布之前运行</p>
</li>
<li><p><code>prepublishOnly</code>: 在本地运行，npm install没有任何参数</p>
</li>
<li><p><code>prepack</code>: 运行之后prepublish，但之前prepublishOnly</p>
</li>
<li><p><code>postpack</code>: 注意：如果通过 git 安装的包包含prepare脚本，则在打包和安装包之前dependencies，devDependencies将安装该脚本，并运行准备脚本。</p>
</li>
</ol>
<p>有一些特殊的生命周期脚本只在某些情况下发生。上面这些脚本发生在“pre”和“post”脚本之外。</p>
<h2 id="5、获取当前正在运行的脚本名称"><a href="#5、获取当前正在运行的脚本名称" class="headerlink" title="5、获取当前正在运行的脚本名称"></a>5、获取当前正在运行的脚本名称</h2><p>npm 提供一个 <code>npm_lifecycle_event</code> 变量，返回当前正在运行的脚本名称，可以配合顺序钩子使用</p>
<figure class="highlight arcade"><table><tbody><tr><td class="code"><pre><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const target = process.env.npm_lifecycle_event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(target === <span class="string">'predev'</span>){</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">'the process is predev'</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(target === <span class="string">'dev'</span>){</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">'the process is dev'</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(target === <span class="string">'postdev'</span>){</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">'this process is postdev'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="6、四个可以简写的脚本执行命令"><a href="#6、四个可以简写的脚本执行命令" class="headerlink" title="6、四个可以简写的脚本执行命令"></a>6、四个可以简写的脚本执行命令</h2><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">npm start === npm <span class="built_in">run</span> start</span><br><span class="line">npm stop === npm <span class="built_in">run</span> stop</span><br><span class="line">npm test === npm <span class="built_in">run</span> test</span><br><span class="line">npm restart === npm <span class="built_in">run</span> stop &amp;&amp; npm <span class="built_in">run</span> restart &amp;&amp; npm <span class="built_in">run</span> start</span><br></pre></td></tr></tbody></table></figure>

<h2 id="7、使用package-json内部变量"><a href="#7、使用package-json内部变量" class="headerlink" title="7、使用package.json内部变量"></a>7、使用package.json内部变量</h2><p>通过npm_package_前缀，npm脚本可以拿到npm的内部变量</p>
<p><code>package.json:</code></p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"name"</span> <span class="punctuation">:</span> <span class="string">"foo"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"config"</span> <span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"port"</span> <span class="punctuation">:</span> <span class="string">"8080"</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"scripts"</span> <span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"start"</span> <span class="punctuation">:</span> <span class="string">"node server.js"</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>

<p><code>test.js</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">env</span>.<span class="property">npm_package_config_port</span>) <span class="comment">// 8080</span></span><br></pre></td></tr></tbody></table></figure>

<p>👉 更多请看：<a href="https://docs.npmjs.com/cli/v6/using-npm/scripts">官方文档</a></p>
<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>NPM</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>perttier+eslint+husky——代码规范以及commit扫描代码</title>
    <url>/posts/1784044162.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇是在写个人 react-native 项目中运用总结的，其他项目配置略有差异，酌情使用</p>
</blockquote>
<h2 id="1、perttier"><a href="#1、perttier" class="headerlink" title="1、perttier"></a>1、perttier</h2><p>👉 <a href="https://www.prettier.cn/docs/install.html">官方文档</a></p>
<h3 id="1-1、步骤"><a href="#1-1、步骤" class="headerlink" title="1.1、步骤"></a>1.1、步骤</h3><h4 id="1-安装-prettier-并check-项目代码"><a href="#1-安装-prettier-并check-项目代码" class="headerlink" title="(1) 安装 prettier 并check 项目代码"></a>(1) 安装 prettier 并check 项目代码</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yarn add --dev --exact prettier</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加prettier的配置文件</span></span><br><span class="line"><span class="built_in">echo</span> module.exports = {}&gt; prettier.config.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行检查</span></span><br><span class="line">npx prettier --check .</span><br></pre></td></tr></tbody></table></figure>

<h4 id="2-配合使用-Git-hooks-（husky）"><a href="#2-配合使用-Git-hooks-（husky）" class="headerlink" title="(2) 配合使用 Git hooks （husky）"></a>(2) 配合使用 Git hooks （husky）</h4><p>👉 文档 <a href="https://www.npmjs.com/package/husky">husky</a></p>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><p>husky插件非常强大，代码开发周期的本地开发、代码格式检查、提交远程仓库等阶段关联起来，应用于整个开发流程管理里。如果有需要，也可以配置使用系统变更号、jire工单号等使用。</p>
<p>下图中的 以 <strong>.sample</strong> 结尾的钩子文件并不会在进行git操作的时候触发，只有这样的文件【pre-commit】的文件才会执行。如果只是单纯的手动修改文件名，确实可以在自己本地运行，但是，并不能同步到远程代码仓库，所以在协同开发下手动修改文件名还是会引发一些别的问题。然后 husky 就是用来解决这个问题的插件。</p>
<ul>
<li><p><strong>老版本的husky</strong>（之前用过4.2.5版本）是通过修改 .git/hooks 里面的钩子函数文件（去掉 .sample 扩展名），来达到拦截处理功能的</p>
</li>
<li><p><strong>新版本的husky</strong>（我用的最新的 8.0.1）支持在项目根目录下创建 .husky 目录，在里面编写需要用到的git hooks（如下图）。通过在 npm scripts 中增加脚本命令 “prepare”:”husky install”的方式，来使得协同开发人员拉取仓库代码并安装node_modules的时候，执行 husky install 命令【感兴趣请看<a href="https://juejin.cn/post/7124240474692386847">npm脚本命令解析</a>】 ，<strong>开启husky</strong>。</p>
</li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6352451e16f2c2beb1db37d8.jpg"><br><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6352454a16f2c2beb1db7bc6.jpg"><br><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6352455516f2c2beb1db8cc4.jpg"></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yarn add --dev husky lint-staged</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用 husky, 执行命令后可在项目目录查看效果 .git/config [core] hooksPath = .husky</span></span><br><span class="line"><span class="comment"># 混入 项目根目录下的 .husky 文件夹，以达到使用 git hooks 的目的</span></span><br><span class="line">npx husky install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在package.json 中写入 脚本</span></span><br><span class="line"><span class="comment"># 如果执行失败或者没有成功写入脚本，可选择升级npm版本的方式处理 npm install -g npm 继续执行命令</span></span><br><span class="line"><span class="comment"># 或者使用 该命令： npm pkg set scripts.prepare "husky install"</span></span><br><span class="line">npm set-script prepare <span class="string">"husky install"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 hook, 在根目录生成 .husky/pre-commit 文件</span></span><br><span class="line">npx husky add .husky/pre-commit <span class="string">"npx lint-staged"</span></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6352456416f2c2beb1dba3da.jpg"><br><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6352457516f2c2beb1dbb808.jpg"><br><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6352458a16f2c2beb1dbcfe2.jpg"></p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"prettier"</span><span class="punctuation">:</span> <span class="string">"2.7.0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"husky"</span><span class="punctuation">:</span> <span class="string">"^8.0.1"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"lint-staged"</span><span class="punctuation">:</span> <span class="string">"^13.0.1"</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="1-2、-配置-prettier-config-js"><a href="#1-2、-配置-prettier-config-js" class="headerlink" title="1.2、 配置 prettier.config.js"></a>1.2、 配置 prettier.config.js</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">  <span class="string">"arrowParens"</span>: <span class="string">"always"</span>,</span><br><span class="line">  <span class="string">"bracketSpacing"</span>: <span class="literal">true</span>, <span class="comment">// 在对象，数组括号与文字之间加空格 "{ foo: bar }"</span></span><br><span class="line">  <span class="string">"endOfLine"</span>: <span class="string">"auto"</span>, <span class="comment">// 结尾是 \n \r \n\r auto</span></span><br><span class="line">  <span class="string">"htmlWhitespaceSensitivity"</span>: <span class="string">"css"</span>,</span><br><span class="line">  <span class="string">"insertPragma"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"requirePragma"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"bracketSameLine"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"printWidth"</span>: <span class="number">120</span>, <span class="comment">// 超过最大值换行</span></span><br><span class="line">  <span class="string">"singleQuote"</span>: <span class="literal">true</span>, <span class="comment">// 使用单引号代替双引号</span></span><br><span class="line">  <span class="string">"useTabs"</span>: <span class="literal">false</span>, <span class="comment">// 缩进不使用tab，使用空格</span></span><br><span class="line">  <span class="string">"semi"</span>: <span class="literal">true</span>, <span class="comment">// 句尾添加分号</span></span><br><span class="line">  <span class="string">"tabWidth"</span>: <span class="number">2</span>, <span class="comment">// 缩进字节数</span></span><br><span class="line">  <span class="string">"trailingComma"</span>: <span class="string">"es5"</span>, <span class="comment">// 在对象或数组最后一个元素后面是否加逗号（在ES5中加尾逗号）</span></span><br><span class="line">  <span class="string">"jsxSingleQuote"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"quoteProps"</span>: <span class="string">"as-needed"</span>,</span><br><span class="line">  <span class="string">"proseWrap"</span>: <span class="string">"preserve"</span> <span class="comment">// 默认值。因为使用了一些折行敏感型的渲染器（如GitHub comment）而按照markdown文本样式进行折行</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2、配合使用ESLint"><a href="#2、配合使用ESLint" class="headerlink" title="2、配合使用ESLint"></a>2、配合使用ESLint</h2><h3 id="2-1、步骤"><a href="#2-1、步骤" class="headerlink" title="2.1、步骤"></a>2.1、步骤</h3><p>官网文档： <a href="http://eslint.cn/docs/user-guide/configuring">http://eslint.cn/docs/user-guide/configuring</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 项目中安装包</span></span><br><span class="line">yarn add eslint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 ESlint</span></span><br><span class="line">npx eslint --init</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6352459b16f2c2beb1dbe702.jpg"></p>
<h3 id="2-2、配置-eslintrc-js"><a href="#2-2、配置-eslintrc-js" class="headerlink" title="2.2、配置 .eslintrc.js"></a>2.2、配置 .eslintrc.js</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">  <span class="comment">// 解析器</span></span><br><span class="line">  <span class="string">"parser"</span>: <span class="string">'babel-eslint'</span>,</span><br><span class="line">  <span class="string">"env"</span>: {</span><br><span class="line">    <span class="string">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"es6"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"node"</span>: <span class="literal">true</span></span><br><span class="line">  },</span><br><span class="line">  <span class="string">"extends"</span>: [</span><br><span class="line">    <span class="string">"eslint:recommended"</span>,</span><br><span class="line">    <span class="string">"plugin:react/recommended"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"settings"</span>: {</span><br><span class="line">    <span class="string">"react"</span>: {</span><br><span class="line">      <span class="comment">// Warning: React version not specified in eslint-plugin-react settings.</span></span><br><span class="line">      <span class="string">"version"</span>: <span class="string">'detect'</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="string">"parserOptions"</span>: {</span><br><span class="line">    <span class="string">"ecmaFeatures"</span>: {</span><br><span class="line">      <span class="string">"jsx"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 支持装饰器 否则报 '@' 错误</span></span><br><span class="line">      <span class="string">"legacyDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"ecmaVersion"</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="string">"sourceType"</span>: <span class="string">"module"</span></span><br><span class="line">  },</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    <span class="string">"react"</span>,</span><br><span class="line">    <span class="string">"react-native"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"rules"</span>: {</span><br><span class="line">    <span class="string">"eqeqeq"</span>: <span class="number">2</span>, <span class="comment">// 必须使用 === 和 !==</span></span><br><span class="line">    <span class="string">"no-empty-function"</span>: <span class="number">2</span>, <span class="comment">// 禁止空函数</span></span><br><span class="line">    <span class="string">"no-multi-spaces"</span>: <span class="number">2</span>, <span class="comment">// 禁止使用多个空格</span></span><br><span class="line">    <span class="string">"no-trailing-spaces"</span>: <span class="number">2</span>, <span class="comment">// 禁止禁用行尾空格</span></span><br><span class="line">    <span class="string">"space-infix-ops"</span>: <span class="number">2</span>, <span class="comment">// 要求操作符周围有空格</span></span><br><span class="line">    <span class="string">"space-in-parens"</span>: <span class="number">2</span>, <span class="comment">// 强制在圆括号内使用一致的空格</span></span><br><span class="line">    <span class="string">"no-var"</span>: <span class="number">2</span>, <span class="comment">// 要求使用 let 或 const 而不是 var,</span></span><br><span class="line">    <span class="string">"no-unused-vars"</span>: <span class="number">2</span>, <span class="comment">// 禁止出现未使用过的变量</span></span><br><span class="line">    <span class="string">"react/prop-types"</span>: <span class="number">0</span> <span class="comment">// 防止在react组件定义中缺少props验证</span></span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3、husk-使用"><a href="#3、husk-使用" class="headerlink" title="3、husk 使用"></a>3、husk 使用</h2><p>文档：<a href="https://typicode.github.io/husky/#/?id=install">https://typicode.github.io/husky/#/?id=install</a></p>
<h3 id="3-1、package-json中添加配置"><a href="#3-1、package-json中添加配置" class="headerlink" title="3.1、package.json中添加配置"></a>3.1、package.json中添加配置</h3><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"husky"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"hooks"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"pre-commit"</span><span class="punctuation">:</span> <span class="string">"npm run format &amp;&amp; npm run lint:fix"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"commit-msg"</span><span class="punctuation">:</span> <span class="string">"commitlint -E HUSKY_GIT_PARAMS"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-2、完整的package-json"><a href="#3-2、完整的package-json" class="headerlink" title="3.2、完整的package.json"></a>3.2、完整的package.json</h3><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"myrnapp"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"version"</span><span class="punctuation">:</span> <span class="string">"0.0.1"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"private"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"scripts"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"android"</span><span class="punctuation">:</span> <span class="string">"react-native run-android"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"ios"</span><span class="punctuation">:</span> <span class="string">"react-native run-ios"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"start"</span><span class="punctuation">:</span> <span class="string">"react-native start"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"test"</span><span class="punctuation">:</span> <span class="string">"jest"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"lint"</span><span class="punctuation">:</span> <span class="string">"npx eslint --ext .js,.jsx,.ts,.tsx ./src"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"lint:fix"</span><span class="punctuation">:</span> <span class="string">"npx eslint --fix ."</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"lint-staged"</span><span class="punctuation">:</span> <span class="string">"lint-staged"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"format"</span><span class="punctuation">:</span> <span class="string">"prettier --write 'src/**/*.js'"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"prettier"</span><span class="punctuation">:</span> <span class="string">"npx prettier --write ."</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"prepare"</span><span class="punctuation">:</span> <span class="string">"husky install"</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"dependencies"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"@react-navigation/native"</span><span class="punctuation">:</span> <span class="string">"^6.0.10"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"@react-navigation/native-stack"</span><span class="punctuation">:</span> <span class="string">"^6.6.2"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"axios"</span><span class="punctuation">:</span> <span class="string">"^0.27.2"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"mobx"</span><span class="punctuation">:</span> <span class="string">"^6.6.0"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"mobx-react"</span><span class="punctuation">:</span> <span class="string">"^7.5.0"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"prop-types"</span><span class="punctuation">:</span> <span class="string">"^15.8.1"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"react"</span><span class="punctuation">:</span> <span class="string">"17.0.2"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"react-native"</span><span class="punctuation">:</span> <span class="string">"0.68.2"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"react-native-safe-area-context"</span><span class="punctuation">:</span> <span class="string">"^4.3.1"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"react-native-screens"</span><span class="punctuation">:</span> <span class="string">"^3.13.1"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"react-native-svg"</span><span class="punctuation">:</span> <span class="string">"^12.3.0"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"react-navigation"</span><span class="punctuation">:</span> <span class="string">"^4.4.4"</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"devDependencies"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"@babel/core"</span><span class="punctuation">:</span> <span class="string">"^7.12.9"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"@babel/plugin-proposal-decorators"</span><span class="punctuation">:</span> <span class="string">"^7.18.2"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"@babel/runtime"</span><span class="punctuation">:</span> <span class="string">"^7.12.5"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"@commitlint/cli"</span><span class="punctuation">:</span> <span class="string">"^17.0.2"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"@commitlint/config-conventional"</span><span class="punctuation">:</span> <span class="string">"^17.0.2"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"@react-native-community/eslint-config"</span><span class="punctuation">:</span> <span class="string">"^2.0.0"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"babel-eslint"</span><span class="punctuation">:</span> <span class="string">"^10.1.0"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"babel-jest"</span><span class="punctuation">:</span> <span class="string">"^26.6.3"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"eslint"</span><span class="punctuation">:</span> <span class="string">"^7.32.0"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"husky"</span><span class="punctuation">:</span> <span class="string">"^8.0.1"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"jest"</span><span class="punctuation">:</span> <span class="string">"^26.6.3"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"lint-staged"</span><span class="punctuation">:</span> <span class="string">"^13.0.1"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"metro-react-native-babel-preset"</span><span class="punctuation">:</span> <span class="string">"^0.67.0"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"prettier"</span><span class="punctuation">:</span> <span class="string">"2.7.0"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"react-native-svg-transformer"</span><span class="punctuation">:</span> <span class="string">"^1.0.0"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"react-test-renderer"</span><span class="punctuation">:</span> <span class="string">"17.0.2"</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"lint-staged"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"*.{js,jsx,ts,tsx}"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">"npx prettier --write"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">"npx eslint --fix"</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"husky"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"hooks"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"pre-commit"</span><span class="punctuation">:</span> <span class="string">"npm run format &amp;&amp; npm run lint:fix"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"commit-msg"</span><span class="punctuation">:</span> <span class="string">"commitlint -E HUSKY_GIT_PARAMS"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"jest"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"preset"</span><span class="punctuation">:</span> <span class="string">"react-native"</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-3、卸载-husky"><a href="#3-3、卸载-husky" class="headerlink" title="3.3、卸载 husky"></a>3.3、卸载 husky</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm uninstall husky &amp;&amp; git config --<span class="built_in">unset</span> core.hooksPath</span><br></pre></td></tr></tbody></table></figure>

<h2 id="4、整体使用效果"><a href="#4、整体使用效果" class="headerlink" title="4、整体使用效果"></a>4、整体使用效果</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'feat: 增加 prettier, eslint 配置'</span></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/635245b216f2c2beb1dc03c4.jpg"></p>
<p>下面这个图片是老版本husky的效果</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/635245d916f2c2beb1dc3d1d.jpg"></p>
<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>代码规范</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>代码规范</tag>
      </tags>
  </entry>
  <entry>
    <title>react-naive工作原理</title>
    <url>/posts/3691909616.html</url>
    <content><![CDATA[<html><head></head><body><p>react-naive工作原理是从react的工作原理衍生出来的</p>
<h2 id="react的工作原理"><a href="#react的工作原理" class="headerlink" title="react的工作原理"></a>react的工作原理</h2><p>在react中，virtual dom 就像一个中间层，介于开发者描述的视图与实际在页面上渲染的视图之间。为了在浏览器上渲染出可交互的用户界面，开发者必须操作浏览器的Dom，这个操作代价昂贵，过度操作dom会给性能带来影响。React 维护了一个内存版本的 DOM，通过计算得出必要的最小操作并重新渲染。如下图：</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/646b28dfe03e90d874c5b31b.jpg"></p>
<p>执行 <code>vdom</code> 的计算（<code>dom diff</code>），减少浏览器DOM的重复渲染<br>对于 Web 环境的react而言，大多数开发者认为 <code>virtual dom</code> 的出现主要是为了<strong>优化性能</strong>。vdom确实能提升性能，但它的主要潜力在于提供了强大的<strong>抽象能力</strong>。在开发者的代码与实际的渲染之间加入一个<strong>抽象层</strong>，这带来了很多<strong>可能性</strong>。稍微想象一下，如果react能够渲染到浏览器以外的其他平台呢？毕竟，react已经“理解”了你的应用应该如何展现。</p>
<h2 id="React-Native-的工作原理"><a href="#React-Native-的工作原理" class="headerlink" title="React Native 的工作原理"></a>React Native 的工作原理</h2><p>如下图，这就是 <code>React Native</code> 的工作原理。 <code>react native</code> 调用<code>Objective-C</code>的API去渲染iOS组件，调用<code>Java</code>接口去渲染Android组件，而不是渲染到浏览器的DOM上，这使得<code>react native</code> 不同于那些基于web视图的跨平台应用开发方案（各种小程序 uniapp\taro , 适配器转化）。</p>
<p><code>react可以渲染到多个平台</code><br><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/646b28ebe03e90d874c5be4f.jpg"></p>
<p><code>Bridge</code>“<strong>桥接</strong>“使这一切成为可能，它使得react可以调用宿主平台开放的UI组件。react组件通过render方法返回了描述界面的标记代码。</p>
<ol>
<li><p>web平台: react最终将标记代码解析成浏览器的dom</p>
</li>
<li><p>react native中：标记代码会被解析成特定平台的组件</p>
<ol>
<li>如<code>&lt;View&gt;</code>组件将会表现为iOS平台的<code>UIView</code></li>
</ol>
</li>
</ol>
<p><code>react native</code> 目前同时支持iOS和Android两种平台。由于virtual DOM提供了抽象层，<code>react native</code>也可以支持其他平台，只需要提供“<strong>桥接</strong>”即可。</p>
<h2 id="react-和-react-native-的不同点"><a href="#react-和-react-native-的不同点" class="headerlink" title="react 和 react native 的不同点"></a>react 和 react native 的不同点</h2><h3 id="框架作用的平台不同"><a href="#框架作用的平台不同" class="headerlink" title="框架作用的平台不同"></a>框架作用的平台不同</h3><p><code>RN</code>是由<code>React</code>衍生出来的，两种框架都是用<code>JSX</code>开发语法，但是<code>RN</code>是用来开发真正原生渲染的iOS和Andriod移动应用的JS框架，而React是将浏览器作为渲染平台。</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/646b2904e03e90d874c5ec24.jpg"></p>
<h3 id="工作原理不同"><a href="#工作原理不同" class="headerlink" title="工作原理不同"></a>工作原理不同</h3><p>上面总结的工作原理</p>
<h3 id="渲染周期"><a href="#渲染周期" class="headerlink" title="渲染周期"></a>渲染周期</h3><p>react 组件挂载过程　－＞　重新渲染过程。</p>
<ol>
<li><p><code>React</code>的渲染周期开始于react组件挂载到DOM之后，接着React进入渲染周期并根据需要渲染组件。在渲染阶段，<strong>React将开发者在return中返回的HTML标记直接按需渲染到页面上</strong>。</p>
</li>
<li><p><code>React Native</code>生命周期与React基本相同，在渲染上因为<code>React Native</code><strong>依赖于桥接</strong>，并<strong>不在UI主线程运行</strong>，它可以在不影响用户体验的前提下执行这些异步调用。</p>
</li>
</ol>
<h3 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h3><p>当编写Web环境的React的时候，视图最终需要渲染成普通的HTML元素；</p>
<p>而在React Native中，所有元素都会被平台指定的React组件替换，例如在iOS中，<code>&lt;View&gt;</code>组件被渲染成<code>UIView</code>，而在Android平台，会被渲染成<code>View</code>。</p>
<h3 id="原生的样式"><a href="#原生的样式" class="headerlink" title="原生的样式"></a>原生的样式</h3><p>在Web中，使用CSS样式为React组件添加样式已经是开发过程中不可获取的一部分了。React通常不影响我们编写CSS的方式，并且它确实让样式的动态创建更加容易（通过state和props），除此之外，React基本上不关心我们如何处理样式的。<br>非Web平台上有大量的方法来处理布局和样式.</p>
<p>我们使用<code>React Native</code>时，只需要用一种<strong>标准的方法</strong>来处理样式，React和宿主平台之间的桥接包含了一个缩减版CSS子集的实现，这个CSS子集主要通过<strong>flexbox</strong>进行布局，做到了尽量简化，而不是去实现所有的CSS规则。有别于Web平台，CSS的支持程度因浏览器而不同，React Native则做到了样式规则的一致。</p>
<h3 id="宿主平台接口"><a href="#宿主平台接口" class="headerlink" title="宿主平台接口"></a>宿主平台接口</h3><p>数据存储、地理服务、操控硬件设备</p>
<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a>☭</p>
<p>公众号：【看见另一种可能】</p>
</body></html>]]></content>
      <categories>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>低代码和数字化</title>
    <url>/posts/4121106976.html</url>
    <content><![CDATA[<html><head></head><body><p>读“<a href="https://mp.weixin.qq.com/s/rU0455dOafob-TPkVzaBsA">有头有脸的老板，都开始盯数字化了</a>”有感</p>
<p>一个转身就是另一番景象。</p>
<p>存量数据比重占大头了吗？怎么适应呢，钉钉开始收缩边界，余力转化效率。</p>
<p>我的工作是前端开发，本能的从低代码在我所涉及的前端领域的应用上看待低代码的价值，甚至昨天还在自己的一篇文章中提了一句不看好低代码。现实情况是工作属性和接触面限制了我对低代码的猜想，当看到这篇文章时，忽然想起来前段业务同事在钉钉上使用低代码工具搭建了一个应用程序。低代码平台做出来开放之后，众多的玩家带着他们纷繁的需求往往能够挖掘出巨大的潜在价值。</p>
<p>低代码和数字化结合才能创造更多的价值，前提是不能把低代码局限于公司内部，开放会注入更多的活力、生命力。低代码平台建设只是起步，要和PaaS关联起来，才可以发挥更大的作用</p>
<p>生态的归生态，平台的归平台。</p>
<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<center>欢迎微信扫码关注 "看见另一种可能"！</center>

<img data-src="/images/base/loading03.svg" data-original="/images/contact/qrcode_wechat.jpg" alt="wechat：看见另一种可能"></body></html>]]></content>
      <categories>
        <category>数字化</category>
      </categories>
      <tags>
        <tag>低代码</tag>
      </tags>
  </entry>
  <entry>
    <title>你看好云原生吗？</title>
    <url>/posts/2477461038.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>我理解的云原生是<strong>一种思想</strong>。目前为止，再稍具体一点就是一种构建和运行应用程序的方法 ，是一套技术体系和方法论。</p>
</blockquote>
<p>目前来看，互联网技术领域没有那么粗放了，可以看成从散乱的“一堆砖头”变成了码的整齐的“砖头”，各种人物资源、空间利用率更高了。</p>
<p>云原生还在不断的发展，一年前我看中了云原生的发展方向并展开了一系列的学习，目前工作中也只是稍有涉及，并不是主要工作，我还是非常期望可以从事云原生工作的，下面罗列一下云原生相关的技术、工具和运用</p>
<h1 id="技术领域"><a href="#技术领域" class="headerlink" title="技术领域"></a>技术领域</h1><ol>
<li><strong>微服务架构</strong></li>
<li><strong>容器调度平台</strong></li>
<li><strong>服务调度</strong></li>
<li><strong>服务编排和服务治理</strong></li>
<li><strong>API管理</strong></li>
<li>流式计算</li>
<li><strong>分布式数据库</strong></li>
<li><strong>DevOps</strong></li>
<li>混沌工程</li>
<li>其它</li>
</ol>
<h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><ol>
<li>提升业务敏捷度</li>
<li>提高开发效率</li>
<li>支持大流量高并发场景</li>
<li>提升高可用性和SLA</li>
<li>灵活的定制和扩展能力</li>
<li>提升资源使用效率</li>
<li>加速业务创新</li>
<li>降低成本</li>
<li>自主可控</li>
</ol>
<h1 id="容器集群管理工具"><a href="#容器集群管理工具" class="headerlink" title="容器集群管理工具"></a>容器集群管理工具</h1><ol>
<li><strong>Kubernetes</strong></li>
<li>Mesos</li>
<li>Docker Swarm</li>
<li>OpenShift</li>
</ol>
<h1 id="容器云平台"><a href="#容器云平台" class="headerlink" title="容器云平台"></a>容器云平台</h1><ul>
<li>自建容器云平台</li>
<li><strong>阿里云</strong></li>
<li><strong>腾讯云</strong></li>
<li>华为云</li>
<li>百度云</li>
<li>IBM Cloud</li>
<li>AWS</li>
<li>Azure</li>
<li>Didital Ocean</li>
<li>Google Cloud Platform</li>
<li>SAP Cloud</li>
</ul>
<h1 id="Kubernetes工具"><a href="#Kubernetes工具" class="headerlink" title="Kubernetes工具"></a>Kubernetes工具</h1><ul>
<li>Minikube</li>
<li>Helm</li>
<li>Rancher k3s</li>
<li>Loft</li>
<li>Skaffold</li>
<li><strong>Podman</strong></li>
<li>Tilt</li>
<li>DevSpace</li>
<li>Lens IDE</li>
<li>Visual Studio Code</li>
<li>Footsteps</li>
</ul>
<h1 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h1><ul>
<li>Docker Registry</li>
<li>Docker Trusted Registry</li>
<li><strong>Harbor</strong></li>
<li><strong>JFrog Artifactory</strong></li>
<li>阿里云ACR</li>
<li>AWS</li>
</ul>
<h1 id="在DevOps实施阶段中，使用工具"><a href="#在DevOps实施阶段中，使用工具" class="headerlink" title="在DevOps实施阶段中，使用工具"></a>在DevOps实施阶段中，使用工具</h1><ul>
<li><strong>团队协作</strong></li>
<li><strong>版本控制</strong></li>
<li><strong>构建</strong></li>
<li><strong>测试</strong></li>
<li><strong>部署</strong></li>
<li><strong>配置管理</strong></li>
<li><strong>监控</strong></li>
<li><strong>日志管理</strong></li>
<li><strong>持续交付</strong></li>
<li><strong>安全扫描</strong></li>
</ul>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>数字化转型的抓手是什么，科幻的世界怎么实现，互联网技术又可以为之做些什么？</p>
<p>互联网高速发展，各种技术框架越来越向上封装，初学者几乎很少去了解下层的运作原理，只学习应用层的技术可以带来什么创新呢？去应用商店看一眼，雷同的商品一堆一堆的。试问还可以学习到真正的硬技术吗？未来会往哪发展，又会给生产生活带来什么变革？</p>
<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Web和App的一点点思考</title>
    <url>/posts/4136692609.html</url>
    <content><![CDATA[<html><head></head><body><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>朋友在微信上分享给我一个“PDD”砍一刀的链接，让我帮忙砍一刀助力，我点开链接之后，让我去下载App，然后去应用商店下载一个App，注册登录完成之后，回到微信里面点击链接，就会唤醒App，接着就是在App里面一顿操作，还不能退出到首页，我呆了😮</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>从我的角度看，有两个点不是很明白：</p>
<ol>
<li>不可以在浏览器里面以Web的方式直接打开助力吗，显然是可以的，事实是非得让下载App才可以</li>
<li>助力的流程怎么回事，为什么不可以退出这个流程呢，一直在里面来回转啊转啊，清除后台运行程序才可以退出？还是我没有发现别的退出路径呢？</li>
</ol>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ul>
<li><p>Web发展方向，在进入移动互联网时代后，国内外出现了不同的发展路线：国外依然致力于精致Web的研发，国内则是随着微信小程序的推出，让一个App里面可以运行其它的“App”，出现了几大平台自研小程序的现象，而且不同的小程序之间还设有壁垒，不通用，接着又出现了一些搞兼容多方小程序的技术，其实就是做了一些“框架”级别的适配器，封装向下转型、向上转型。</p>
</li>
<li><p>那到底有没有一种技术可以让很多不用的程序都在上面跑呢，答案是确定的，不但有，而且已经发展了很多年了，那就是Web，让所有的应用程序都运行在浏览器里面。</p>
</li>
</ul>
<p>这些家伙们在做什么？自己给自己出题玩？到底有没有推动技术的发展，“我不考虑这个，我要赚钱！”</p>
<blockquote>
<p>类小程序技术也不是微信的第一个尝试的，还有几大手机厂商的“快应用”等。<br>从中你会发现小公司只要有创新，没有展露头角发展不下去是死路一条，展露头角被大公司抄袭又是一死，<strong>这就是申请软件著作权，申请专利的重要性。</strong></p>
</blockquote>
<h2 id="期待"><a href="#期待" class="headerlink" title="期待"></a>期待</h2><p>前端的细分领域真的是太多太多了，期待Web技术会有更好的发展，不要往那些不能长久的、可持续发展的事物上投入太多精力，让那些细枝末节快点走进历史吧。</p>
<hr>
<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://home.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>初识算法之美</title>
    <url>/posts/2551464991.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇是学习了《趣学算法（第2版）》 第一章之后总结的，，收录至<a href="https://blog.i-xiao.space/categories/%E7%AE%97%E6%B3%95/">算法专栏</a></p>
</blockquote>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63573f1a16f2c2beb10e3ceb.jpg"></p>
<h2 id="对算法的理解："><a href="#对算法的理解：" class="headerlink" title="对算法的理解："></a>对算法的理解：</h2><p>计算机虽然可以高效的进行运算，但是有很多问题拼的不是算力，而是策略。如果没有策略的去计算，那再强的运算能力也只能称为“蛮力”。策略就是帮助我们如何用更少的计算步骤、更快的速度去运算出结果。换言之，策略就是你设计算法的思路，目的只有一个就是：快人一步。</p>
<p>计算机不同于人脑，人脑面对问题可以先去“观察”、“分析”，然后把复杂转化成简单问题（跟<strong>数学</strong>题一样，算法就是简便的解题思路）。目前在绝大多数领域计算机还不具备这个功能，离开了人脑，计算机还只是一个人的使用工具罢了。</p>
<p><strong>算法有两个衡量标准：</strong></p>
<ul>
<li>时间长短（时间复杂度）</li>
<li>占用内存大小（空间复杂度）</li>
</ul>
<p><strong>先展望一下学习历程：</strong></p>
<p>算法学习是一个循序渐进的过程，经常训练解题能力，逐步积累解题方法策略，最后内化成自己的知识，灵活运用去应对新的问题。</p>
<p>“初极狭，才通人。复行数十步，豁然开朗。”，挺喜欢这句话😁</p>
<h2 id="算法知识点"><a href="#算法知识点" class="headerlink" title="算法知识点"></a>算法知识点</h2><ol>
<li><p>高斯算法（倒序相加）</p>
</li>
<li><p>数列求和</p>
</li>
</ol>
<h2 id="算法题目"><a href="#算法题目" class="headerlink" title="算法题目"></a>算法题目</h2><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63573f3716f2c2beb10e52e0.jpg"></p>
<p>求： $S_n = 1 + 2 + 2^2 + 2^3 + … + 2^{63}=$</p>
<p>该函数属于<strong>爆炸增量函数</strong>。</p>
<h2 id="做题思路"><a href="#做题思路" class="headerlink" title="做题思路"></a>做题思路</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p><strong>公式法</strong></p>
<p>如果还记得高中数学知识，不难发现，这是一个等比数列求和问题，$a_1 = 1，公比q = 2，n = 64$</p>
<p>等比数列求和公式：$$S_n = a_1 * \frac{1 - q^n}{1 - q} ，(q ≠ 1)$$</p>
<p>本文暂不讲解公式推导过程</p>
<p>代入公式，上面的式子 = $1 * \frac{1 - 2^{64}}{1 - 2} = 2^{64} - 1 = 18446744073709551615$ ，从而转化问题，解题</p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>忘记方法叫什么名字了，主要原理就是<strong>销项</strong>，使问题转化成第一项和最后一项的差。</p>
<p>根据原式，等号两边同时乘以2，得式子②$2S_n =  2 + 2^2 + 2^3 + … + 2^{63} + 2^{64}$</p>
<p>用式子② - 原式 = $S_n = 2^{64} - 1 =18446744073709551615$</p>
<blockquote>
<p>据专家统计，每颗麦粒的平均重量约41.9毫克，这些麦粒的总重量为：</p>
<p>$18446744073709551615×41.9$</p>
<p>$=772918576688430212668.5(毫克)$</p>
<p>$≈7729000（亿千克）$</p>
<p>全世界人口按77亿计算，每人差不多可以分得100000千克（即100吨）！</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>常见的算法时间复杂度有以下几类。</p>
<ol>
<li><p>常数阶。<br>常数阶算法的运行次数是一个常数，如5、20、100。常数阶算法的时间复杂度通常用<code>O(1)</code>表示。</p>
</li>
<li><p>多项式阶。<br>很多算法的时间复杂度是多项式，通常用 0(n)、$O(n^2)$、$0(n^3)$等表示。</p>
</li>
<li><p>指数阶。<br>指数阶算法的运行效率极差，程序员往往像躲“恶魔”一样避开这种算法。指数阶算法的时间复杂度通常用$O(2^n)$、$O(n!)$、$O(n^n)$等表示。</p>
</li>
<li><p>对数阶。<br>对数阶算法的运行效率较高，通常用$O(logn)$、$O(nlogn)$等表示。<br>指数阶增量随着的增加而急剧增加，而对数阶增长缓慢。它们之间的关系如下：</p>
</li>
</ol>
<p>$$O(1)＜O(logn)＜O(n)＜O(nlogn)＜O(n^2)＜O(n^3)＜O(2^n)O(n!)＜O(n^n)$$</p>
<p>在设计算法时，我们要注意算法复杂度增量的问题，尽量避免爆炸级增量。</p>
<p>通过上面一个算法小例子，又勾起了我对数学的兴趣。算法跟数学是息息相关的，平常也要复习一下数学知识，相信也会有所帮助的。</p>
<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。数风流人物还看中国、看今朝、看你我。</p>
</body></html>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>前端架构工作</title>
    <url>/posts/3733133858.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>工作中所涉及到的工作，也有一些PM的工作，比如：协调人员、拆分任务并分配给相关人员，把控工作进度、评审、变更管理等等。</p>
</blockquote>
<ol>
<li><p>项目立项，资源申请（服务器资源、人员）</p>
</li>
<li><p>需求评审（业需、软需）</p>
</li>
<li><p>接口文档、技术详设、功能点拆分、测试用例（概要设计、详细设计）</p>
</li>
<li><p>分支模型，版本控制（回滚机制）</p>
</li>
<li><p>技术选型，ui库, css编写BEM规范</p>
</li>
<li><p>代码风格、开发流程约束 eslint - sonarqube</p>
<ol>
<li><a href="https://www.yuque.com/allblue-byynd/izub4k/obh3ns">代码风格</a> eslint stylelint prettier</li>
<li><a href="https://www.yuque.com/allblue-byynd/izub4k/zmxgt9">开发流程约束</a> commitlint</li>
</ol>
</li>
<li><p>基础框架搭建+业务框架+<strong>可插拔组件</strong>设计</p>
<ul>
<li><p>全局状态管理（vuex模块化封装）</p>
</li>
<li><p>axios封装，接口鉴权，aes+rsa数据传输加解密，异常处理机制，重发控制</p>
</li>
<li><p>静态资源、iconfont等</p>
</li>
<li><p>工具函数封装，自定义指令、mixin等</p>
</li>
<li><p>换肤功能设计</p>
</li>
<li><p>路由权限、404、loading以及空页面配置，路由模块化配置，设置kepp-alive配置项</p>
</li>
<li><p>用户角色、菜单权限配置、控制点管理、业务字典配置</p>
</li>
<li><p>移动端适配、title展示、返回逻辑控制、右上角扩展操作配置</p>
</li>
<li><p>IE兼容处理，babel,es6-promise, babel-polyfill</p>
</li>
</ul>
</li>
<li><p>跟后端约定接口入参返参，开发环境<strong>mock</strong>数据</p>
</li>
<li><p>代码评审（走查）（新功能代码评审）</p>
</li>
<li><p>打包优化配置（webpack）</p>
</li>
<li><p><strong>安全加固</strong></p>
</li>
<li><p>操作<strong>日志</strong>分类统计</p>
</li>
<li><p><strong>CI/CD</strong></p>
</li>
<li><p><strong>docker</strong>部署</p>
</li>
<li><p><strong>nginx</strong>配置，反向代理、动静分离、负载均衡</p>
</li>
<li><p><strong>灰度发布，白名单</strong></p>
</li>
<li><p>…</p>
</li>
</ol>
<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc☭</strong></a></p>
<p>公众号：【看见另一种可能】</p>
<p>专注前端开发，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
</body></html>]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>前端架构</tag>
      </tags>
  </entry>
  <entry>
    <title>单据架构+数据字典——实现页面可配置化</title>
    <url>/posts/668634675.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇是对以前工作中的单据架构实现做的总结，目前工作中我负责的系统也从零开始实现了这套架构功能。</p>
<p>👉“单据”：金融、外贸行业术语，<a href="https://wiki.mbalib.com/wiki/%E5%8D%95%E6%8D%AE">货运单据</a></p>
<p>👀以前做外贸行业的SaaS软件，表单字段数量之多，没接触过的人肯定难以想象😮。现在在金融行业工作（也有物联网、互联网服务行业工作经验），觉得外贸、财务、金融行业的业务相对来说复杂度更高🎨，技术实现上也更加复杂（👉没有接触过的请先了解一下再发表意见😊）。就比如本篇要讲的表单，不是想象的几个表单字段提交那么简单，除了核心的业务数据字段还涉及到非常多的行业术语字段，整体复杂度一下子提升很多，而且单据类型多样，传统的在页面上堆字段的开发方式显然不适用了🤔。所以，就开始在<strong>基础业务架构</strong>上进行探索创新，有兴趣请看下文👇</p>
</blockquote>
<h2 id="1、使用场景及功能"><a href="#1、使用场景及功能" class="headerlink" title="1、使用场景及功能"></a>1、使用场景及功能</h2><h3 id="1-1、使用场景"><a href="#1-1、使用场景" class="headerlink" title="1.1、使用场景"></a>1.1、使用场景</h3><p>可用于常见任何表单性质的页面，筛选字段组件等。</p>
<h3 id="1-2、功能"><a href="#1-2、功能" class="headerlink" title="1.2、功能"></a>1.2、功能</h3><ol>
<li><p>页面可配置化</p>
</li>
<li><p>样式排版可控制</p>
</li>
<li><p>增查修功能三位一体</p>
</li>
<li><p>碎片化修改</p>
</li>
<li><p>字段联动展示</p>
</li>
<li><p>字段联动展示</p>
</li>
<li><p>字段参数预置</p>
</li>
<li><p>……</p>
</li>
</ol>
<h2 id="2、前置思考"><a href="#2、前置思考" class="headerlink" title="2、前置思考"></a>2、前置思考</h2><p>最根本的还是<strong>组件开发</strong>，并在此基础上给组件赋能，采用自下而上的设计。</p>
<ol>
<li><p><strong>复合组件+扩展组件+自定义组件</strong></p>
</li>
<li><p>组件开发三要素：<strong>属性、事件、方法</strong></p>
</li>
<li><p>组件的关系：<strong>依赖、联动</strong></p>
</li>
<li><p>业务字段+业务字典</p>
<ul>
<li><p>业务字段设置: 用于配置页面需要显示的字段信息</p>
</li>
<li><p>业务字典设置: 用于字段枚举值获取显示</p>
</li>
</ul>
</li>
<li><p><strong>业务组件：</strong> -&gt; 架构</p>
<ul>
<li><p>相似的业务活动</p>
</li>
<li><p>使用类似的数据</p>
</li>
<li><p>具有通用的处理流程</p>
</li>
<li><p>通用的业务目标</p>
</li>
<li><p>是密切联系的组织单元</p>
</li>
</ul>
</li>
<li><p>最后, 模块划分, 后端采用RESTful接口设计风格, 实现 CRUD</p>
</li>
</ol>
<h2 id="3、开发流程拆解"><a href="#3、开发流程拆解" class="headerlink" title="3、开发流程拆解"></a>3、开发流程拆解</h2><ol>
<li><p>基础控件开发（“小池子”）</p>
<ul>
<li><p>初始化数据填入（带入值回显）： initVal()</p>
</li>
<li><p>更新： updata()</p>
</li>
<li><p>修改事件： change()</p>
<ul>
<li>联动数据标记： $emit(‘handleReletedFields’, xxx, xxx)</li>
<li>修改 controlData 得值，用于收集输入值。值类型一般是字符串、数字、布尔值、数组（多选时）</li>
</ul>
</li>
<li><p>重置数据： reset()</p>
</li>
<li><p>移除校验： initVal 方法里 执行 clearVerfy() - this.$refs.form.clearValidate()</p>
</li>
<li><p>必填项校验： verifyForm() prop属性</p>
</li>
<li><p>控件数据获取：</p>
<ul>
<li>获取码值配置数据 - 业务字典</li>
<li>普通接口获取业务数据</li>
<li>vuex 存储的码值数据</li>
</ul>
</li>
<li><p>收集控件并暴露给收发组件使用</p>
</li>
<li><p>排版样式处理</p>
</li>
</ul>
</li>
<li><p>控件收发控制 （“三通”）</p>
<ul>
<li><p><strong>以动态组件方式实现数据流的收发</strong></p>
</li>
<li><p>初始化数据： initData()，调用基础控件的 initVal()方法，或者 updata()方法</p>
</li>
<li><p>重置数据： reset() 调用基础控件的 reset()方法</p>
</li>
<li><p>提交数据： submit()</p>
<ul>
<li>调用基础控件的 verifyForm()方法验证必填项，如果没有填写，则进行滚动定位到需要填写的组件(offsetTop)</li>
<li>控件输入值收集： 提取各个业务字段的 controlData 值，组装表单信息</li>
</ul>
</li>
<li><p>数据联动： handleReletedFields()</p>
<ul>
<li>调用联动控件的 initVal()方法实现数据联动</li>
</ul>
</li>
</ul>
</li>
<li><p>具体业务组件 （数据流“主管道”，总线）</p>
<ul>
<li><p>业务字段信息组装，props传递给收发控制组件</p>
</li>
<li><p>提交数据： submitForm() 调用收发控制组件的 submit() 方法，拿到业务字段输入信息。</p>
</li>
</ul>
</li>
</ol>
<h2 id="4、控件参数（业务字段配置）"><a href="#4、控件参数（业务字段配置）" class="headerlink" title="4、控件参数（业务字段配置）"></a>4、控件参数（业务字段配置）</h2><p>下面是单个控件的参数配置, 🧨要实现整个页面的可配置化, 需要配置业务字段</p>
<figure class="highlight actionscript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="string">"fieldLabel"</span>: <span class="string">"控件名称"</span>，</span><br><span class="line">  <span class="string">"showLabel"</span>: <span class="literal">true</span>, <span class="comment">// 是否显示label</span></span><br><span class="line">  <span class="string">"fieldName"</span>: <span class="string">"appId"</span>,</span><br><span class="line">  <span class="string">"controlName"</span>: <span class="string">"SingleSelectDownBox"</span>,</span><br><span class="line">  <span class="string">"controlData"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"defaultValue"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"defaultOptions"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"localVuexDictData"</span>: <span class="literal">true</span>, <span class="comment">// 控件数据是否从vuex里获取</span></span><br><span class="line">  <span class="string">"remoteDictOptionsData"</span>: <span class="literal">false</span>, <span class="comment">// 控件数据是否从接口里获取</span></span><br><span class="line">  <span class="string">"remoteOtherApi"</span>: <span class="string">""</span>, <span class="comment">// 单独接口获取，在api里面定义的名称，采用策略模式使用</span></span><br><span class="line">  <span class="string">"labelWidth"</span>: <span class="string">"100px"</span>,</span><br><span class="line">  <span class="string">"rightWidth"</span>: <span class="string">"220px"</span>,</span><br><span class="line">  <span class="string">"labelPosition"</span>: <span class="string">"right"</span>,</span><br><span class="line">  <span class="string">"isNotNull"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"placeholder"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"dictKey"</span>: <span class="string">"OperateTypeEnum"</span>,</span><br><span class="line">  <span class="string">"keyCode"</span>: <span class="string">"dictCode"</span>,</span><br><span class="line">  <span class="string">"controlSize"</span>: <span class="string">"100%"</span>,</span><br><span class="line">  <span class="string">"column"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="string">"readonly"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"relatedFields"</span>: <span class="string">"platformCheckStatus=platformCheckStatus;"</span> <span class="comment">// 多个关联字段用;分割</span></span><br><span class="line">  <span class="string">"clearable"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"editable"</span>: <span class="literal">false</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="4-1、页面业务字段配置示例"><a href="#4-1、页面业务字段配置示例" class="headerlink" title="4.1、页面业务字段配置示例"></a>4.1、页面业务字段配置示例</h3><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/633e9da016f2c2beb1da2256.jpg"></p>
<h2 id="5、联动字段配置说明"><a href="#5、联动字段配置说明" class="headerlink" title="5、联动字段配置说明"></a>5、联动字段配置说明</h2><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"relatedFields"</span>: <span class="string">"platformCheckStatus=aaa;customField=bbb"</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 或者</span><br><span class="line"><span class="string">"relatedFields"</span>: <span class="string">"platformCheckStatus=platformCheckStatus;customField=customField"</span></span><br></pre></td></tr></tbody></table></figure>

<p>platformCheckStatus=aaa中”=“左边的platformCheckStatus，表示当前字段要关联的字段名称，”=“右边的aaa，表示回传信息的键名，用于确定关联字段要显示的值。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> info = {</span><br><span class="line">  <span class="attr">aaa</span>: <span class="string">'xiao'</span>,</span><br><span class="line">  <span class="attr">bbb</span>: <span class="string">'xixi'</span>,</span><br><span class="line">  <span class="comment">// platformCheckStatus: '',</span></span><br><span class="line">  <span class="comment">// customField: '',</span></span><br><span class="line">}</span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">'handleReletedFields'</span>, info, <span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">relatedFields</span>);</span><br></pre></td></tr></tbody></table></figure>


<h2 id="6、字典值配置"><a href="#6、字典值配置" class="headerlink" title="6、字典值配置"></a>6、字典值配置</h2><p>多用于单选、多选、级联框备选项数据，以下是<strong>字典数据结构</strong>👇</p>
<figure class="highlight prolog"><table><tbody><tr><td class="code"><pre><span class="line">data: [{</span><br><span class="line">    <span class="string">"alias"</span>: <span class="string">"scale"</span>,</span><br><span class="line">    <span class="string">"dictCode"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"dictItems"</span>: [</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"dictItem"</span>: [],</span><br><span class="line">            <span class="string">"dictItemCode"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">512323</span>,</span><br><span class="line">            <span class="string">"inUse"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"itemEnName"</span>: <span class="string">"1-5 people"</span>,</span><br><span class="line">            <span class="string">"itemName"</span>: <span class="string">"1-5人"</span>,</span><br><span class="line">            <span class="string">"itemValue"</span>: <span class="string">""</span></span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"dictItem"</span>: [],</span><br><span class="line">            <span class="string">"dictItemCode"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">512324</span>,</span><br><span class="line">            <span class="string">"inUse"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"itemEnName"</span>: <span class="string">"6-10 people"</span>,</span><br><span class="line">            <span class="string">"itemName"</span>: <span class="string">"6-10人"</span>,</span><br><span class="line">            <span class="string">"itemValue"</span>: <span class="string">""</span></span><br><span class="line">        }</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"dictName"</span>: <span class="string">"规模"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"moduleCode"</span>: <span class="string">"A001"</span>,</span><br><span class="line">    <span class="string">"sortOrder"</span>: <span class="number">0</span></span><br><span class="line">}]</span><br></pre></td></tr></tbody></table></figure>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>架构设计要遵循三个设计原则:</p>
<ol>
<li><p>不多也不少 (架构都是适合当时的情况, 解决当时的问题, 重要的是不做过多设计, 这是一个陷阱)</p>
</li>
<li><p>演进式 (根据变化及时改进和调整架构)</p>
</li>
<li><p>持续性 (自身的能力也是逐步提升的, 设计的时候需要为未来改进留下一定的空间)</p>
</li>
</ol>
<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>博客园美化</title>
    <url>/posts/2159164587.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>博客园允许用户设置多样化的主题。通过选择皮肤，然后开启JS脚本权限，在设置里面植入跟皮肤配套的<code>CSS</code>、<code>JS</code>，并且禁用默认的<code>CSS</code>，即可实现个性化的界面风格和交互行为。</p>
</blockquote>
<h2 id="SimpleMemory-皮肤"><a href="#SimpleMemory-皮肤" class="headerlink" title="SimpleMemory 皮肤"></a>SimpleMemory 皮肤</h2><p>文档参考<a href="https://bndong.github.io/Cnblogs-Theme-SimpleMemory/v2/#/">这里</a>，非常详细🌹</p>
<ul>
<li>效果预览：</li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318481816f2c2beb1d87bad.png"></p>
<h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><h3 id="1-选项"><a href="#1-选项" class="headerlink" title="1. 选项"></a>1. 选项</h3><p>勾选 “公告”</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318484616f2c2beb1d8ac38.jpg"></p>
<h3 id="2-基本设置、代码高亮、开通JS权限"><a href="#2-基本设置、代码高亮、开通JS权限" class="headerlink" title="2. 基本设置、代码高亮、开通JS权限"></a>2. 基本设置、代码高亮、开通JS权限</h3><p>皮肤选择 <code>SimpleMemory</code></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318486316f2c2beb1d8c8b8.jpg"></p>
<h3 id="3-页面定制CSS代码"><a href="#3-页面定制CSS代码" class="headerlink" title="3. 页面定制CSS代码"></a>3. 页面定制CSS代码</h3><p>这里我选择的是 Cnblogs-Theme-SimpleMemory <code>V2.1.0</code> 版本</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="attribute">https</span>://cdn.jsdelivr.net/gh/BNDong/Cnblogs-Theme-SimpleMemory@<span class="number">2.1</span>.<span class="number">0</span>/dist/simpleMemory.css);</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>注意：</p>
<ol>
<li><p>页面定制CSS代码我使用的是外链导入形式（免费jsdelivr cdn加速，也可以自行选择其它方式托管）。</p>
</li>
<li><p>勾选“禁用模板默认CSS”。（使得外链css生效）</p>
</li>
</ol>
</blockquote>
<h3 id="4-博客侧边栏公告设置"><a href="#4-博客侧边栏公告设置" class="headerlink" title="4. 博客侧边栏公告设置"></a>4. 博客侧边栏公告设置</h3><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6318487b16f2c2beb1d8e4d6.png"></p>
<p>下面是我的配置（仅供参考）</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">cnblogsConfig</span> = {</span><br><span class="line">      <span class="comment">// iconfont（我个人的，可以自己建一个iconfont项目维护使用）</span></span><br><span class="line">      <span class="attr">fontIconExtend</span>: <span class="string">"//at.alicdn.com/t/c/font_3603036_keyavmcqbhn.css"</span>,</span><br><span class="line">      <span class="attr">info</span>: {</span><br><span class="line">        <span class="attr">name</span>: <span class="string">'甜点cc'</span>, <span class="comment">// 用户名</span></span><br><span class="line">        <span class="attr">startDate</span>: <span class="string">'2016-10-08'</span>, <span class="comment">// 入园时间，年-月-日。入园时间查看方法：鼠标停留园龄时间上，会显示入园时间</span></span><br><span class="line">        <span class="attr">avatar</span>: <span class="string">'https://pic.cnblogs.com/avatar/1037867/20220801164532.png'</span>, <span class="comment">// 用户头像</span></span><br><span class="line">        <span class="attr">blogIcon</span>: <span class="string">'https://pic.cnblogs.com/avatar/1037867/20220801164532.png'</span>, <span class="comment">// 网站图标 favicon.ico</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">sidebar</span>: {</span><br><span class="line">        <span class="attr">infoBackground</span>: <span class="string">'https://cdn.jsdelivr.net/gh/all-smile/nav@master/static/images/Machine_tool.jpg'</span>, <span class="comment">// 个人信息背景</span></span><br><span class="line">        <span class="attr">titleMsg</span>: <span class="string">'宝宝等你很久啦~🌹🌹'</span>, <span class="comment">// 侧边栏title信息</span></span><br><span class="line">        <span class="attr">navList</span>: [</span><br><span class="line">            [<span class="string">'友链'</span>, <span class="string">'https://www.cnblogs.com/all-smile/p/16612170.html'</span>, <span class="string">'icon-pengyoufill'</span>],</span><br><span class="line">            [<span class="string">'个人主页'</span>, <span class="string">'https://home.i-xiao.space/'</span>, <span class="string">'icon-zhuye'</span>],</span><br><span class="line">        ],</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">banner</span>: {</span><br><span class="line">        <span class="attr">home</span>: {</span><br><span class="line">          <span class="comment">// 主页banner标语, 随机从数组中获取一条文字显示</span></span><br><span class="line">          <span class="attr">title</span>: [<span class="string">'每一个不曾起舞的日子，都是对生命的辜负。'</span>, <span class="string">'为者常成，行者常至。'</span>, <span class="string">'逝者如斯夫，不舍昼夜。'</span>, <span class="string">"相逢的还会再相逢。"</span>],</span><br><span class="line">          <span class="comment">// 主页banner图片</span></span><br><span class="line">          <span class="attr">background</span>: [</span><br><span class="line">              <span class="string">"https://cdn.jsdelivr.net/gh/all-smile/nav@master/static/images/Machine_tool.jpg"</span>,</span><br><span class="line">              <span class="string">"https://cdn.jsdelivr.net/gh/all-smile/nav@master/static/images/horse.jpg"</span>,</span><br><span class="line">              <span class="string">"https://cdn.jsdelivr.net/gh/all-smile/nav@master/static/images/background.jpg"</span>,</span><br><span class="line">              <span class="string">"https://raw.githubusercontent.com/all-smile/nav/master/static/images/sunset.jpg"</span>,</span><br><span class="line">              <span class="string">"https://raw.githubusercontent.com/all-smile/nav/master/static/images/sunset02.jpg"</span></span><br><span class="line">          ],</span><br><span class="line">        },</span><br><span class="line">      },</span><br><span class="line">      <span class="comment">// 失去焦点标签文字</span></span><br><span class="line">      <span class="attr">title</span>: {</span><br><span class="line">        <span class="attr">onblur</span>: <span class="string">'(oﾟvﾟ)ノ Hi'</span>,</span><br><span class="line">      },</span><br><span class="line">      <span class="comment">// 页面加载loading。</span></span><br><span class="line">      <span class="attr">loading</span>: {</span><br><span class="line">        <span class="attr">rebound</span>: {</span><br><span class="line">          <span class="attr">tension</span>: <span class="number">16</span>,</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">spinner</span>: {</span><br><span class="line">          <span class="attr">id</span>: <span class="string">'spinner'</span>,</span><br><span class="line">          <span class="attr">radius</span>: <span class="number">90</span>,</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="comment">// 页脚模式</span></span><br><span class="line">      <span class="attr">footer</span>: {</span><br><span class="line">        <span class="attr">style</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">text</span>: {</span><br><span class="line">          <span class="attr">left</span>: <span class="string">'蓄之既久，其发必速。'</span>,</span><br><span class="line">        },</span><br><span class="line">      },</span><br><span class="line">      <span class="comment">// 友情链接</span></span><br><span class="line">      <span class="attr">links</span>: {</span><br><span class="line">        <span class="comment">// 文章底部显示添加友链入口（博客园发送消息）</span></span><br><span class="line">        <span class="attr">footer</span>: [</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            格式：</span></span><br><span class="line"><span class="comment">            Key	Description</span></span><br><span class="line"><span class="comment">            name	昵称</span></span><br><span class="line"><span class="comment">            introduction	简介</span></span><br><span class="line"><span class="comment">            avatar	头像</span></span><br><span class="line"><span class="comment">            url	友链地址</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            [<span class="string">"添加友链"</span>, <span class="string">'https://msg.cnblogs.com/send/甜点cc'</span>],</span><br><span class="line">        ],</span><br><span class="line">      },</span><br><span class="line">      <span class="comment">// 右下角菜单</span></span><br><span class="line">      <span class="attr">rtMenu</span>: {</span><br><span class="line">        <span class="attr">qrCode</span>: <span class="string">'https://xxx.jpg'</span>, <span class="comment">// 自己设置</span></span><br><span class="line">        <span class="attr">reward</span>: {</span><br><span class="line">          <span class="attr">wechatpay</span>: <span class="string">'https:xxx.jpg'</span> <span class="comment">// 自己设置</span></span><br><span class="line">        },</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">animate</span>: {</span><br><span class="line">        <span class="comment">// 主页banner动效配置。</span></span><br><span class="line">        <span class="attr">homeBanner</span>: {</span><br><span class="line">          <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">options</span>: {</span><br><span class="line">            <span class="attr">radius</span>: <span class="number">15</span>,</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">// 文章页标题动效配置。</span></span><br><span class="line">        <span class="attr">articleTitle</span>: {</span><br><span class="line">          <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">// 文章页banner动效配置</span></span><br><span class="line">        <span class="attr">articleBanner</span>: {</span><br><span class="line">          <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">// 背景动效。</span></span><br><span class="line">        <span class="attr">background</span>: {</span><br><span class="line">          <span class="attr">enable</span>: <span class="literal">false</span>,</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">// 跟随鼠标动效。</span></span><br><span class="line">        <span class="attr">mouse</span>: {</span><br><span class="line">          <span class="attr">enable</span>: <span class="literal">false</span>,</span><br><span class="line">        },</span><br><span class="line">      },</span><br><span class="line">    };</span><br><span class="line">    <span class="comment">// 友链配置</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">cnblogsConfig</span>.<span class="property">links</span>.<span class="property">page</span> = [</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">name</span>: <span class="string">'甜点cc'</span>, <span class="comment">// 昵称</span></span><br><span class="line">        <span class="attr">introduction</span>: <span class="string">'博客'</span>, <span class="comment">// 简介</span></span><br><span class="line">        <span class="attr">avatar</span>: <span class="string">'https://pic.cnblogs.com/avatar/1037867/20220801164532.png'</span>, <span class="comment">// 头像</span></span><br><span class="line">        <span class="attr">url</span>: <span class="string">'https://home.i-xiao.space/blog/'</span> <span class="comment">// 友链地址</span></span><br><span class="line">      },</span><br><span class="line">    ]</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/BNDong/Cnblogs-Theme-SimpleMemory@v2.1.0/dist/simpleMemory.js"</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>注意：</p>
<ul>
<li>上面配置中 加载的 js 脚本，要和 上一步的CSS外链同一个版本（这里是V2.1.0），否则可能会不生效或者出现别的问题</li>
</ul>
</blockquote>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ol>
<li><p>主题相关文件（css\js等）可以自己托管维护，可以自行扩展界面交互</p>
</li>
<li><p>图片等静态资源可以自行寻找免费图床。当然也可以自己放到<code>GitHub</code>上面托管，采用CDN访问（参考<a href="https://juejin.cn/post/7120973719346151431">这里</a>）</p>
</li>
<li><p>托管到博客园上</p>
</li>
</ol>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/631848cd16f2c2beb1d93e27.png"></p>
<ol start="4">
<li>图片等静态资源也可以自行搭建云盘使用😏</li>
</ol>
<p>👉 方式很多，顺手就行 👈</p>
<p>我的博客园主页请看<a href="https://www.cnblogs.com/all-smile">这里</a>😊欢迎来访问呀🌹</p>
<hr>
<p>🎈🎈🎈</p>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
</body></html>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>博客评论插件Beaudar安装使用</title>
    <url>/posts/34114278.html</url>
    <content><![CDATA[<html><head></head><body><h2 id="Beaudar"><a href="#Beaudar" class="headerlink" title="Beaudar"></a>Beaudar</h2><p><code>Hexo</code>主题选用的<a href="https://xaoxuu.com/wiki/stellar/"><code>Stellar</code></a></p>
<p>基于 GitHub issue 的轻量评论插件，Utterances 的中文版本，官网在<a href="https://beaudar.lipk.org/">这里</a></p>
<h2 id="Beaudar-是如何工作的？"><a href="#Beaudar-是如何工作的？" class="headerlink" title="Beaudar 是如何工作的？"></a>Beaudar 是如何工作的？</h2><p>Beaudar 加载时，将使用 GitHub issue 搜索 API 根据 url，“路径名”或“标题”查找与页面相关的 issue。如果找不到与页面匹配的 issue，即没有评论，当有人首次发表评论时，Beaudar-bot 会自动创建一个 issue。</p>
<h2 id="配置使用"><a href="#配置使用" class="headerlink" title="配置使用"></a>配置使用</h2><ol>
<li>准备</li>
</ol>
<p>Beaudar 的配置方法很简单，创建一个仓库<a href="https://github.com/all-smile/blog-comments"><code>blog-comments</code></a>，在仓库中创建一个域名白名单文件<code>beaudar.json</code>，然后在<a href="https://github.com/apps/beaudar">此处</a>授权安装即可。</p>
<p><code>beaudar.json</code>文件</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"origins"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">"https://..."</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">"http://localhost:4000"</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li><code>Hexo</code>配置</li>
</ol>
<p>在主题配置文件里<code>_config_[theme].yml</code>里面增加如下配置</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 评论 [beaudar](https://beaudar.lipk.org/) 插件</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="attr">service:</span> <span class="string">beaudar</span></span><br><span class="line">  <span class="attr">beaudar:</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">all-smile/blog-comments</span> <span class="comment"># 指向你自己的repo</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>使用<code>GitHub</code>登录后评论</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6315b40c16f2c2beb16136d9.jpg"></p>
<h2 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h2><ol>
<li><code>blog-comments</code> 仓库默认分支为<code>main</code></li>
</ol>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6315b22716f2c2beb15ee173.jpg"></p>
<p><strong>解决：</strong></p>
<p>进入<code>blog-comments</code> 仓库，在 settings -&gt; branches 里面，修改 <code>Default branch</code> 为 <code>main</code></p>
<ol start="2">
<li><code>Hexo</code> 本地服务测试<code>Beaudar</code>，添加白名单配置</li>
</ol>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6315b2a816f2c2beb15f64b2.jpg"></p>
<p><strong>解决：</strong></p>
<p>修改<code>beaudar.json</code>文件</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"origins"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">"https://..."</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">"http://localhost:4000"</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>

<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://home.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>因为我们来过</title>
    <url>/posts/2504097492.html</url>
    <content><![CDATA[<!---
我生来就是高山而非溪流，我欲于群峰之巅俯视平庸的沟壑。

我生来就是人杰而非草芥，我站在伟人之肩藐视卑微的懦夫！

“在等待的日子里，刻苦读书，谦卑做人，养得深根，日后才能枝叶茂盛。”——星云大师
---><html><head></head><body><p>“我们走后，他们会给你们修学校和医院，会提高你们的工资，这不是因为他们良心发现，也不是因为他们变成了好人，而是因为我们来过。”</p>
<p style="text-align: right">——切·格瓦拉</p><p>

</p><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/643e22c00d2dde577741edb4.jpg"></p>
<p>他自称是毛泽东主席的小学生，实践并发扬游击战理论，一个浪漫的革命者、领袖。</p>
<p>带领本国民众取得革命胜利后，又只身远赴非洲支援国际无产阶级革命，继续革命，继续解放群众。</p>
</body></html>]]></content>
      <categories>
        <category>人</category>
      </categories>
      <tags>
        <tag>人物</tag>
      </tags>
  </entry>
  <entry>
    <title>多路径来源页面导航高亮以及面包屑导航修改</title>
    <url>/posts/2025032412.html</url>
    <content><![CDATA[<html><head></head><body><h2 id="问题缘由"><a href="#问题缘由" class="headerlink" title="问题缘由"></a>问题缘由</h2><p>这个问题比较普遍，原因是业务方面对产品进行多维度的划分（或者对产品进行归档、打标签、收藏等等），反应在前端方面就是同一个页面可以有不同的入口（产品目录结构划分）</p>
<p>干说不如举个例子：</p>
<ol>
<li><p>“活期储蓄”产品属于负债类理财产品（导航菜单）</p>
</li>
<li><p>关注“活期储蓄”产品</p>
</li>
<li><p>在“我的关注”菜单里也存在“活期储蓄”产品</p>
</li>
</ol>
<p>从上面的描述中不难发现，“活期储蓄”产品既可以从“负债类理财产品”菜单进入，也可以从“我的关注”菜单进入。</p>
<p>这就带来了两个问题：</p>
<ol>
<li><p>当进入“活期储蓄”产品详情页面的时候，高亮哪个导航菜单</p>
</li>
<li><p>当进入“活期储蓄”产品详情页面的时候，面包屑导航怎么显示</p>
</li>
</ol>
<p>从用户角度来说自然是我从哪里点进去的就高亮哪个菜单，面包屑也真实的反应“来源路径”</p>
<h2 id="技术背景"><a href="#技术背景" class="headerlink" title="技术背景"></a>技术背景</h2><p>项目采用的技术： Vue，Element UI，vue-router</p>
<p>采用的 element ui 的 导航组件和面包屑组件。</p>
<p>面包屑是借助 vue-router 的 matched 方法 匹配到的路由对象数据注入ui组件实现的</p>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><ul>
<li><p>如果可以从后端数据上进行处理当然更好，现实是没有如果。</p>
</li>
<li><p>前端处理，分别针对导高亮和面包屑处理</p>
</li>
</ul>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><ol>
<li><p>在进入详情页面的行为中增加标记（我使用 sessionStorage 标记，标记信息包括路径path、title，path用于高亮导航，title用于面包屑展示）</p>
</li>
<li><p>在离开详情页的时候移除标记（通过路由守卫实现，目的是标记不会带来别的副作用）</p>
</li>
<li><p>根据标记修正菜单高亮、面包屑展示</p>
</li>
</ol>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>分析完之后发现写代码就跟玩一样，没有什么技术含量，就不贴代码了</p>
<p>有一点需要注意：</p>
<p>在上面思路分析中，当进入详情页，刷新页面，可能会存在时序问题，具体就是面包屑组件里标记信息不能及时同步，这里我采用的是在<code>data</code>上面定义属性<code>signTitle</code>承接<code>sessionStorage</code>，然后在 <code>computed</code> 里面以<code>signTitle</code>为源数据得到最新的标记信息</p>
<p>可以使用全局状态管理方式替代sessionStorage，状态持久化就可以了</p>
<hr>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
</body></html>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>多路由复用页面组件问题</title>
    <url>/posts/3277520678.html</url>
    <content><![CDATA[<html><head></head><body><hr>
<h2 id="theme-channing-cyan"><a href="#theme-channing-cyan" class="headerlink" title="theme: channing-cyan"></a>theme: channing-cyan</h2><p>携手创作，共同成长！这是我参与「掘金日新计划 · 8 月更文挑战」的第20天，<a href="https://juejin.cn/post/7123120819437322247" title="https://juejin.cn/post/7123120819437322247">点击查看活动详情</a></p>
<blockquote>
<p>本文围绕 <code>Vue Router</code> 中路由组件复用问题展开</p>
</blockquote>
<h2 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h2><p>项目中经常会遇到<code>增改查</code>的需求，通常采用不同的路由指向同一个页面组件，以此到达复用页面的功能，但是复用页面存在一些状态问题。</p>
<p><strong>以下情况均不缓存页面：</strong></p>
<p>分两种情况，均为动态路由匹配</p>
<ul>
<li><p>(1) 路由a: <code>/detail/1</code>， 路由b: <code>/detail/2</code> 。   路由表里匹配<code>/detail/:id</code></p>
</li>
<li><p>(2) 路由A: <code>/new-detail/1</code>， 路由B: <code>/edit-detail/1</code> 。 路由表里匹配<code>/new-detail/:id</code>， 和  <code>/edit-detail/:id</code></p>
</li>
</ul>
<p><em>这四个不同的url，注册的是同一个页面组件</em></p>
<p>在场景（1）中，切换页面，只调用<code>beforeRouteUpdate</code>钩子函数，不调用<code>beforeRouteEnter、mounted</code>等，可以监听到<code>$route</code>，并获取到激活组件里面的数据，不会错乱</p>
<p>在场景（2）中，切换页面，调用<code>beforeRouteEnter</code>钩子函数，不调用<code>created、mounted</code>等生命周期钩子</p>
<h2 id="beforeRouteUpdate重用的组件官方解释（指的是动态路由匹配）"><a href="#beforeRouteUpdate重用的组件官方解释（指的是动态路由匹配）" class="headerlink" title="beforeRouteUpdate重用的组件官方解释（指的是动态路由匹配）"></a>beforeRouteUpdate重用的组件官方解释（指的是动态路由匹配）</h2><p>在当前路由改变，但是该组件被复用时调用，举例来说，对于一个带有动态参数的路径 <code>/foo/:id</code>，在 <code>/foo/1</code> 和 <code>/foo/2</code> 之间跳转的时候</p>
<h2 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h2><p>文档请看<a href="https://router.vuejs.org/zh/guide/essentials/dynamic-matching.html">这里</a></p>
<h3 id="响应路由参数的变化"><a href="#响应路由参数的变化" class="headerlink" title="响应路由参数的变化"></a>响应路由参数的变化</h3><p>当使用路由参数时，例如从 <code>/user/foo</code> 导航到 <code>/user/bar</code>，原来的组件实例会被复用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这也意味着组件的生命周期钩子不会再被调用。</p>
<p>复用组件时，想对路由参数的变化作出响应的话，有两种方法</p>
<ol>
<li><p><em>watch (监测变化) $route 对象</em></p>
</li>
<li><p><em>使用 2.2 中引入的 beforeRouteUpdate 导航守卫</em></p>
</li>
</ol>
<p>使用<code>beforeRouteUpdate</code>的时候，如果路由里面通过<a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html#%E5%B8%83%E5%B0%94%E6%A8%A1%E5%BC%8F">布尔模式</a>：<code>props: true</code> <em>将组件和路由解耦</em>，这个时候会出现<code>props</code>获取错误的情况，比方说从<code>/foo/1</code>页面切换到<code>/foo/2</code>页面的时候，在<code>beforeRouteUpdate</code>获取到的还是失活页面组件的id</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184d5416f2c2beb1de9bfd.png" alt="image.png"></p>
<blockquote>
<p><em>在<code>beforeRouteUpdate</code>钩子中，在<code>next</code>回调函数中编写代码并没有执行，仿佛没有调用，但是去掉<code>next()</code>，路由就不会放行，有点奇怪。需要阅读源码实现逻辑…</em></p>
</blockquote>
<h2 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="完整的导航解析流程"></a>完整的导航解析流程</h2><ol>
<li><p>导航被触发</p>
</li>
<li><p>beforeRouteLeave（失活组件里调用） 可以访问组件实例 <code>this</code></p>
</li>
<li><p>beforeEach（全局前置钩子）</p>
</li>
<li><p>beforeRouteUpdate（如果是重用组件，则调用） 可以访问组件实例 <code>this</code></p>
</li>
<li><p>beforeEnter（路由配置里，路由独享的）</p>
</li>
<li><p>解析异步路由组件（如果有）</p>
</li>
<li><p>beforeRouteEnter（被激活组件里调用）</p>
</li>
<li><p>beforeResolve（全局解析守卫）</p>
</li>
<li><p>导航被确认</p>
</li>
<li><p>afterEach（全局后置钩子）</p>
</li>
<li><p>触发 DOM 更新。</p>
</li>
<li><p><em>beforeRouteEnter （调用守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。next(vm) =&gt; {}）</em></p>
</li>
</ol>
<p>接着调用<code>created、mounted</code>等等</p>
<hr>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
</body></html>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>团队和技术建设的方法论</title>
    <url>/posts/917299999.html</url>
    <content><![CDATA[<html><head></head><body><h2 id="制定规范、规矩"><a href="#制定规范、规矩" class="headerlink" title="制定规范、规矩"></a>制定规范、规矩</h2><p>似乎总是从新人对接开始说事，这事整的，好像每个公司人员流动性都很大，带来的问题也已经从侧面说明了。团队总是具有不稳定性，团队要继续高速前行势必需要早做准备，需要做一些不依赖人员的东西、跟团队业务发展相关的东西，这也仅仅是制定规范的好处之一，更多的还是为了更好、更舒服的工作。</p>
<ul>
<li>新人培训：了解组织架构、业务划分、团队情况，职责定位、开发测试规范</li>
<li>老带新：不能让新人跟老人没有交集，优秀的东西需要传承</li>
</ul>
<p>新人三知：<strong>始、中、终</strong>。新人和老人都需要具备一定的<strong>主动性</strong>，主动问、主动告知。<br>了解某一事情的<em>开始、发展、和结果</em>。具体表现为：事件背景、事件发展阶段、各阶段预期结果以及最终预期结果。</p>
<h2 id="规范的延续"><a href="#规范的延续" class="headerlink" title="规范的延续"></a>规范的延续</h2><blockquote>
<p>也就是规范的载体</p>
</blockquote>
<p>如同文化的传参有典籍、实物和活态三种渠道一样，规范传参可以简单概括为两种方式：“物承”和“口承”。</p>
<p>工作中“口对口”传达需求的情况比比皆是，对于“口授”者相当方便，承接者就遭殃了。</p>
<p><strong>口头传达缺点：</strong></p>
<ul>
<li>容易遗漏</li>
<li>表意不当</li>
<li>双方理解偏差</li>
<li>不易留痕</li>
<li>极易变更，会导致相关人员工作混乱</li>
</ul>
<p>相比而言，有实物的输入输出就会带来更舒服的工作体验，各方面工作可以有条不紊的推进，准点下班不是梦（<em>WLB</em>）</p>
<p>实物也就是文档，包括：业需、软需，还有前后端、UI以及测试人员的文档</p>
<p>UI:</p>
<ul>
<li>交互原型（低保真原型）</li>
<li>高保真原型</li>
</ul>
<p>前端：</p>
<ul>
<li>前端开发详细设计文档</li>
</ul>
<p>后端</p>
<ul>
<li>UML图</li>
<li>数据库表设计文档</li>
<li>后端开发详细设计文档</li>
<li>后端接口规范文档（BFF 前后端协商）</li>
</ul>
<p>测试</p>
<ul>
<li>功能点拆分文档</li>
<li>编写测试用例文档</li>
<li>测试报告</li>
</ul>
<p>以上是前后端测试人员需要产出的不完全文档，还包括各阶段产出文档的评审、多方同步、会议纪要、评审报告等等</p>
<p>具体实施阶段还包括各方排期、进度跟踪反馈、问题上报、变更调整、版本窗口期等等</p>
<blockquote>
<p>软件开发方式：</p>
<ol>
<li>瀑布模型</li>
<li>迭代式开发</li>
<li>螺旋开发</li>
<li>敏捷开发模式</li>
<li>DevOps模式</li>
</ol>
</blockquote>
<p>真实的工作中基本不存在单一的软件开发模式，更多的是“混合”开发模式，这里“混合”的意思是混合多种开发模式</p>
<p>在产品生命周期的各个阶段有哪些人员需要介入、同步进行、依赖输入和最终产出等等，是需要方法论指导的，而不是乱打一气。</p>
<p><strong>规范文档的好处：</strong></p>
<ul>
<li>有记录</li>
<li>有产出</li>
<li>有计划</li>
<li>可回溯</li>
<li>可量化</li>
<li>易交接</li>
<li>易把控</li>
</ul>
<p>好处多多✨✨</p>
<h3 id="文档存放"><a href="#文档存放" class="headerlink" title="文档存放"></a>文档存放</h3><ul>
<li>Confluence</li>
<li>飞书云文档</li>
<li>……</li>
</ul>
<blockquote>
<p>项目开发全流程梳理请看我的<a href="https://juejin.cn/post/7119683383772315661">掘金文章</a></p>
</blockquote>
<h2 id="项目框架模板"><a href="#项目框架模板" class="headerlink" title="项目框架模板"></a>项目框架模板</h2><p>前端细分领域很多，对于公司而言，新产品的快速落地至关重要，对技术人员来说就需要准备一套前后端产品开发框架</p>
<ol>
<li>小程序</li>
<li>Web端</li>
<li>H5端</li>
<li>移动端原生</li>
<li>微前端</li>
<li>SSR</li>
<li>Node</li>
<li>大屏、可视化</li>
<li>……</li>
</ol>
<p>不同产品的技术框架可以自研，也可以在GitHub上寻找模板二次开发之后用作自己的框架模板</p>
<p>总之，就是为了可以快速的开发业务功能，而不用花太多时间在基础框架开发上面（正常来说这属于架构组的工作，对于这个职位的划分，存在肯定是有一定的道理的，毕竟每家公司情况都不太一样。我有自己的看法，不展开说了，技术是服务于业务的）</p>
<h2 id="公共库"><a href="#公共库" class="headerlink" title="公共库"></a>公共库</h2><ul>
<li>前端UI组件</li>
<li>前后端中间件</li>
<li>前后端依赖插件</li>
<li>网络安全验证插件（组件签名）</li>
<li>…….</li>
<li></li>
</ul>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p><strong>基础框架搭建：</strong></p>
<ul>
<li>面向对象封装</li>
<li>业务框架自上而下、自下而上组件设计</li>
<li>可扩展、可维护、可配置化架构</li>
<li>打包分析优化</li>
<li>错误补偿、捕获机制</li>
<li>……</li>
</ul>
<p><strong>规范：</strong></p>
<ul>
<li>设计大于开发（设计模式）</li>
<li>Hooks</li>
<li>函数式编程</li>
<li>Utils</li>
<li>Lint 代码检测</li>
<li>commit-msg规范</li>
<li>css BEM命名规范</li>
<li>组件化</li>
<li>更多参考业内顶流开源项目编码方式</li>
<li>前后端配合开发</li>
<li>……</li>
</ul>
<blockquote>
<p>可配置化架构设计示例请看我的<a href="https://juejin.cn/post/7122287847159103502">掘金文章</a></p>
</blockquote>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>很多人都讲性能优化，优化的角度比较混乱，基本上是想起什么了才开始弄，基本可以从<strong>加载时、运行时</strong>两方面分析优化。</p>
<p>维度这个东西直接影响着方向，有一个好的划分维度既不会遗漏，也很有条例，可见维度至关重要</p>
<p><strong>performance</strong>真是个好东西，包涵重定向、DNS解析到页面加载完成、卸载各阶段的市场统计，逐个分析优化，优化效果时长也立即可以看到，工作成果报告也很直观。我推荐从performance入手分析优化，具体指标不展开说了。</p>
<h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><p>持续构建（CI）、持续集成（CD）</p>
<ul>
<li>gitlab\github\gitee\coding...</li>
<li>Jenkins</li>
<li>Nginx</li>
<li>Sonar</li>
<li>Docker</li>
<li>JForg\Docker hub（镜像仓库、制品库）</li>
<li>容器云平台（集群部署）</li>
<li>Service Mesh（微服务）</li>
<li>制品晋级</li>
<li>自动化部署</li>
<li>灰度发布、蓝绿部署</li>
</ul>
<h2 id="技术型公司"><a href="#技术型公司" class="headerlink" title="技术型公司"></a>技术型公司</h2><ul>
<li>自研ui库</li>
<li>自研产品架构（小程序）</li>
<li>Web3</li>
<li>DevOps</li>
<li>各平台插件开发</li>
<li>云原生</li>
<li>音视频</li>
<li>3D建模</li>
<li>游戏引擎</li>
<li>元宇宙</li>
<li>物联网</li>
<li>10G</li>
<li>黑科技……</li>
</ul>
<h2 id="网络通信相关"><a href="#网络通信相关" class="headerlink" title="网络通信相关"></a>网络通信相关</h2><ul>
<li>业务区</li>
<li>渠道区</li>
<li>开发网</li>
<li>办公网</li>
<li>网关</li>
<li>软硬负载</li>
<li>网络策略</li>
</ul>
<h2 id="测试、生产环境"><a href="#测试、生产环境" class="headerlink" title="测试、生产环境"></a>测试、生产环境</h2><ul>
<li>SIT</li>
<li>UAT8</li>
<li>UAT6</li>
<li>安全测试</li>
<li>性能测试</li>
<li>同城</li>
<li>灾备</li>
<li>异地（终极方案：异地多中心，烧钱烧的厉害！）</li>
</ul>
<h2 id="基础应用服务平台建设"><a href="#基础应用服务平台建设" class="headerlink" title="基础应用服务平台建设"></a>基础应用服务平台建设</h2><ul>
<li>文件传输平台</li>
<li>影响平台</li>
<li>统一身份认证平台、SSO(向上分层)</li>
<li>API治理平台</li>
<li>ServiceMesh平台</li>
<li>报表平台</li>
<li>日志平台</li>
<li>消峰平台</li>
<li>分布式缓存、消息队列</li>
<li>消息中心</li>
<li>加密平台</li>
<li>……</li>
</ul>
<h2 id="团队建设"><a href="#团队建设" class="headerlink" title="团队建设"></a>团队建设</h2><ul>
<li>定期组织分享学习</li>
<li>建设团队号、技术推广（打造影响力，也让分享人员获得荣誉感、成就感）</li>
<li>评比、奖品激励</li>
<li>工作之余一块搞事情（开发、团建）</li>
<li>和谐，包容，相互学习</li>
</ul>
<h2 id="还有"><a href="#还有" class="headerlink" title="还有"></a>还有</h2><p>数据埋点统计、异常监控、低代码（<del>个人不看好低代码，架构做的好要什么低代码</del>。低代码跟PaaS结合起来，开放给用户，让用户去创造价值，赋能企业数字化）</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>发现写着写着变成技术条线建设了，很难拆分开，果然基建、团队、公司建设是分不开的。</p>
<p>什么是真正有价值的东西？我不知道，任何行业要想称为高级玩家，就必须摸清本质，慢慢捋顺。</p>
<p>“互联网公司”只是互联网技术时代过渡性的叫法，以后所有公司都会被互联网技术加持。互联网的核心价值在于跨时间、跨地域、跨平台、跨终端的资源的高效、合理、共享分配，听起来真是一个让人向往的地方。</p>
<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://home.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>团队建设</category>
      </categories>
      <tags>
        <tag>前端基建</tag>
        <tag>技术条线</tag>
      </tags>
  </entry>
  <entry>
    <title>将进酒</title>
    <url>/posts/1470090403.html</url>
    <content><![CDATA[<html><head></head><body><p>《将进酒》——李白</p>
<p>君不见黄河之水天上来，奔流到海不复回。</p>
<p>君不见高堂明镜悲白发，朝如青丝暮成雪。</p>
<p>人生得意须尽欢，莫使金樽空对月。</p>
<p>天生我材必有用，千金散尽还复来。</p>
<p>烹羊宰牛且为乐，会须一饮三百杯。</p>
<p>岑夫子，丹丘生，将进酒，杯莫停。</p>
<p>与君歌一曲，请君为我倾耳听。</p>
<p>钟鼓馔玉不足贵，但愿长醉不愿醒。</p>
<p>古来圣贤皆寂寥，惟有饮者留其名。</p>
<p>陈王昔时宴平乐，斗酒十千恣欢谑。</p>
<p>主人何为言少钱，径须沽取对君酌。</p>
<p>五花马、千金裘，呼儿将出换美酒，与尔同销万古愁。</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/643e24c10d2dde5777443fa3.jpg"></p>
<p>诗中交织着失望与自信、悲愤与抗争的情怀，体现出诗人强烈的<strong>豪迈、狂放、洒脱</strong>的个性。</p>
<p>全诗情感饱满、笔墨酣畅、抒情有力，在结构上大开大阖，张弛有度，充分体现了李白七言歌行的豪放特色。</p>
</body></html>]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的SSH，你了解多少？（长文警告）</title>
    <url>/posts/184663689.html</url>
    <content><![CDATA[<html><head></head><body><h1 id="1、SSH工作原理"><a href="#1、SSH工作原理" class="headerlink" title="1、SSH工作原理"></a>1、SSH工作原理</h1><p>从ssh的<strong>加密方式</strong>说开去，看下文👇</p>
<h2 id="1-1、对称加密"><a href="#1-1、对称加密" class="headerlink" title="1.1、对称加密"></a>1.1、对称加密</h2><p>客户端和服务端采用相同的密钥进行数据的加解密，很难保证密钥不丢失，或者被截获。隐藏着<strong>中间人攻击</strong>的风险</p>
<blockquote>
<p>如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就不存在了。这种风险就是著名的”中间人攻击”（<code>Man-in-the-middle attack</code>）</p>
</blockquote>
<p>为了解决对称加密的漏洞，就出现了非对称加密。非对称加密有两个密钥：“公钥”和“私钥”。公钥加密后的密文，只能通过对应的私钥进行解密。想从公钥推理出私钥几乎不可能，所以非对称加密的安全性比较高。</p>
<h2 id="1-2、非对称加密"><a href="#1-2、非对称加密" class="headerlink" title="1.2、非对称加密"></a>1.2、非对称加密</h2><p><strong>ssh连接远程git仓库时的登录验证原理</strong>：本地主机向远程主机发送登录请求，远程主机收到请求后，返回给本地主机一个随机字符串A，本地主机用私钥加密字符串A得到密文B，并把密文B发送给远程主机，远程主机用公钥解密密文A得到字符串B，并判断A是否等于B，如果相等，则认证成功，反之，则反之。<br>不在要求使用密码登录，以公私钥的方式实现免密登录</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63119b6b16f2c2beb1e029b5.png"></p>
<h2 id="1-3、基于口令和公钥认证"><a href="#1-3、基于口令和公钥认证" class="headerlink" title="1.3、基于口令和公钥认证"></a>1.3、基于口令和公钥认证</h2><p>只有在第一次连接的时候需要，通信双方验证身份之后就可以通过在客户端的私钥和你存放在服务器的公钥进行认证。(通过服务器上的公钥加密，客户端的私钥解密来验证)</p>
<p><strong>第一次登录：</strong></p>
<blockquote>
<p>如果不是第一次登录，想看一下效果的话，可以修改一下本地的 <code>~/.ssh/known_hosts</code> 文件名（<code>~/.ssh/known_hosts</code>文件中保存的是已经认证过的公钥信息），重命名该文件之后，相当于清空了认证过的公钥信息，再次连接的时候就会重新认证😁😁</p>
</blockquote>
<ol>
<li>ssh连接远程主机</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@gitcode.net:xxx.git</span><br><span class="line">Cloning into <span class="string">'xxx'</span>...</span><br><span class="line">The authenticity of host <span class="string">'gitcode.net (119.3.229.170)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is SHA256:pyrMa3p0o90Qsuz2+kMX3CIBl+S1cZsdRlCoaosSg00Qs.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no/[fingerprint])?yes</span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>gitcode.net,119.3.229.170<span class="string">' (RSA) to the list of known hosts.</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>查看 known_hosts 文件</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看known_hosts文件</span></span><br><span class="line">$ <span class="built_in">cat</span> known_hosts</span><br><span class="line">gitcode.net,119.3.229.170 ssh-rsa AAAAB3NzaC1yc2EAAAL......</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p>因为公钥长度较长（采用<code>RSA</code>算法），很难比对，所以对其进行<code>MD5</code>计算，将它变成一个128位的指纹，如上<code>fingerprint</code>，这样比对就容易多了。</p>
</li>
<li><p>当远程主机的公钥被接受以后，它就会被永久保存在文件 <code>~/.ssh/known_hosts</code> 文件之中，下次再登录就会跳过<code>Warning</code>部分</p>
</li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63119b8216f2c2beb1e035eb.png" alt="该图来源网络，侵删"><br>上图来源网络，侵删</p>
<blockquote>
<p>下面以多个主机配置<code>ssh</code>连接时怎么指定使用哪个公钥为切入点，讲解<code>ssh config</code>。讲透、看爽！</p>
</blockquote>
<h1 id="2、多个代码仓库配置ssh连接问题"><a href="#2、多个代码仓库配置ssh连接问题" class="headerlink" title="2、多个代码仓库配置ssh连接问题"></a>2、多个代码仓库配置ssh连接问题</h1><p>SSH 是连接远程主机最常用的方式，尽管连接到单个主机的基本操作非常直接，但当你开始使用大量的远程系统时（比如：配置多个代码托管平台的ssh），这就会成为笨重和复杂的任务。</p>
<p>幸运的是，<a href="https://www.ssh.com/academy/ssh/openssh">OpenSSH</a> 允许您提供自定义的客户端连接选项。这些选项可以被存储到一个配置文件中，这个配置文件可以用来定义每个主机的配置。这有助于保持每个主机的连接选项更好的独立和组织，也你让你在需要连接时避免在命令行中写繁琐的选项。</p>
<p>目前我使用的代码托管平台有<code>GitHub、Gitee、Gitlab、Gitcode</code>（瞎折腾👀），即使只使用一个平台，比如 gitlab，也会存在公司账号跟个人账号的ssh配置问题，下面讲解ssh连接远程主机时怎么指定使用哪个公钥</p>
<blockquote>
<p>下面展示都在Windows 系统下</p>
</blockquote>
<h1 id="3、ssh-config-自定义主机配置"><a href="#3、ssh-config-自定义主机配置" class="headerlink" title="3、ssh config 自定义主机配置"></a>3、ssh config 自定义主机配置</h1><h2 id="3-1、ssh-config-介绍"><a href="#3-1、ssh-config-介绍" class="headerlink" title="3.1、ssh config 介绍"></a>3.1、ssh config 介绍</h2><p>解决多个ssh密钥使用问题的<strong>最佳方案</strong>就是通过维护一个本地配置 <code>config</code>，指定主机使用哪个密钥。</p>
<blockquote>
<p>其他方案：（需要连接的主机多了同样很难管理，不建议使用，了解即可）</p>
<ol>
<li><p>设置环境变量<code>GIT_SSH_COMMAND</code>解决</p>
</li>
<li><p>指定命令行参数：<code>ssh -i ~/.ssh/xxx.pub -p 22  www.example.com</code></p>
</li>
</ol>
</blockquote>
<p>用户级设置的路径: <code>~/.ssh/config</code></p>
<h3 id="3-1-1、文件格式"><a href="#3-1-1、文件格式" class="headerlink" title="3.1.1、文件格式"></a>3.1.1、文件格式</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Host firsthost</span><br><span class="line">    SSH_OPTIONS_1 custom_value</span><br><span class="line">    SSH_OPTIONS_2 custom_value</span><br><span class="line">    SSH_OPTIONS_3 custom_value</span><br><span class="line"></span><br><span class="line">Host secondhost</span><br><span class="line">    ANOTHER_OPTION custom_value</span><br><span class="line"></span><br><span class="line">Host *host</span><br><span class="line">    ANOTHER_OPTION custom_value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公用配置在最下面</span></span><br><span class="line">Host *</span><br><span class="line">    CHANGE_DEFAULT custom_value</span><br></pre></td></tr></tbody></table></figure>
<p>解释：Host：ssh连接主机的别称 alias</p>
<h3 id="3-1-2、尝鲜一下"><a href="#3-1-2、尝鲜一下" class="headerlink" title="3.1.2、尝鲜一下"></a>3.1.2、尝鲜一下</h3><p>本地系统的每个用户都可以维护一个客户端的 SSH 配置文件，这个配置文件可以包含你在命令行中使用 ssh 时参数，也可以存储公共连接选项并在连接时自动处理。你可以在命令上中使用 ssh 来指定 flag ，以覆盖配置文件中的选项。<br>看一个例子：</p>
<ul>
<li>ssh命令行的方式：</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh -i ~/.ssh/xxx -p 22 -l admin \ www.example.com</span><br></pre></td></tr></tbody></table></figure>
<p>上面的命令可以转换成 <code>config</code> 的形式，如下：</p>
<ul>
<li><code>ssh/config</code> 定义主机连接参数配置</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Host myserver1</span><br><span class="line">	Hostname www.example.com</span><br><span class="line">	<span class="comment"># User admin</span></span><br><span class="line">	Port 22</span><br><span class="line">	IdentityFile ~/.ssh/xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公共配置， 必须在文件最下面</span></span><br><span class="line">Host *</span><br><span class="line">  User admin</span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-2、解释算法"><a href="#3-2、解释算法" class="headerlink" title="3.2、解释算法"></a>3.2、解释算法</h2><p>它从文件顶部向下执行此操作，所以顺序非常重要，了解这个之后，方便我们写出更好的主机定义配置选项、方便运维管理。</p>
<p>当匹配到第一个主机定义时，并不会终止，而是继续往下查找，检查是否有其他匹配的 Host 定义。如果有另一个 Host 定义匹配，SSH 将该 Host 定义下的配置选项跟前面匹配到的主机定义配置选项合并（<strong>随着继续往下读取配置，最终配置选项是叠加的</strong>）</p>
<h2 id="3-3、ssh-config-的工作原理✨"><a href="#3-3、ssh-config-的工作原理✨" class="headerlink" title="3.3、ssh_config 的工作原理✨"></a>3.3、ssh_config 的工作原理✨</h2><h3 id="3-3-1、ssh-客户端按以下顺序从三个地方读取配置："><a href="#3-3-1、ssh-客户端按以下顺序从三个地方读取配置：" class="headerlink" title="3.3.1、ssh 客户端按以下顺序从三个地方读取配置："></a>3.3.1、ssh 客户端按以下顺序从三个地方读取配置：</h3><ol>
<li><p>系统范围内 <code>/etc/ssh/ssh_config</code>（适用与主机下的所有用户，系统级 System）</p>
</li>
<li><p>用户特定的 <code>~/.ssh/config</code> （用户级）</p>
</li>
<li><p>ssh直接提供给的命令行标志 （命令参数可以重写已有的固定配置）</p>
</li>
</ol>
<p>我通常使用的用户级的配置，下面是我个人的配置，仅供参考：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># gitcode - csdn</span></span><br><span class="line">Host gitcode.net</span><br><span class="line">  HostName gitcode.net</span><br><span class="line">  Preferredauthentications publickey</span><br><span class="line">  IdentityFile ~/.ssh/gitcode</span><br><span class="line"></span><br><span class="line"><span class="comment"># gitlab</span></span><br><span class="line">Host gitlab.com</span><br><span class="line">  HostName gitlab.com</span><br><span class="line">  IdentityFile ~/.ssh/gitlab-rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line">Host github.com</span><br><span class="line">  HostName github.com</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># gitee</span></span><br><span class="line">Host gitee.com</span><br><span class="line">  HostName gitee.com</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 共享配置，文件最下面</span></span><br><span class="line">Host *</span><br><span class="line">  <span class="comment"># 认证方式首选 publickey(公钥)， 可选： publickey,gssapi-keyex,gssapi-with-mic,password</span></span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  User git <span class="comment"># ssh [Host] === ssh [User]@[HostName]</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>解释：</strong></p>
<ul>
<li><p>Host：ssh的别称</p>
<p>比如 Host 设置成 xiao ，使用的时候 ssh xiao（注意设置User）</p>
</li>
<li><p>HostName： 服务器的地址</p>
</li>
<li><p>PreferredAuthentications : 认证方式</p>
<p>可选： <code>publickey,gssapi-keyex,gssapi-with-mic,password</code></p>
</li>
<li><p>IdentityFile: 指定连接HostName的密钥文件的路径</p>
</li>
</ul>
<h3 id="3-3-2、主机别名设置例子"><a href="#3-3-2、主机别名设置例子" class="headerlink" title="3.3.2、主机别名设置例子"></a>3.3.2、主机别名设置例子</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Host dev1</span><br><span class="line">    HostName dev1.example.com</span><br><span class="line">    User jeery</span><br></pre></td></tr></tbody></table></figure>

<p>现在要连接到 <code>jeery@dev1.example.com</code>，就可以通过在命令行中输入如下命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh dev1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">ssh jeery@dev1.example.com</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-3-3、git-仓库连接别名设置例子"><a href="#3-3-3、git-仓库连接别名设置例子" class="headerlink" title="3.3.3、git 仓库连接别名设置例子"></a>3.3.3、git 仓库连接别名设置例子</h3><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63119ba916f2c2beb1e0475e.png"></p>
<h2 id="3-4、连接问题"><a href="#3-4、连接问题" class="headerlink" title="3.4、连接问题"></a>3.4、连接问题</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">PS C:\Users\xiao\.ssh&gt;vim .\config</span><br><span class="line">PS C:\Users\xiao\.ssh&gt;ssh -T git@gitcode.net</span><br><span class="line">Bad owner or permissions on C:\\Users\\xiao/.ssh/config</span><br><span class="line">PS C:\Users\xiao\.ssh&gt;</span><br></pre></td></tr></tbody></table></figure>

<p><strong>解决：</strong></p>
<p>修改 config 文件 权限</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh/</span><br><span class="line"><span class="built_in">chmod</span> 600 config</span><br></pre></td></tr></tbody></table></figure>

<h1 id="4、git仓库设置ssh连接"><a href="#4、git仓库设置ssh连接" class="headerlink" title="4、git仓库设置ssh连接"></a>4、git仓库设置ssh连接</h1><p>下面演示我的设置步骤，仅供参考</p>
<h2 id="4-1、本地生成公私钥对"><a href="#4-1、本地生成公私钥对" class="headerlink" title="4.1、本地生成公私钥对"></a>4.1、本地生成公私钥对</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -o -t rsa -C <span class="string">"yourmail"</span> -b 4096</span><br></pre></td></tr></tbody></table></figure>

<p>🔊 记得设置<code>key</code>的名字哟，默认是 <code>id_rsa</code>（如果不设置<code>key</code>，新生成的 <code>id_rsa</code> 文件会覆盖原有的<code>id_rsa</code>文件，之前添加过的就不能用啦！），参考下图👇</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63119bba16f2c2beb1e054d6.png"></p>
<h2 id="4-2、配置远程主机ssh"><a href="#4-2、配置远程主机ssh" class="headerlink" title="4.2、配置远程主机ssh"></a>4.2、配置远程主机ssh</h2><p>登录要连接的远程主机，这里演示 <a href="https://gitcode.net/dashboard/projects/home">gitcode</a> 平台</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63119bc716f2c2beb1e06187.png"></p>
<h2 id="4-3、设置-ssh-config"><a href="#4-3、设置-ssh-config" class="headerlink" title="4.3、设置 ssh_config"></a>4.3、设置 ssh_config</h2><p>这里我统一维护在 <code>~/.ssh/config</code>里面维护，增加<code>gitcode</code>主机定义配置， 如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># gitcode - csdn</span></span><br><span class="line">Host gitcode.net</span><br><span class="line">  HostName gitcode.net</span><br><span class="line">  IdentityFile ~/.ssh/gitcode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 共用配置，文件最下面</span></span><br><span class="line">Host *</span><br><span class="line">  <span class="comment"># 认证方式首选 publickey(公钥), 可选: publickey,gssapi-keyex,gssapi-with-mic,password</span></span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  User git <span class="comment"># ssh [Host] === ssh [User]@[HostName]</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="4-4、测试连接"><a href="#4-4、测试连接" class="headerlink" title="4.4、测试连接"></a>4.4、测试连接</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">xiao@LAPTOP-L6TI0438 MINGW64 ~/.ssh</span><br><span class="line">ssh -T gitagitcode.net</span><br><span class="line">Welcome to GitLab,@heyYouU!</span><br><span class="line">xiao@LAPTOP-L6TI0438 MINGW64 ~/.ssh</span><br></pre></td></tr></tbody></table></figure>

<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>相信看完上面的讲解，会对ssh理解的更清除一点。So，快来更换 ssh 试试吧</p>
<p><strong>连接远程仓库可以选择https，也可以选择ssh</strong></p>
<p>区别：</p>
<ol>
<li><p>https 连接有文件传输大小限制，ssh没有</p>
</li>
<li><p>ssh传输速度比https协议快</p>
</li>
<li><p>https 连接提交代码的时候需要输入账户密码登录，ssh则是以公私钥加解密随机数的方式免密登录</p>
</li>
</ol>
<p>连接仓库的方式可以转换，如： https 转成 ssh，比较简单，不作介绍。</p>
<p>SSH东西超多的，光 SSH 配置选项就几十个，本文抛砖引玉，大家可以继续往下探索🎉🎉</p>
<p>参考文档：</p>
<ul>
<li><p><a href="https://www.digitalocean.com/community/tutorials/how-to-configure-custom-connection-options-for-your-ssh-client">https://www.digitalocean.com/community/tutorials/how-to-configure-custom-connection-options-for-your-ssh-client</a></p>
</li>
<li><p><a href="http://www.bjpowernode.com/hot/2664.html">http://www.bjpowernode.com/hot/2664.html</a></p>
</li>
</ul>
<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://home.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>我的2022年回顾总结</title>
    <url>/posts/2756335254.html</url>
    <content><![CDATA[<html><head></head><body><p>每每到年底，总会感概时间飞逝，总会莫名的心慌几天。</p>
<p>高中时代我就明白了一个道理：自己决定做的事，就算结果再烂以后也不要后悔，因为那无异于否定过去的自己。人不能总是否定自己的过去，因为我觉得这样会打击自己，产生心理暗示，时间拉长之后，就会觉得自己很失败难以翻身。</p>
<h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>还记得去年春节假期期间，我在家里立下了今年的Flag（银行从业资格证、Go Web、软考、学Python），我把它写在便签上，贴到我书桌上方，一抬头就可以看见。</p>
<p><strong>银行从业资格证</strong>，本来是五月份考试因为疫情拖了几个月，7月16周六才考试（而且7月16那天正好住的地方封控了，只进不出。所以我周五下班之后没有回家，直接到考点附近找了一个宾馆住了一晚，第二天考完才回家）。好在两门科目都取得了不错的成绩，满分100，我考了一个78一个76，实体证书也已经拿到了。<strong>疫情是真耽误事。</strong></p>
<p><strong>Go Web</strong>，去年国庆节前夕开始学的Docker，我记得国庆节假期都用来学Docker了，看视频、买书、实操相结合，前后大概学了一个月左右吧。Go应该是去年11月开始学的，本来计划的是自学四个月，然后年后三四月份换一份Go开发的工作。我踏踏实实学完之后，年后面试了几个公司，面试的时候简历上的求职信息写的是前端高级/Go开发，前后面了拼多多（前端）、字节（前端）、自如（前端架构）、用友（前端）、流利说（前端）、天猫（前端）、B站（DevOps运维开发工程师）、蔚来（前端）、中国电信集成（前端）、数字马力（前端）、华为OD(没参加面试)……想不起来了，大概就这么多。主要面试的还是前端，面试的时候有的也问了一些Go语言的知识。出于一些原因，这些面试我最后都没去，还在蹲老坑，继续等机会。后来Go开发实在不好找，在社区上认识了学Go的小伙伴，我说<strong>要转Go的话，最好在现在公司可以完成内部转岗，熟悉个一年半载再出来找就好找了</strong>。到这里，成为Gopher的想法也暂时搁置了，大概率是捡不起来了。</p>
<p><strong>软考</strong>，因为银从延期考试导致我复习时间线被迫拉长，软考竟然错过报名了，买了书、买了视频课结果也没报名考试，有机会了明年再看看吧。</p>
<p><strong>学Python</strong>，这个Flag是一点都没做。前面几个只完成了一个，导致我有点不知所措，今天后半年又转到在社区上发力了，有兴趣可以看看<a href="https://home.i-xiao.space/">这里</a>，拿了不少实物、虚拟奖励，也有几百块现金奖励。</p>
<p>我给自己制定了一个<strong>飞书计划</strong>，这个计划主要是列举了一些技术问题点，一个个去探索，然后总结发文。用<strong>Hexo</strong>搭建了个人网站，完整的教程可以参考<a href="https://juejin.cn/post/7133927239153877022">这里</a>，建设博客连续花费了两周的午休加周末，这东西做起来强迫症又犯了，特别耗时间。</p>
<p>六月份的时候突发奇想跟朋友一块开发了一个<strong>React Native</strong>的软件，那段时间工作上忙的抽不开身，也是开发了一半。后来计划做的参与贡献知名<strong>开源项目</strong>、把单据架构那一套自己实现一下、开发<strong>VS code插件</strong>、<strong>Chrome扩展</strong>等还没完成。之前还想着自己部署个<strong>私服</strong>、搞个<strong>NAS</strong>，前后考虑了一下，这个太烧钱了，我没有多余的钱。</p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>年初跟我妈跑着看市场、店面，可以说是一时兴起，也可以说是准备了很久。总之暂时是不想了，也幸亏没有开店面，要不然真是赔的底朝天。等疫情完全过去了，再去考虑一下，应该做人做事会成熟很多，待人接物大事小情都要做到位、做的漂亮。</p>
<p>本来想着从上海回来离家近了，可以时常回家看看奶奶，但是被疫情搅乱了。还好一有机会我就回家看奶奶了，在家的时光总是短暂的、记忆清晰的。跟发小一块在我家院子里聊到深夜，给老院子搭个厕所，摘柿子，给奶奶做饭吃，在老家的监控设备里跟奶奶唠嗑。</p>
<p>上半年约了大学的好朋友好室友一块吃饭喝酒，也因为疫情没有聚到一块，希望不久的将来可以实现。</p>
<p>今年也不知道从什么时候开始的，喜欢看一些<strong>短视频</strong>，其中喜欢看的一类是讲述农村生活的、具有朴素生活气的视频，就跟《地球最后的夜晚》、《那山那人那狗》一样，看水壶里的凉水烧的呜呜叫，走一条很远的路。谁都希望过物质富裕的生活，一步步来就好，一切美好都值得期待。同时也希望不要迷失自我，时刻知道自己是谁，从哪里来，到哪里去。当时间沉淀了一切，我们依旧渴望获得一些朴素的情感，说一些朴素的话，获得一些朴素的情感，所有的都像麦秸一般真挚。</p>
<h2 id="展望2023"><a href="#展望2023" class="headerlink" title="展望2023"></a>展望2023</h2><p>不如意是常有的事，关键在于我们采取什么样的方式面对、处理。笑笑给我说了一句话，我觉得很有道理，说给大家听听，“<strong>要相信付出就会有收获，不是收获在这，就是收获在那，不是收获在这时，就是收获在那时！</strong>”所以，别着急。时人不识凌云木，直待凌云始道高。只管努力！冲破一切！</p>
<p>最后总结一下，想法太多了容易飘，做一件事做好、做到极致。在工作的同时，一年额外做一两件事就不得了了，以后还是找准方向、踏踏实实的做。</p>
<p>希望我会像十七八岁时那样勇敢、无畏、做自己，充满无穷的力量，想去的地方一下子就能飞的到，无限膨胀，膨胀到全世界都知道我的存在！</p>
<p><strong>今天只有残留的躯壳，迎接光辉岁月。世界是明亮的，到处是阳光！</strong></p>
<hr>
<p>我是 <a href="https://m.i-xiao.space/"><strong>甜点cc☭</strong></a></p>
<p>公众号：【看见另一种可能】</p>
<p>专注前端开发，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
</body></html>]]></content>
      <categories>
        <category>代码人生</category>
      </categories>
      <tags>
        <tag>代码人生</tag>
      </tags>
  </entry>
  <entry>
    <title>捕获404页面，并重定向页面</title>
    <url>/posts/3730822077.html</url>
    <content><![CDATA[<html><head></head><body><p>话不多说，直接上代码：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 捕获404页面，并重定向</span></span><br><span class="line"><span class="keyword">const</span> isRunUrl = <span class="keyword">function</span> (<span class="params">url</span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) {</span><br><span class="line">    <span class="comment">// 测试链接连通性, 主要检测404错误</span></span><br><span class="line">    <span class="comment">// 由于AJAX通常无法区分404和跨域问题，所以只能用script 或者 link标签，link比script更容易捕获错误</span></span><br><span class="line">    <span class="keyword">var</span> dom = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">'link'</span>);</span><br><span class="line">    dom.<span class="property">href</span> = url;</span><br><span class="line">    dom.<span class="property">rel</span> = <span class="string">'stylesheet'</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(dom);</span><br><span class="line">    dom.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">removeChild</span>(dom);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    }</span><br><span class="line">    dom.<span class="property">onerror</span> = reject;</span><br><span class="line">  });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">isRunUrl</span>(<span class="string">"your url"</span>).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">// 处理resolve的代码</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"ok"</span>, data);;</span><br><span class="line">  }, <span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">// 处理reject的代码，重定向逻辑</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"err"</span>, err);</span><br><span class="line">  }</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>

<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<center>欢迎微信扫码关注 "看见另一种可能"！</center>

<img data-src="/images/base/loading03.svg" data-original="/images/contact/qrcode_wechat.jpg" alt="wechat：看见另一种可能"></body></html>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>404</tag>
      </tags>
  </entry>
  <entry>
    <title>最近接触的东西</title>
    <url>/posts/2564859285.html</url>
    <content><![CDATA[<html><head></head><body><p>我的博客最开始采用的是<code>Hexo</code>+<code>hexo-theme-next</code>搭建的，使用<code>GitHub Pages</code>托管并进行自动化部署，写文发布的流程非常简单方便，云端写作发布也轻而易举。</p>
<p>本来事情到这里就应该结束了，但是，我又进行了下面的一些尝试</p>
<h2 id="装备"><a href="#装备" class="headerlink" title="装备"></a>装备</h2><ol>
<li>美化博客<ul>
<li><code>NexT</code>主题允许通过<code>custom_file_path</code>设置外挂文件进行修改</li>
<li>自定义界面修改</li>
</ul>
</li>
<li>图片加载优化<ul>
<li><code>lazyload</code></li>
</ul>
</li>
<li>图床使用<ul>
<li>目前使用的<code>聚合图床</code>效果不佳</li>
<li><a href="https://img.show/">img.show</a></li>
<li><a href="https://imagelol.com/">笑果图床</a></li>
</ul>
</li>
<li>文章压缩发布<ul>
<li><code>hexo-neat</code></li>
</ul>
</li>
<li>评论、统计分析插件<ul>
<li><code>valine</code>、<code>waline</code>、<code>changyan</code>、<code>livere</code>、<code>gitalk</code></li>
<li><code>busuanzi</code>、<code>leancloud</code>、<code>cloudflare</code></li>
</ul>
</li>
<li>搜索引擎优化<ul>
<li><code>Bing</code></li>
<li><code>Baidu</code></li>
<li><code>sogou</code></li>
<li>……</li>
</ul>
</li>
<li><a href="https://www.addthis.com/">AddThis</a>挂件添加</li>
<li>友链页面定制开发</li>
<li>本地搜索<code>local_search</code></li>
<li><a href="https://gitter.im/">Gitter</a>聊天工具添加</li>
<li>备案信息</li>
<li>……</li>
</ol>
<p><code>NexT</code>主题虽好，但还是有一些界面样式不太美观，我就开始动手修改。不得不说美化主题这件事真的很费心思，自己内心对美的追求让我反复修改，不禁让我想起来工作中产品经理频繁改方案的场景。经过反复拉扯，最终还算满意。</p>
<p>本来事情到这里就应该结束了，但是，国内访问<code>GitHub Pages</code>部署的站点加载比较慢，所以，我就开始尝试部署到<code>Netlify</code>、<code>Vercel</code>上，</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>个人觉得任何改动都要有一个长远的打算。对博客站点来说，就是要充分考虑可迁移性、弹性部署、写作方便、相关依赖升级方便。比如要考虑<code>NexT</code>主题升级、评论数据可迁移。总之，一个原则：<strong>使用平台的同时不能受制于平台</strong>，最初的目的就是打造一片属于自己的“自留地”😊</p>
<ol>
<li>图床使用：稳定、高速</li>
<li>评论插件：隐私、可管理、可迁移，较低的侵入性，不需要魔改主题文件，不然主题升级会带来很多麻烦</li>
<li>搜索引擎优化：基本都是同一个路子，添加验证、网站收录url等，效果还不是很明显，需要进一步研究</li>
<li>友链页面：本着最少改动、不影响主题升级，自己动手开发</li>
<li>托管部署：有很多平台可供部署网站，集成云数据库、<code>Serverless</code>等功能，部署成功之后生成一个平台自动分配的域名，也可以绑定个人域名。没有云服务器同样可以部署网站😃</li>
</ol>
<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://home.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>现值</title>
    <url>/posts/4284137303.html</url>
    <content><![CDATA[<html><head></head><body><h3 id="计算多期中现值的公式为："><a href="#计算多期中现值的公式为：" class="headerlink" title="计算多期中现值的公式为："></a>计算<strong>多期中现值</strong>的公式为：</h3><p>$$PV,= ,\frac{FV}{(1+r)^t}$$</p>
<blockquote>
<p>PV: 现值；</p>
<p>FV: 终值；</p>
<p>t: 年数；</p>
<p>r: 利率；</p>
<p>$(1+r)^t$: 复利终值系数，折现率越高，复利终值系数越高。</p>
<p>$(1+r)^{-t}$: 复利现值系数，折现率越高，复利现值系数越低。</p>
</blockquote>
<p><strong>净现值</strong>（NPV）是指一个项目预期实现的现金流入的现值与实施该项计划的现金支出的差额。</p>
<p>$净现值 = 现金流入 - 现金支出$</p>
<h3 id="怎么判断项目是否可以做？"><a href="#怎么判断项目是否可以做？" class="headerlink" title="怎么判断项目是否可以做？"></a>怎么判断项目是否可以做？</h3><ul>
<li><p>当净现值（NPV）大于0时，项目可行，反之不可行；</p>
</li>
<li><p>内部报酬率（IRR）大于融资成本时，项目可行。</p>
</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>金融</category>
      </categories>
      <tags>
        <tag>金融</tag>
      </tags>
  </entry>
  <entry>
    <title>看了的，没看的书</title>
    <url>/posts/2212813940.html</url>
    <content><![CDATA[<html><head></head><body><p>书籍是通往智慧的阶梯。</p>
<p>获得的宝箱就要打开，别舍不得拆，抓住重点！</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/633e989516f2c2beb1d0fe46.jpg"></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/633e992616f2c2beb1d22a90.jpg"></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/633e993116f2c2beb1d24935.jpg"></p>
<p>这些书差不多全是这将近两年的时间里买的。其实从书本里得到的理论知识我现在基本上全忘了，留下来的都是实操经验。可见实操是多么的重要，而且在自己动手练习的过程中，还要不断尝试总结、记录学习历程。</p>
<p>话说回来，卖二手书是真的便宜，大概连都废纸都不如，一本react技术栈，一毛钱一本，what fuck?!</p>
<p>其实我想卖的是那种基本没什么太多干货的书，一看这么便宜，索性都留着吧。</p>
<blockquote>
<p>我说我的 HTTP权威指南 去哪了，找了好久没找到，昨天收拾电脑，忽然发现在电脑下面垫着🤣🤣</p>
</blockquote>
<p>喜欢读书，在上海那几年喜欢读“无用之书”（历史、文学、小说，技能相关的书籍也买了些许），到现在也基本忘了看过的书了，还是要学以致用，以用为学。</p>
<p>不问收获，但问耕耘。自主反思，归纳总结，把知识内化。</p>
<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端touch拖动事件和click事件冲突问题解决</title>
    <url>/posts/372820594.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>通过一个悬浮球交互功能的案例来阐述问题，以及解决办法。</p>
</blockquote>
<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p>类似微信里的悬浮窗效果，苹果手机的悬浮球功能效果</p>
<ol>
<li>可以点击拖动，然后吸附在窗口边缘</li>
<li>点击悬浮球，可以跳转界面，或者更改悬浮球的形态</li>
</ol>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol>
<li>移动端使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent"> <code>touch</code>事件类型</a>：</li>
</ol>
<ul>
<li><code>touchstart</code>当用户在触摸平面上放置了一个触点时触发 （手指放到屏幕上）</li>
<li><code>touchmove</code>当用户在触摸平面上移动触点时触发 （手指在屏幕上滑动）</li>
<li><code>touchend</code>当一个触点被用户从触摸平面上移除（抬起手指）</li>
<li><code>touchcancel</code>终止触摸事件</li>
</ul>
<p><strong>多点触控</strong></p>
<ol start="2">
<li>TouchEvent.<strong>targetTouches</strong> 只读</li>
</ol>
<p>一个 TouchList 对象，是包含了如下触点的 Touch 对象：触摸起始于当前事件的目标 element 上，并且仍然没有离开触摸平面的触点。</p>
<p>视口处于第四象限，原点在左上角</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">event.<span class="property">targetTouches</span>.<span class="property">clientX</span> <span class="comment">// 触摸元素横坐标</span></span><br><span class="line">event.<span class="property">targetTouches</span>.<span class="property">clientY</span> <span class="comment">// 触摸元素纵坐标</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>TouchEvent.<strong>touches</strong> 只读</li>
</ol>
<p>一 个 TouchList 对象，包含了所有当前接触触摸平面的触点的 Touch 对象，无论它们的起始于哪个 element 上，也无论它们状态是否发生了变化。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>通过设置悬浮球定位样式，拖动的时候计算坐标，然后动态的修改悬浮球的定位偏移量，结合<code>transtion</code>过渡效果，实现平滑的过渡</p>
<p>代码比较简单，就不贴了。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>当给元素添加了<code>touch</code>事件之后，<code>click</code>事件就不会出发了，那么怎么模拟点击效果呢？</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>在不了解触摸事件响应机制的时候，你可能会从计算触摸目标元素的时长或者计算触摸起始位置来判定点击行为，但是这两种方式都不是最佳的，原因有以下几点：</p>
<ol>
<li>计算触摸时长比较麻烦</li>
<li>判断移动距离不严谨，有可能拖动了一圈又回到初始位置</li>
<li>结合计算触摸时长和触摸元素起始位置两种方式，逻辑比较复杂</li>
</ol>
<p>下面看我是怎么做的：</p>
<p>首先应该了解触摸行为的事件响应机制：</p>
<ul>
<li>如果有拖动行为，事件执行次序为：<code>touchstart</code>-&gt; <code>touchmove</code>-&gt; <code>touchend</code></li>
<li>没有拖动行为，事件执行次序为：<code>touchstart</code>-&gt; <code>touchend</code></li>
</ul>
<p>从上面的分析来看，我们可以从touchmove 入手，继续往下看👇</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol>
<li>在<code>touchmove</code>事件中增加一个是否移动过的标记<code>isMoved: true</code></li>
<li>在<code>touchend</code>事件中判断<code>isMoved</code>是否为<code>true</code>，是<code>true</code>则按原有逻辑执行，是<code>false</code>则说明没有移动过，属于点击行为</li>
<li>在<code>touchend</code>事件最后，重置<code>isMoved</code>为初始值<code>false</code>，这样每一个触摸操作都可以进入同样的逻辑，不用担心状态混乱</li>
</ol>
<p>完美解决模拟点击行为</p>
<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>H5</category>
      </categories>
      <tags>
        <tag>TouchEvent</tag>
      </tags>
  </entry>
  <entry>
    <title>算法 | 详解斐波那契数列问题</title>
    <url>/posts/536639538.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>本篇是学习了《趣学算法（第2版）》 第一章之后总结的，收录至<a href="https://blog.i-xiao.space/categories/%E7%AE%97%E6%B3%95/">算法专栏</a></p>
</blockquote>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63573f1a16f2c2beb10e3ceb.jpg"></p>
<p>上一篇讲到了等比数列求和问题，求$S_n = 1 + 2 + 2^2 + 2^3 + … + 2^{63}= ？$，该函数属于<strong>爆炸增量函数</strong>，如果采用常规运算，则要考虑算法的时间复杂度。</p>
<h2 id="算法知识点"><a href="#算法知识点" class="headerlink" title="算法知识点"></a>算法知识点</h2><ul>
<li><p>斐波那契数</p>
</li>
<li><p>动态规划（拆分子问题；记住过往，减少重复计算）</p>
</li>
</ul>
<h2 id="算法题目"><a href="#算法题目" class="headerlink" title="算法题目"></a>算法题目</h2><p>假设第1个月有1对初生的兔子，第2个月进入成熟期，第3个月开始生育兔子，而1对成熟的兔子每月会生<br>1对兔子，兔子永不死去..…那么，由1对初生的兔子开始，12个月后会有多少对兔子呢？</p>
<h2 id="做题思路"><a href="#做题思路" class="headerlink" title="做题思路"></a>做题思路</h2><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63573fb116f2c2beb10ebed9.jpg"></p>
<p>这个数列有如下十分明显的特点：从第3个月开始，$当月的兔子数=上月兔子数+当月新生兔子数$，而$当月新生兔子数=上上月的兔子数$。因此，前面相邻两项之和便构成后一项，换言之：<br>$$当月的兔子数=上月兔子数+上上月的兔子数$$</p>
<h3 id="斐波那契数如下："><a href="#斐波那契数如下：" class="headerlink" title="斐波那契数如下："></a>斐波那契数如下：</h3><p><code> 1 ，1 ，2 ，3 ，5 ，8， 13 ，21 ，34 ......</code></p>
<h3 id="递归表达式"><a href="#递归表达式" class="headerlink" title="递归表达式"></a>递归表达式</h3><p>$$F(n)=<br>\begin{cases}<br>1&amp;， \text{n=1}\<br>1&amp;， \text{n=2}\<br>F(n-1) + F(n-2)&amp;， \text{n&gt;2}<br>\end{cases}$$</p>
<p>根据递归表达式，初步的算法代码如下：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fbn</span> = (<span class="params">n</span>) =&gt; {</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) {</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="title function_">fbn</span>(n-<span class="number">2</span>) + <span class="title function_">fbn</span>(n-<span class="number">1</span>)</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>让我们看一下上面算法的时间复杂度，也就是计算的总次数$T(n)$</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><blockquote>
<p>时间复杂度算的是最坏情况下的时间复杂度</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">n=<span class="number">1</span>时，<span class="title function_">T</span>(n)=<span class="number">1</span></span><br><span class="line">n=<span class="number">2</span>时，<span class="title function_">T</span>(n)=<span class="number">1</span>；</span><br><span class="line">n=<span class="number">3</span>时，<span class="title function_">T</span>(n)=<span class="number">3</span>; <span class="comment">//调用Fib1(2)和Fib1(1)并执行一次加法运算(Fib1(2)+Fib1(1))</span></span><br></pre></td></tr></tbody></table></figure>
<p>当n&gt;2时需要分别调用<code>fbn(n-1)</code>和<code>fbn(n-2)</code>，并执行一次加法运算，换言之：<br>$$n\gt2时，T(n)=T(n-1)+T(n-2)+1;$$</p>
<p>所以，$T(n) &gt;= F(n)$</p>
<blockquote>
<p>问题来了，怎么判断<code>T(n)</code>属于算法时间复杂度的哪种类型呢？</p>
</blockquote>
<h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a><strong>方法一：</strong></h4><p>画出递归树，每个节点表示计算一次</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63573fcb16f2c2beb10ed41f.jpg"></p>
<p>一棵<strong>满二叉树</strong>，<strong>节点总数就和树的高度呈指数关系</strong></p>
<p>递归树 <code> F(n)</code>里面存在满二叉树，所以<strong>时间复杂度是指数阶的</strong>。</p>
<h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a><strong>方法二：</strong></h4><p>使用公式进行递推</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/63573fe116f2c2beb10ee553.jpg"></p>
<p>因为时间复杂度算的是最坏情况下的时间复杂度，所以计算第一个括号内的即可</p>
<p>即：$T(n) = O(2^n)$，时间复杂度是<strong>指数阶</strong>的</p>
<h2 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h2><h3 id="降低时间复杂度"><a href="#降低时间复杂度" class="headerlink" title="降低时间复杂度"></a>降低时间复杂度</h3><p>不难发现：上面基于递归表达式的算法，存在大量的重复计算，增大了算法的时间复杂度，所以我们可以做出如下改进，以减少时间复杂度</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 利用数组记录过往的值，直接使用，避免重复计算</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fbn2</span> = (<span class="params">n</span>) =&gt; {</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(n + <span class="number">1</span>); <span class="comment">// 定义 n + 1 长度的数组</span></span><br><span class="line">  arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  arr[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) {</span><br><span class="line">    arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>]</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> arr[n]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>很显然上面算法的时间复杂度是$O(n)$，时间复杂度从指数阶降到了多项式阶。</p>
<p>由于上面算法使用数组记录了所有项的值，所以，算法的空间复杂度变成了$O(n)$，我们可以继续改进算法，来降低算法的空间复杂度</p>
<h3 id="降低空间复杂度"><a href="#降低空间复杂度" class="headerlink" title="降低空间复杂度"></a>降低空间复杂度</h3><p>采用临时变量，来迭代记录上一步计算出来的值，代码如下：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fbn3</span> = (<span class="params">n</span>) =&gt; {</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">let</span> pre1 = <span class="number">1</span> <span class="comment">// pre1，pre2记录前面两项</span></span><br><span class="line">  <span class="keyword">let</span> pre2 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> tmp = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) {</span><br><span class="line">    tmp = pre1 + pre2 <span class="comment">// 2</span></span><br><span class="line">    pre1 = pre2 <span class="comment">// 1</span></span><br><span class="line">    pre2 = tmp <span class="comment">// 2</span></span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> pre2</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>使用了三个辅助变量，时间复杂度还是$O(n)$，空间复杂度降为$O(1)$</p>
<h2 id="测试算法计算时间"><a href="#测试算法计算时间" class="headerlink" title="测试算法计算时间"></a>测试算法计算时间</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 斐波那契数列</span></span><br><span class="line"><span class="comment">// 1 ，1 ，2 ，3 ，5 ，8， 13 ，21 ，34 ......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fbn</span> = (<span class="params">n</span>) =&gt; {</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) {</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="title function_">fbn</span>(n-<span class="number">2</span>) + <span class="title function_">fbn</span>(n-<span class="number">1</span>)</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">'fbn'</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'fbn(40)='</span>, <span class="title function_">fbn</span>(<span class="number">40</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">'fbn'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用数组记录过往的值，直接使用，避免重复计算</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fbn2</span> = (<span class="params">n</span>) =&gt; {</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(n + <span class="number">1</span>); <span class="comment">// 定义 n + 1 长度的数组</span></span><br><span class="line">  arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  arr[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) {</span><br><span class="line">    arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>]</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> arr[n]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">'fbn2'</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'fbn2(40)='</span>, <span class="title function_">fbn2</span>(<span class="number">40</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">'fbn2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fbn3</span> = (<span class="params">n</span>) =&gt; {</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">let</span> pre1 = <span class="number">1</span> <span class="comment">// pre1，pre2记录前面两项</span></span><br><span class="line">  <span class="keyword">let</span> pre2 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> tmp = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) {</span><br><span class="line">    tmp = pre1 + pre2 <span class="comment">// 2</span></span><br><span class="line">    pre1 = pre2 <span class="comment">// 1</span></span><br><span class="line">    pre2 = tmp <span class="comment">// 2</span></span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> pre2</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">'fbn3'</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'fbn3(40)='</span>, <span class="title function_">fbn3</span>(<span class="number">40</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">'fbn3'</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>测试结果如下：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title function_">fbn</span>(<span class="number">40</span>)= <span class="number">102334155</span></span><br><span class="line"><span class="attr">fbn</span>: <span class="number">667.</span>76ms</span><br><span class="line"><span class="title function_">fbn2</span>(<span class="number">40</span>)= <span class="number">102334155</span></span><br><span class="line"><span class="attr">fbn2</span>: <span class="number">0.</span>105ms</span><br><span class="line"><span class="title function_">fbn3</span>(<span class="number">40</span>)= <span class="number">102334155</span></span><br><span class="line"><span class="attr">fbn3</span>: <span class="number">0.</span>072ms</span><br></pre></td></tr></tbody></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>能不能继续降阶，使算法的时间复杂度更低呢？<br>实质上，斐波那契数列的时间复杂度还可以降到对数阶$O(logn)$，好厉害!!!后面继续探索吧</p>
<p>算法作为一门学问，有两条几乎平行的线索：</p>
<ol>
<li><p>数据结构（数据对象）：数、矩阵、集合、串、排列、图、表达式、分布等。</p>
</li>
<li><p>算法策略：贪心策略、分治策略、动态规划策略、线性规划策略、搜索策略等。</p>
</li>
</ol>
<p>这两条线索是相互独立的：</p>
<ul>
<li><p>对于同一个数据对象上不同的问题（如单源最短路径和多源最短路径)，就会用到不同的算法策略（如贪心策略和动态规划策略）；</p>
</li>
<li><p>对于完全不同的数据对象上的问题(如排序和整数乘法)，也许就会用到相同的算法策略（如分治策略）。</p>
</li>
</ul>
<hr>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p>
<p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。数风流人物还看中国、看今朝、看你我。</p>
</body></html>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>编写脚本配合git hooks实现commitMsg提交</title>
    <url>/posts/3797932790.html</url>
    <content><![CDATA[<html><head></head><body><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>系统上线流程里，每次发版都要拆单，生成系统变更号，配合 commitlint 实现提交信息必须关联当前版本的系统变更号，当发版结束的时候，这个系统变更号就失效了，再次使用就会报错。</p>
<h1 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h1><p>校验系统变更号是单向的，本地并不能动态获取系统变更号，每次提交都很麻烦，必须去看一下那长达9位的系统变更号</p>
<h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>既然不能动态获取系统变更号，就在本地定义一个系统变更号的常量，编写脚本嵌入git hooks ，读取本地的系统变更号常量，利用脚本组合提交信息。这样至少在一次发版流程里不用关心系统变更号是什么的问题了，能做的也就这么多了。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="1、编写-x2F-git-x2F-compose-commit-msg-sh-文件"><a href="#1、编写-x2F-git-x2F-compose-commit-msg-sh-文件" class="headerlink" title="1、编写 ./git/compose-commit-msg.sh 文件"></a>1、编写 ./git/compose-commit-msg.sh 文件</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">"system-change-code"</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取当前分支</span></span><br><span class="line">line=$(head -n +1 .git/HEAD)</span><br><span class="line">branch=${line##*/}</span><br><span class="line">echo "branch: $branch"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取变更号</span></span><br><span class="line">user=`cat .git/system-change-code.txt | grep systemChangeCode`</span><br><span class="line">user=${code##*=}</span><br><span class="line">echo "code: $code"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取当前提交者的信息</span></span><br><span class="line">user=`git config user.name`</span><br><span class="line">echo "user: $user"</span><br><span class="line"></span><br><span class="line">if [ -z "$code" ] ; then</span><br><span class="line">echo "NEED SYSTEM-CHANGE-CODE";</span><br><span class="line">exit 1;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$1</span> 参数 就是 .git/COMMIT_EDITMSG 文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> <span class="variable">$1</span> 读取 git commit -m 输入的提交信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">组合提交信息</span></span><br><span class="line">commit=[$code]$(cat $1)_${branch}_${user}</span><br><span class="line">echo "所有参数: $*"</span><br><span class="line"></span><br><span class="line">echo "commit-msg: $commit"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将组合的信息重新输出到 .git/COMMIT_EDITMSG 文件</span></span><br><span class="line">echo "$commit" &gt; "$1"</span><br></pre></td></tr></tbody></table></figure>
<h3 id="2、编写-git-x2F-system-change-code-txt-文件"><a href="#2、编写-git-x2F-system-change-code-txt-文件" class="headerlink" title="2、编写 .git/system-change-code.txt 文件"></a>2、编写 .git/system-change-code.txt 文件</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义系统变更号常量(自己维护)</span></span><br><span class="line">systemChangeCode=abc123456</span><br></pre></td></tr></tbody></table></figure>
<h3 id="3、在-commit-msg-hooks里面载入compose-commit-msg-sh脚本"><a href="#3、在-commit-msg-hooks里面载入compose-commit-msg-sh脚本" class="headerlink" title="3、在 commit-msg hooks里面载入compose-commit-msg.sh脚本"></a>3、在 commit-msg hooks里面载入compose-commit-msg.sh脚本</h3><p>修改 .git/hooks/commit-msg 文件<br>git hooks <a href="https://www.yuque.com/allblue-byynd/izub4k/obh3ns">more</a></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">husky</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入下面代码</span></span><br><span class="line">. "$(dirname "$1")"/compose-commit-msg.sh</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="4、提交测试"><a href="#4、提交测试" class="headerlink" title="4、提交测试"></a>4、提交测试</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git commit -m <span class="string">'test: 测试提交'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回车之后，触发钩子，执行脚本，组合提交信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示的信息：</span></span><br><span class="line">[dev 4224456] [abc123456]<span class="built_in">test</span>: 测试提交_dev_xiao</span><br></pre></td></tr></tbody></table></figure>
<p>测试完成🎈🎈</p>
<h1 id="友情链接："><a href="#友情链接：" class="headerlink" title="友情链接："></a>友情链接：</h1><p><a href="https://www.yuque.com/xiaojt/py87m6/hgxumq">相关shell脚本</a><br>git commit <a href="https://www.yuque.com/xiaojt/izub4k/gap2yf#YRbth">提交类型</a></p>
</body></html>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>git hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>认识Chrome扩展插件</title>
    <url>/posts/9575625.html</url>
    <content><![CDATA[<html><head></head><body><hr>
<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>现如今的时代，绝大多数人都要跟浏览器打交道的，说到浏览器那肯定是<code>Chrome</code>浏览器一家独大，具体数据请看👇</p>
<p>知名流量监测机构 <a href="https://statcounter.com/">Statcounter</a> 公布了 7 月份全球桌面浏览器市场份额，主要数据如下：</p>
<table>
<thead>
<tr>
<th>浏览器</th>
<th>市场份额</th>
<th>月涨跌份额</th>
</tr>
</thead>
<tbody><tr>
<td>Chrome</td>
<td>66.19%</td>
<td>-0.74%</td>
</tr>
<tr>
<td>Edge</td>
<td>10.84%</td>
<td>+0.2%</td>
</tr>
<tr>
<td>Safari</td>
<td>8.94%</td>
<td>+0.01%</td>
</tr>
<tr>
<td>Firefox</td>
<td>8.08%</td>
<td>+0.28%</td>
</tr>
<tr>
<td>Opera</td>
<td>3.06%</td>
<td>+0.08%</td>
</tr>
<tr>
<td>IE</td>
<td>0.75%</td>
<td></td>
</tr>
</tbody></table>
<p><strong>浏览器扩展插件的用途</strong></p>
<ul>
<li><p>生产力工具（和浏览器进行交互：标签、书签、下载、代理、cookie等）</p>
</li>
<li><p>网页内容丰富（改变浏览器外观、桌面通知、右键菜单、定制新标签页）</p>
</li>
<li><p>信息聚合（更像是一个<em>快应用</em>，类似小程序）</p>
</li>
<li><p>乐趣和游戏（小恐龙（<code>chrome://dino/</code>）游戏，想必都玩过）</p>
</li>
</ul>
<p>总之扩展程序让浏览器的功能更加强大，更加贴合用户使用。不管是不是软件开发人员，或多或少都会使用到浏览器扩展插件，常见的比如：书签、网页翻译、广告屏蔽……</p>
<p>学习Chrome扩展插件势在必行🏃‍♂️🐱‍🏍</p>
<ul>
<li><p>Chrome extensions <a href="https://developer.chrome.com/docs/extensions/">文档</a></p>
</li>
<li><p>插件的架构可以参考<a href="https://developer.chrome.com/docs/extensions/mv3/architecture-overview/">这里</a></p>
</li>
<li><p>Chrome扩展程序应用商店<a href="https://chrome.google.com/webstore/category/extensions">入口</a></p>
</li>
<li><p>管理使用chrome扩展。访问 url: <code>chrome://extensions</code>，打开开发者模式</p>
</li>
</ul>
<p>扩展程序是基于 Web 技术（如 HTML、CSS 和 JavaScript）构建的软件程序，使用户能够自定义 Chrome 浏览体验。（前端开发人员技能范围之内😁😁）</p>
<p>本文从应用着手，通过讲解扩展插件的特性来启发读者对其进一步探索。</p>
<h2 id="2、Chrome-extensions-和-Chrome-Plugin的区别"><a href="#2、Chrome-extensions-和-Chrome-Plugin的区别" class="headerlink" title="2、Chrome extensions 和 Chrome Plugin的区别"></a>2、Chrome extensions 和 Chrome Plugin的区别</h2><ul>
<li><p>Chrome Extension（Chrome扩展插件）仅仅是用来增强浏览器网页的功能，它是利用浏览器提供的已有功能和和各种API，进行功能组合，从而改善浏览器体验，停留在<strong>浏览器层面</strong>；</p>
</li>
<li><p>Chrome Plugin（Chrome插件）不仅能增强网页的功能，同时能够扩展浏览器本身的功能；当浏览器提供的功能已经无法满足你的需求，就需要你通过C/C++这样的编译语言来扩展浏览器的功能，例如我们常用的Flash 插件，Chrome Plugin工作在<strong>内核层面</strong>。</p>
</li>
</ul>
<h2 id="3、扩展如何工作"><a href="#3、扩展如何工作" class="headerlink" title="3、扩展如何工作"></a>3、扩展如何工作</h2><ul>
<li><p>扩展是基于 HTML、JavaScript 和 CSS 等 Web 技术构建的。它们在单独的沙盒执行环境中运行，并与 Chrome 浏览器交互。</p>
</li>
<li><p>扩展允许您通过使用 API 修改浏览器行为和访问 Web 内容来“扩展”浏览器。扩展通过最终用户 UI 和开发人员 API 进行操作：</p>
</li>
<li><p>扩展用户界面 这为用户提供了一种一致的方式来管理他们的扩展。</p>
</li>
<li><p><a href="https://developer.chrome.com/docs/extensions/reference/">扩展 API</a>允许扩展代码访问浏览器本身的功能：激活选项卡、修改网络请求等。</p>
</li>
</ul>
<p>要创建扩展，您需要组合一些资源清单: <code>manifest.json</code>、 <code>JavaScript</code>、 <code>HTML</code> 和 <code>CSS</code> 文件、图片等。</p>
<h2 id="4、Chrome扩展文件"><a href="#4、Chrome扩展文件" class="headerlink" title="4、Chrome扩展文件"></a>4、Chrome扩展文件</h2><p>Chrome扩展文件以.crx为后缀名，.crx实际上是一个压缩文件，使用解压文件打开这个文件就可以看到其中的文件目录</p>
<p>下图是 <code>Axure</code> 扩展插件原文件：</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184de816f2c2beb1df6802.png"></p>
<p>因此可以认为，我们实际上就是写一个Web应用，然后将按照Chrome的规定将一个<strong>快捷方式</strong>放在Chrome工具栏上。如下图：</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184d8716f2c2beb1ded274.png"></p>
<p>上图中左边地址栏内部的按钮是page action（Chrome插件，直接内置在Chrome里的），右边地址栏外部的是 browser action（Chrome 扩展插件）</p>
<h2 id="5、扩展插件使用"><a href="#5、扩展插件使用" class="headerlink" title="5、扩展插件使用"></a>5、扩展插件使用</h2><p>对于开发和测试，您可以使用扩展开发者模式将这些“解压”加载到 Chrome 中，或者直接拖动<code>crx</code>文件到管理扩展插件页面。如果扩展感到满意，也可以打包并分享给小伙伴使用。</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184d9f16f2c2beb1deffad.png"></p>
<h2 id="6、popup弹出窗口"><a href="#6、popup弹出窗口" class="headerlink" title="6、popup弹出窗口"></a>6、popup弹出窗口</h2><ul>
<li><p><code>popup.html</code>可以在里面放置任何<code>html</code>元素，它的宽度是自适应的。当然，这个弹出窗口不会被Chrome拦截</p>
</li>
<li><p>popup 无法通过程序打开，只能由用户点击打开。点击 popup 之外的区域会导致 popup 收起。</p>
</li>
</ul>
<p>下图是 <code>FeHelper</code> 扩展插件的弹出窗👇</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184db116f2c2beb1df1b24.png"></p>
<h2 id="7、Background-Pages后台页面"><a href="#7、Background-Pages后台页面" class="headerlink" title="7、Background Pages后台页面"></a>7、Background Pages后台页面</h2><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184dc016f2c2beb1df2eec.png"></p>
<h2 id="8、Chrome扩展插件运行的核心机制"><a href="#8、Chrome扩展插件运行的核心机制" class="headerlink" title="8、Chrome扩展插件运行的核心机制"></a>8、Chrome扩展插件运行的核心机制</h2><p>Chrome扩展插件中比较核心的几个概念：<code>Extension Page</code>、<code>background.js</code>、<code>content_script.js</code></p>
<p>下图展示他们之间的关系，以及如何通信</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63184dd516f2c2beb1df4d37.png"><br>（图片来源网络，侵删）</p>
<p>运行时的三个进程：</p>
<ul>
<li><p>扩展进程（Extension Process）</p>
</li>
<li><p>页面渲染进程（Page Render Process）</p>
</li>
<li><p>浏览器进程（Browser Process）</p>
</li>
</ul>
<ol>
<li><strong>扩展进程</strong>中运行<code>Extension Page</code>，主要包括<code>backgrount.html</code>和<code>popup.html</code>,</li>
</ol>
<ul>
<li><p><code> backgrount.html</code>中没有任何内容，是通过<code>background.js</code>创建生成，当浏览器打开时，会自动加载插件的background.js文件，它独立于网页并且一直运行在后台，它主要通过调用浏览器提供的API和浏览器进行交互</p>
</li>
<li><p><code>popup.html</code>有内容的，跟我们普通的web页面一样，由<code>html</code>、<code>css</code>、<code>Javascript</code>组成，它是按需加载的，需要用户去点击地址栏的按钮去触发，才能弹出页面。</p>
</li>
</ul>
<ol start="2">
<li><p><strong>渲染进程</strong>主要运行<code>Web Page</code>,当打开页面时，会将<code>content_script.js</code>加载并注入到该网页的环境中，它和网页中引入的<code>Javascript</code>一样，可以操作该网页的<code>DOM Tree</code>，<em>改变页面的展示效果</em></p>
</li>
<li><p><strong>浏览器进程</strong>在这里更多起到桥梁作用，作为中转可以实现<code>Extension Page</code>和<code>content_script.js</code>之间的消息通信。</p>
</li>
</ol>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本文介绍的是 chrome 扩展基础知识，相信看完以上之后，你会对 Chrome 扩展插件有了一个比较清晰的认识。相信chrome扩展会大有作为，会不会迫不急待的要体验一下呢🤔，我根据Chrome插件开发官网示例写的一个小扩展插件，点击<a href="https://github.com/all-smile/myFirstExtension">这里</a>查看项目。</p>
<hr>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
</body></html>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Chrome插件</tag>
      </tags>
  </entry>
  <entry>
    <title>认识HTTP缓存</title>
    <url>/posts/2358217424.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>通常针对静态资源。内存缓存/磁盘缓存</p>
</blockquote>
<h2 id="1、原理："><a href="#1、原理：" class="headerlink" title="1、原理："></a>1、原理：</h2><p>在首次请求后，保存一份请求资源的响应副本，当用户再次发起相同请求后，如果判断缓存命中，则拦截请求，将之前存储的相应副本返回给用户，从而避免重新向服务器发起资源请求。</p>
<h2 id="2、缓存的技术种类："><a href="#2、缓存的技术种类：" class="headerlink" title="2、缓存的技术种类："></a>2、缓存的技术种类：</h2><p>代理缓存，浏览器缓存，网关缓存，负载均衡器，内容分发网络</p>
<p>它们大致可以分为两类： 共享缓存，私有缓存</p>
<ul>
<li><p><em>共享缓存</em>：缓存的内容可以被多个用户使用。如公司内部架设的内部Web代理</p>
</li>
<li><p><em>私有缓存</em>：只能单独被用户使用的缓存。如浏览器缓存</p>
</li>
</ul>
<h2 id="3、禁止缓存"><a href="#3、禁止缓存" class="headerlink" title="3、禁止缓存"></a>3、禁止缓存</h2><p>发送如下响应头可以关闭缓存。此外，可以参考<code>Expires</code>和<code>Pragma</code>消息头。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Cache</span>-<span class="title class_">Control</span>: no-store</span><br></pre></td></tr></tbody></table></figure>

<h2 id="4、http缓存可分为强制缓存和协商缓存"><a href="#4、http缓存可分为强制缓存和协商缓存" class="headerlink" title="4、http缓存可分为强制缓存和协商缓存"></a>4、http缓存可分为强制缓存和协商缓存</h2><ul>
<li><p>强制缓存不用判断缓存是否过期，可以直接使用。</p>
</li>
<li><p>协商缓存每次都要询问一下服务器，看一下内容有没有更新，如果没有更新就使用缓存中的资源，如果更新了就继续请求</p>
</li>
</ul>
<p>响应头设置：</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8eccface9efa421b8430e62444edf4b7~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h3 id="4-1、cache-control（http1-1）"><a href="#4-1、cache-control（http1-1）" class="headerlink" title="4.1、cache-control（http1.1）"></a>4.1、cache-control（http1.1）</h3><p><code>cache-control</code>属性值：</p>
<ul>
<li><p>no-cache  强制进行协商缓存</p>
</li>
<li><p>no-store 不缓存</p>
</li>
<li><p>max-age   表示缓存的过期时长</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">'cache-control'</span>: <span class="string">'max-age=5'</span> <span class="regexp">//</span> 滑动时间，单位是秒</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>private, public： 用以明确响应资源是否可以被代理服务器缓存。</p>
</li>
<li><p>private  只能被浏览器缓存</p>
</li>
<li><p>public  响应资源既可以被浏览器私有缓存，又可以被代理服务器公共缓存</p>
</li>
</ul>
<figure class="highlight lasso"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">cache</span><span class="params">-control</span>: <span class="keyword">public</span>, <span class="keyword">max</span><span class="params">-age</span>=<span class="number">10</span>;</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/base/loading03.svg" data-original="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e506a323ebc49449aa316ff302b2116~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab505a1c9bde44c2a1d3d9ae05bc2266~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/483abb75d50347a081dd4cb7562d6817~tplv-k3u1fbpfcp-zoom-1.image"></p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">last-modified:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">if-modified-since:</span></span><br><span class="line"><span class="attr">cache-control:</span> <span class="literal">no</span><span class="string">-cache</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>原理</strong>:是根据资源最后的<em>修改时间</em>来判断是否需要读取缓存</p>
<blockquote>
<p>根据时间判断有局限性，比方说只改变文件命名，也会引起资源修改时间发生变化，但是对资源本身并没有改动</p>
</blockquote>
<h3 id="4-2、✨补充的方案是ETag（根据文件资源生成指纹）"><a href="#4-2、✨补充的方案是ETag（根据文件资源生成指纹）" class="headerlink" title="4.2、✨补充的方案是ETag（根据文件资源生成指纹）"></a>4.2、✨补充的方案是<strong>ETag</strong>（根据文件资源生成指纹）</h3><ul>
<li><p>安装</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm i etag</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>使用</p>
</li>
</ul>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> etag = <span class="built_in">require</span>(<span class="string">'etag'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = fs.<span class="title function_">readFilSeync</span>(<span class="string">'./img/04.jpg'</span>)</span><br><span class="line"><span class="keyword">const</span> etagContent = <span class="title function_">etag</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ifNoneMatch = req.<span class="property">headers</span>[<span class="string">'if-none-match'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ifNoneMatch === etagContent) {</span><br><span class="line">  res.<span class="property">statusCode</span> = <span class="number">304</span></span><br><span class="line">  res.<span class="title function_">end</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="comment">// 直接返回，不操作服务器资源，减少带宽</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">'etag'</span>, etagContent)</span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">'Cache-Control'</span>,<span class="string">'no-cache'</span>)</span><br><span class="line">res.<span class="title function_">end</span>(data)</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p>If-None-Match</p>
</li>
<li><p><strong>强验证Etag</strong>，资源细微的改动都会引起指纹的变化</p>
</li>
<li><p><strong>弱验证ETag</strong>， 相对灵活的过滤资源的某些变化</p>
</li>
</ul>
<h2 id="5、强缓存"><a href="#5、强缓存" class="headerlink" title="5、强缓存"></a>5、强缓存</h2><h3 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h3><p>不会向服务器发送请求，直接从缓存中读取资源，在chrome控制台的Network选项中可以看到该请求返回200的状态码，并且Size显示<code>from disk cache</code>或<code>from memory cache</code>。</p>
<h3 id="设置："><a href="#设置：" class="headerlink" title="设置："></a>设置：</h3><p>强缓存可以通过设置两种 <code>HTTP Header</code> 实现，分别是：<code>Expires</code> 和 <code>Cache-Control</code>。</p>
<blockquote>
<p>Expires 是http1.0的产物，Cache-Control是http1.1的产物，两者同时存在的话，Cache-Control优先级高于Expires；</p>
</blockquote>
<h2 id="6、协商缓存"><a href="#6、协商缓存" class="headerlink" title="6、协商缓存"></a>6、协商缓存</h2><h3 id="介绍：-1"><a href="#介绍：-1" class="headerlink" title="介绍："></a>介绍：</h3><p>协商缓存就是强制缓存失效后，浏览器<em>携带缓存标识</em>向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况：</p>
<ul>
<li><p>协商缓存生效，返回<code>304</code>和<code>Not Modified</code></p>
</li>
<li><p>协商缓存失效，返回<code>200</code>和<code>请求结果</code></p>
</li>
</ul>
<h3 id="设置：-1"><a href="#设置：-1" class="headerlink" title="设置："></a>设置：</h3><p>协商缓存可以通过设置两种 HTTP Header 实现, 分别是：<code>Last-Modified</code> 和 <code>ETag</code> 。</p>
<h2 id="7、缓存机制🎉"><a href="#7、缓存机制🎉" class="headerlink" title="7、缓存机制🎉"></a>7、缓存机制🎉</h2><ol>
<li><p>强制缓存优先于协商缓存进行，若强制缓存(Expires和Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(<code>Last-Modified / If-Modified-Since和Etag / If-None-Match</code>)</p>
</li>
<li><p>协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，返回200，重新返回资源和缓存标识，再存入浏览器缓存中；生效则返回304，继续使用缓存。</p>
</li>
</ol>
<h2 id="8、缓存策略树🎉"><a href="#8、缓存策略树🎉" class="headerlink" title="8、缓存策略树🎉"></a>8、缓存策略树🎉</h2><p><img data-src="/images/base/loading03.svg" data-original="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b20c21694e940d5acf2b343148bfbbf~tplv-k3u1fbpfcp-zoom-1.image" alt="缓存策略树，很早很早之前画的🤣，现在看看也是醉了😂"></p>
<p align="center">缓存策略树，很早很早之前画的🤣，现在看看也是醉了😂</p>

<p><img data-src="/images/base/loading03.svg" data-original="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc8e06075df24102b9989fc1ff0eb797~tplv-k3u1fbpfcp-zoom-1.image" alt="该图来源网络，侵删"></p>
<p align="center">该图来源网络，侵删</p>

<p>更多看<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching">这里</a></p>
<hr>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
</body></html>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>记一个 &#39;奇葩&#39; 需求的实现</title>
    <url>/posts/2156089668.html</url>
    <content><![CDATA[<html><head></head><body><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们这边没有专门的产品经理，<code>UI</code>对产品的设计基本具有决定权，说实话，是有那么一点可怖的（前后改了很多次，差一点就改回原版了，我自己都觉得不好意思了🤣）。个人感觉我们<code>UI</code>还是体验的少，缺乏对产品以及用户行为的认识。设计出来的东西看似很华丽，其实缺失很多场景下的分析，不切合实际，大多数人说的“用户体验”或许只是主观的、想当然的（我也一样😮）。</p>
<p>自从接触互联网开始我就在有意的学习怎么做产品，期间还考虑过转产品，永远不要拿业余的跟专业的比，没什么可比性，不成熟。继续保持思考、学习。</p>
<blockquote>
<p>所用技术：<code>vue</code>、<code>vue-router</code>、<code>element-ui</code></p>
</blockquote>
<h2 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h2><blockquote>
<p>导航菜单（<code>el-menu</code>组件）竖向展示的</p>
</blockquote>
<ol>
<li><p>鼠标移入一级菜单展示下面的子菜单，移出则收起来（手风琴模式，正常状态下只保持一个菜单处于展开状态，手动鼠标悬浮展开的不算）</p>
</li>
<li><p>选中某个子菜单时高亮对应的一级菜单，并且当鼠标移出高亮的这个菜单模块时不折叠，但是可以点击一级菜单进行折叠（注意：跟第一条有区别）</p>
</li>
</ol>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li><p><code>element-ui</code>的导航组件子菜单打开的触发方式可以通过 <code>menu-trigger</code> 参数控制，但是，只在菜单是水平展示（<code>horizontal</code>）的情况下生效。嘶~！我不禁暗想：垂直模式滑动展开真的会有系统这么做吗？（只能自己修改了）</p>
</li>
<li><p><code>unique-opened</code> 参数可以控制是否只保持一个子菜单展开，但是在没有子菜单的情况下失效（需要手动修改）</p>
</li>
</ol>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>导航菜单使用递归<code>el-submenu</code>组件实现</p>
<ol>
<li>鼠标滑动展开关闭需求：</li>
</ol>
<ul>
<li><code>el-submenu</code> 组件编写鼠标移入移出事件（<code>mouseenter</code>、<code>mouseleave</code>），拿到<code>indexPath</code>，调用<code>open</code>和<code>close</code>方法打开或者折叠菜单（注意：没有子菜单的一级菜单鼠标移入移出不做处理）</li>
</ul>
<ol start="2">
<li>只保持一个菜单出于展开状态</li>
</ol>
<ul>
<li>先配置 <code>unique-opened</code> 参数为 <code>false</code> ，以保证 <code>openedMenus</code> 只有一个（ <code>openedMenus</code> 是<code>el-menu</code>内部维护的属性, 可以自行打印看一下）</li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6311ebfb16f2c2beb1163942.jpg"></p>
<blockquote>
<p>一开始我想在子菜单展开折叠的回调事件（<code>open</code>、<code>close</code>）里写逻辑判断，但是不知道什么原因回调事件不触发（注意：<code>open方法</code>和<code>open事件</code>不一样，组件三大要素：<strong>属性、事件、方法</strong>），所以我就考虑在<code>select</code>回调事件里写逻辑了</p>
</blockquote>
<ul>
<li>在菜单激活的<code>select</code>回调事件中，让上一个打开的菜单调用<code>close</code>方法关闭。（这里需要记录上次打开菜单的<code>index</code>，这里我使用<code>sessionStorage</code>记录）</li>
</ul>
<h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><p>只展示代码片段，仅供参考</p>
<p><code>sessionStorage</code>使用自己封装的，之前文章有写过，感兴趣的可以看一下</p>
<ul>
<li><code>el-submenu</code> 组件</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title function_">menuEnter</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="comment">// isNest 是否还有子菜单 true:没有子菜单 false:有子菜单</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">isNest</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">item</span>.<span class="property">alwaysShow</span>) {</span><br><span class="line">    <span class="comment">// basePath: 一级菜单</span></span><br><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">'handleOpen'</span>, <span class="variable language_">this</span>.<span class="property">basePath</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">menuLeave</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="comment">// 存在子菜单，并且不是打开状态的菜单，鼠标离开的时候需要合起来</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">isNest</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">curMenuIsOpened</span>) {</span><br><span class="line">    <span class="comment">// basePath: 一级菜单</span></span><br><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">'handleClose'</span>, <span class="variable language_">this</span>.<span class="property">basePath</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><code>el-menu</code> 组件</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 登录系统的时候，记录展开的菜单信息，</span></span><br><span class="line"><span class="comment">// 在 mounted 里面获取 openedMenus ，并记录信息</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="comment">// 获取当前展开的菜单 - array</span></span><br><span class="line">  <span class="comment">// 手风琴模式，只有一个展开菜单</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// openedMenus 是内部属性</span></span><br><span class="line">  <span class="keyword">const</span> {openedMenus = []} = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">menuRef</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (openedMenus &amp;&amp; openedMenus.<span class="property">length</span> &gt; <span class="number">0</span>) {</span><br><span class="line">    <span class="comment">// 获取展开菜单的 index</span></span><br><span class="line">    <span class="keyword">const</span> index = openedMenus[<span class="number">0</span>];</span><br><span class="line">    sessionStorage.<span class="title function_">put</span>(<span class="string">'preActiveMenu'</span>, index)</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: {</span><br><span class="line">  <span class="title function_">handleOpen</span>(<span class="params">indexPath</span>) {</span><br><span class="line">    <span class="comment">// 调用 open 方法, 打开close,</span></span><br><span class="line">  	<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">menuRef</span>.<span class="title function_">open</span>(indexPath);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleClose</span>(<span class="params">indexPath</span>) {</span><br><span class="line">    <span class="comment">// 调用 close 方法, 关闭close</span></span><br><span class="line">  	<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">menuRef</span>.<span class="title function_">close</span>(indexPath);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handlerSelect</span>(<span class="params">index, indexPath</span>) {</span><br><span class="line">    <span class="comment">// 1. 获取上次激活的菜单信息</span></span><br><span class="line">    <span class="keyword">const</span> _preActiveMenu = sessionStorage.<span class="title function_">get</span>(<span class="string">'preActiveMenu'</span>) || <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (_preActiveMenu) {</span><br><span class="line">      <span class="comment">// 如果存在，则关闭该菜单，再打开新的</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">menuRef</span>.<span class="title function_">close</span>(_preActiveMenu);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 记录这次激活的菜单信息</span></span><br><span class="line">    <span class="keyword">if</span> (indexPath.<span class="property">length</span> &gt; <span class="number">0</span>) {</span><br><span class="line">      sessionStorage.<span class="title function_">put</span>(<span class="string">'preActiveMenu'</span>, indexPath[<span class="number">0</span>])</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="最终效果展示"><a href="#最终效果展示" class="headerlink" title="最终效果展示"></a>最终效果展示</h2><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6311ec1816f2c2beb1164933.jpg"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用了<code>UI</code>框架之后就不可避免的会跟产品设计风格向左，这就需要在框架基础之上进行修改。框架也是一个个组件组成的，抓住组件设计的三要素：属性、事件、方法，了解框架组件的工作原理，就可以轻松的进行修改啦🎉🎉</p>
<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://home.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我</strong>。</p>
</body></html>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>element-ui</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式浅析</title>
    <url>/posts/3163405351.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p><strong>“单策代迭发命组，模享职中装适外”</strong></p>
</blockquote>
<h2 id="1-订阅-发布模式"><a href="#1-订阅-发布模式" class="headerlink" title="1.订阅-发布模式"></a>1.订阅-发布模式</h2><p>eventBus<br>vue的数据响应式原理就是基于发布订阅模式实现的</p>
<h2 id="2-策略模式"><a href="#2-策略模式" class="headerlink" title="2.策略模式"></a>2.策略模式</h2><p>简单来时就是把一写具有相关性的工具方法，组合起来，以方便调用和后期增删修等维护</p>
<ul>
<li>eg:<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> operationType = {</span><br><span class="line"><span class="string">'add'</span>: <span class="keyword">function</span>(<span class="params"></span>){},</span><br><span class="line"><span class="string">'reduce'</span>: <span class="keyword">function</span>(<span class="params"></span>){},</span><br><span class="line">...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="3-单例模式"><a href="#3-单例模式" class="headerlink" title="3.单例模式"></a>3.单例模式</h2><p>譬如做一个全局的弹窗原型，当需要的时候就调用生成弹窗，但是没有必要实例化多个弹窗对象，只要实例化一次然后修改里面的属性参数就可以了</p>
<h2 id="4-装饰器模式Decorator"><a href="#4-装饰器模式Decorator" class="headerlink" title="4.装饰器模式Decorator"></a>4.装饰器模式Decorator</h2><p>原有的函数或组件不变，只是扩展、引用了一些方法<br>如：redux 中的@connect，增加了props,state… 使用就是@XX，（ng中的注解）</p>
<ul>
<li><p>eg: 就像是一个房子，进行装修（软装）</p>
</li>
<li><p>v-input, v-checkbox, 自定义指令</p>
</li>
<li><p>高阶组件，（相对于低阶组件来说，就是基础组件的二次封装，譬如业务组件：下拉搜索选择）</p>
</li>
</ul>
<h2 id="5-代理模式"><a href="#5-代理模式" class="headerlink" title="5.代理模式"></a>5.代理模式</h2><p>为一个对象提供一个代用品或占位符，以便控制对它的访问<br>图片懒加载：先使用一个loading图，等图片加载好了，在放到img的src属性上</p>
<ul>
<li><p>函数防抖节流也是代理的一种</p>
</li>
<li><p>事件冒泡事件捕获</p>
</li>
</ul>
<h2 id="6-中介者模式"><a href="#6-中介者模式" class="headerlink" title="6.中介者模式"></a>6.中介者模式</h2><p><code>redux</code>和<code>vuex</code>都是中介者模式的实际应用，把共享数据抽离成一个单独的store，每个需要用到的组件都store这个中介来操作对象。</p>
<p>目的是减少耦合</p>
<h2 id="7-工厂模式"><a href="#7-工厂模式" class="headerlink" title="7.工厂模式"></a>7.工厂模式</h2><p>提供创建对象的接口，把对象的创建工作转交给一个外部对象。通俗的讲就是有一个模子，批量去生产。</p>
<p>目的是为了消除对象之间的耦合</p>
<ul>
<li>eg: 常见的弹窗，message, 对外提供调用方法，然后调用方法新建弹窗或实例化。</li>
</ul>
<h2 id="8-享元模式"><a href="#8-享元模式" class="headerlink" title="8.享元模式"></a>8.享元模式</h2><p>比方说一个工厂生产了50个男内衣和50个女内衣，想要找模特拍广告宣传，一般的只需要找一男一女就可以了，而而不是找50个男模特和50个女模特。用代码实现就是采用享元模式，衣服原型-实例化50个男内衣50个女内衣，人原型-实例化男人和女人，衣服和人的原型有相关关系，彼此通过对外提供接口以达到人和衣服结合，然后拍照。</p>
<p>再比如弹窗，创建一个弹窗原型对外提供接口，需要用到的时候直接调用传入不同的参数就可以了，没有必要实例化多次。<br>其实就是抽象化提取组件</p>
<h2 id="9-责任链模式（职责链模式）"><a href="#9-责任链模式（职责链模式）" class="headerlink" title="9.责任链模式（职责链模式）"></a>9.责任链模式（职责链模式）</h2><p>使得多个对象都有机会处理请求，从而避免了请求的发送者和接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止，这就叫做职责链模式</p>
<ul>
<li><p>eg: node处理请求</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span>(ctx, next) =&gt; {</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>电商预定商品，预定额500，实付减100；预定额200，实付减50。预定500的处理函数，预定200的处理函数，</p>
</li>
</ul>
<p>传入参数调用，处理函数依次进行捕捉拦截，如果不满足某一个处理函数的条件则放行到下一个处理函数，这样形成一个职责链。</p>
<p>后续若增加300的预定金额，直接编写预定额为300的处理函数，然后注册进责任链即可。</p>
<h2 id="10-适配器模式"><a href="#10-适配器模式" class="headerlink" title="10.适配器模式"></a>10.适配器模式</h2><p>常见的，后端接口返回的数据在前端不能直接使用，需要做转化，这个时候就使用到适配器模式</p>
<p>只关心输入输出数据，正向和反向，有点类似于webpack的loader(只关心输入输出)</p>
<p>小程序适配多平台</p>
<p>react-native 的 虚拟DOM转化——“桥接”</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul>
<li><p>创建设计模式：工厂，单例，建造者原型</p>
</li>
<li><p>结构化设计模式：外观，适配器，代理，装饰器，享元桥接，组合</p>
</li>
<li><p>行为型：策略，模板方法，观察者，迭代器，责任链，命令，备忘录，状态，访问者，终结者，解释器</p>
</li>
</ul>
<hr>
<p>🎈🎈🎈</p>
<p>🌹 持续更文，关注我，你会发现一个踏实努力的宝藏前端😊，让我们一起学习，共同成长吧。</p>
<p>🎉 喜欢的小伙伴记得点赞关注收藏哟，回看不迷路 😉</p>
<p>🎁 欢迎大家评论交流, 蟹蟹😊</p>
</body></html>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>远程主机标识已更改！</title>
    <url>/posts/476756465.html</url>
    <content><![CDATA[<html><head></head><body><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>好久没有更新的 blog ，今天更新了一篇文章，发现推送到 github 上的时候，显示了一个告警信息，导致推送失败，具体原因如下：</p>
<p>我是使用的ssh，跟远程仓库链接</p>
<figure class="highlight gauss"><table><tbody><tr><td class="code"><pre><span class="line">PS D:\mine-project\blog&gt; git <span class="keyword">push</span></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@</span></span><br><span class="line"><span class="comment">@</span>    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     <span class="comment">@</span></span><br><span class="line"><span class="comment">@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right <span class="built_in">now</span> (man-in-the-middle attack)!</span><br><span class="line">It is also possible that a host <span class="built_in">key</span> has just been changed.</span><br><span class="line">The fingerprint <span class="keyword">for</span> the RSA key sent by the remote host is</span><br><span class="line">SHA256:uNiVztksCsDhcc0u9e8BujQXVUpKZIDTMczCvj3tD2s.</span><br><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key in /c/Users/xiao/.ssh/known_hosts to get rid of this message.</span><br><span class="line">Offending RSA key in /c/Users/xiao/.ssh/known_hosts:5</span><br><span class="line">RSA host key <span class="keyword">for</span> github.com has changed and you have requested strict checking.</span><br><span class="line">Host key verification failed.</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">PS D:\mine-project\blog&gt;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ul>
<li>WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</li>
<li>警告：远程主机标识已更改！</li>
</ul>
<p>此报错是由于远程的主机的公钥发生了变化导致的。<br>ssh服务是通过公钥和私钥来进行连接的，它会把每个曾经访问过计算机或服务器的公钥（public key），记录在~/.ssh/known_hosts 中，当下次访问曾经访问过的计算机或服务器时，ssh就会核对公钥，如果和上次记录的不同，OpenSSH会发出警告。<br>解决</p>
<ol>
<li>使用命令清除所连接的IP或域名<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -R XX<span class="selector-class">.XX</span><span class="selector-class">.XX</span><span class="selector-class">.XX</span> (或者域名)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight livescript"><table><tbody><tr><td class="code"><pre><span class="line">PS C:<span class="string">\Users\xiao\.ssh&gt;</span> ssh-keygen -R github.com</span><br><span class="line"><span class="comment"># Host github.com found: line 5</span></span><br><span class="line">C:<span class="string">\Users\xiao/.ssh/known_hosts</span> updated.</span><br><span class="line">Original contents retained <span class="keyword">as</span> C:<span class="string">\Users\xiao/.ssh/known_hosts.old</span></span><br><span class="line">PS C:<span class="string">\Users\xiao\.ssh&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<p>执行完这条命令，就会删除 <code>known_hosts</code> 文件里的关于 <code>github.com</code> 的记录</p>
<ol start="2">
<li>当重新链接 github.com 的主机时，会重新生成指纹，建立链接。<figure class="highlight vbnet"><table><tbody><tr><td class="code"><pre><span class="line">PS D:\mine-project\blog&gt; git push</span><br><span class="line">The authenticity <span class="keyword">of</span> host <span class="comment">'github.com (20.205.243.166)' can't be established.</span></span><br><span class="line">ECDSA <span class="keyword">key</span> fingerprint <span class="built_in">is</span> SHA256:p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM.</span><br><span class="line">Are you sure you want <span class="keyword">to</span> <span class="keyword">continue</span> connecting (yes/no/[fingerprint])? yes</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<p>打开 <code>known_hosts</code> 文件，可以看到以及重新添加了<code>github</code> 的记录</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://files.mdnice.com/user/34064/e4179b79-acb9-469d-b0ba-fccfb985e6b3.png"></p>
<p>关于SSH更多请点击：<a href="https://www.yuque.com/xiaojt/izub4k/ys893v">常用的SSH，你了解多少？</a></p>
</body></html>]]></content>
      <categories>
        <category>SSH</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>适应生存</title>
    <url>/posts/2539184080.html</url>
    <content><![CDATA[<html><head></head><body><h2 id="沟通技巧"><a href="#沟通技巧" class="headerlink" title="沟通技巧"></a>沟通技巧</h2><ol>
<li><p>先讲对方想听的</p>
</li>
<li><p>再讲对方听得进的</p>
</li>
<li><p>再讲你该讲的</p>
</li>
<li><p>最后讲你想讲的</p>
</li>
</ol>
<h2 id="有效沟通四部曲"><a href="#有效沟通四部曲" class="headerlink" title="有效沟通四部曲"></a>有效沟通四部曲</h2><ol>
<li><p>表达你要的，而不是不要的。</p>
</li>
<li><p>表达你的感受，而不是情绪。（如：表达自己是愤怒的，而不是愤怒地去表达。）</p>
</li>
<li><p>表达你的需求，而不是抱怨。因为有些人是你猜我想要什么？猜不到说明你不在乎我，然后开始抱怨。</p>
</li>
<li><p>表达你要去地方向，而不是抱怨你所在地位置。（注意：看目标，而不陷在事件里。）</p>
</li>
</ol>
<h2 id="和领导相处原则"><a href="#和领导相处原则" class="headerlink" title="和领导相处原则"></a>和领导相处原则</h2><ol>
<li><p>让领导清楚</p>
<ul>
<li>工作的进度</li>
<li>问题的原因</li>
<li>解决的方法</li>
<li>风险点要看情况告知（一般领导不想看到）</li>
</ul>
</li>
<li><p>让领导知道</p>
<ul>
<li>你不怕困难</li>
<li>你不怕吃亏</li>
<li>你不怕麻烦</li>
</ul>
</li>
<li><p>让领导满意</p>
<ul>
<li>事前有请示</li>
<li>事中有汇报</li>
<li>事后有反馈</li>
</ul>
</li>
</ol>
<h2 id="功利性社交"><a href="#功利性社交" class="headerlink" title="功利性社交"></a>功利性社交</h2><ol>
<li><p>要对能够帮得上的人出手大方些。</p>
</li>
<li><p>学会溜须拍马，富人一样爱慕虚荣，喜欢听好听的，你要学会嘴甜。</p>
</li>
<li><p>朋友先交后用，先把目的隐藏起来。</p>
</li>
<li><p>送礼就要送对方轻易买不到的东西，如果感动结交，就让对方感动以后就是兄弟。</p>
</li>
<li><p>人家帮了你一定要送礼这是规矩，要让别人知道你是一个会来事的人。</p>
</li>
<li><p>不要跨越层级，去找别人送你办事。</p>
</li>
</ol>
<!--
平凡的一生

盛世的牛马，乱世的炮灰；

平安榨其身，战时用其命。

--鲁迅
-->

<h2 id="怀才不遇？"><a href="#怀才不遇？" class="headerlink" title="怀才不遇？"></a>怀才不遇？</h2><ul>
<li><p>注意说话方式，思维方式，</p>
</li>
<li><p>把取得的所有成绩归结到老同志的帮助，归结到院领导的关怀，归结到群众对你的支持。</p>
</li>
</ul>
<h2 id="强者思维"><a href="#强者思维" class="headerlink" title="强者思维"></a>强者思维</h2><p>跟任何人保持一定的距离，人们就尊重你了。</p>
<p>别人说什么，你说考虑一下，这个事儿你不要马上去办，你缓一缓，让他多找你几次，慢慢的大家就开始尊重你了。就是你为难别人，别人就尊重你。你要是不为难别人的话，那么别人是不会尊重你的。</p>
<p>事缓则圆，语迟则贵，人缓则安。</p>
<h2 id="工作注意"><a href="#工作注意" class="headerlink" title="工作注意"></a>工作注意</h2><ol>
<li><p>对于领导的安排，人多的时候要无条件的服从，即使他说的不对。</p>
</li>
<li><p>千万不要为了工作和同事闹矛盾，做好自己的事就可以了。（如果真出现矛盾了，要处理好，因为只有在矛盾中才可以看出来一个人）</p>
</li>
<li><p>私下经营好与领导的关系，请领导喝酒不必买贵</p>
</li>
<li><p>不要背后议论领导，你不知道身边的人和领导是什么关系</p>
</li>
<li><p>千万不要和任何人讲自己的过去现在和未来打算</p>
</li>
<li><p>饭局上不是上来就谈生意，而是要喝，喝高兴了，生意自然就谈成了（一般情况下不用提生意的事，酒后高兴了，甲方会主动提出把项目交给你做，因为对他们来说项目交给谁做影响不大，交给你只是顺水人情）</p>
</li>
<li><p>一定要和人精、有背景的人搞好关系，10年后你会发现好处很多。</p>
</li>
<li><p>和别人聊天多聊他有的，而不是自己有的。</p>
</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>人</category>
      </categories>
      <tags>
        <tag>修炼</tag>
      </tags>
  </entry>
  <entry>
    <title>通过vNode实现给列表字段打标签</title>
    <url>/posts/1525901815.html</url>
    <content><![CDATA[<html><head></head><body><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如何给列表数据打标签？类似下面这种样子👇</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/632d17c616f2c2beb116edbb.jpg"></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>数模转化（对接口请求回来的数据进行过滤标记，返回新的数据）</li>
<li>渲染新的数据模型</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="1、过滤数据，需要打标签的采用jsx写法"><a href="#1、过滤数据，需要打标签的采用jsx写法" class="headerlink" title="1、过滤数据，需要打标签的采用jsx写法"></a>1、过滤数据，需要打标签的采用<code>jsx</code>写法</h3><p>业务数据的处理我封装在 <code>mixins</code> 里面</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 存放全局的mixin， 可拆分到模块独享</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> { mapGetters } <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> { fetchListData } <span class="keyword">from</span> <span class="string">'@/api/global/api.js'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      <span class="attr">p_category</span>: [],</span><br><span class="line">      <span class="attr">listdata</span>: [],</span><br><span class="line">      <span class="attr">p_total</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">p_loading</span>: <span class="literal">false</span>,</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">computed</span>: {</span><br><span class="line">    <span class="comment">// ...mapGetters(['productLevel', 'productLevelInfo']),</span></span><br><span class="line">    <span class="title function_">p_listdata</span>(<span class="params"></span>) {</span><br><span class="line">      <span class="keyword">const</span> data = <span class="variable language_">this</span>.<span class="property">listdata</span>;</span><br><span class="line">      data.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> {</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// jsx 方式，打标签</span></span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">status</span> === <span class="number">2</span> || item.<span class="property">status</span> === <span class="number">3</span>) {</span><br><span class="line">          item.<span class="property">status</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">{{color:</span> '#<span class="attr">999</span>'}}&gt;</span>停售<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">          item.<span class="property">status</span> = item.<span class="property">status</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">age</span> &lt;= <span class="number">25</span>) {</span><br><span class="line">          item.<span class="property">age</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge_info"</span>&gt;</span>{item.age}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">sex</span> === <span class="string">'Man'</span>) {</span><br><span class="line">          item.<span class="property">sex</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge_default"</span>&gt;</span>{item.sex}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        }</span><br><span class="line">      })</span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">methods</span>: {</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getProductList</span>(<span class="params">params = {}</span>) {</span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">p_loading</span> = <span class="literal">true</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">listdata</span> = []</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetchListData</span>(params)</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">0</span>) {</span><br><span class="line">          <span class="keyword">const</span> { data = [], total = <span class="number">0</span> } = res || {}</span><br><span class="line">          <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(data)) {</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">listdata</span> = [...data]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">p_total</span> = total</span><br><span class="line">          } <span class="keyword">else</span> {</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">listdata</span> = []</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">p_total</span> = <span class="number">0</span></span><br><span class="line">          }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">listdata</span> = []</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">p_total</span> = <span class="number">0</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">message</span> || <span class="string">'出错了'</span>)</span><br><span class="line">        }</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">p_loading</span> = <span class="literal">false</span>;</span><br><span class="line">      } <span class="keyword">catch</span> (err) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">p_loading</span> = <span class="literal">false</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">listdata</span> = []</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">p_total</span> = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="base-less-定义标签样式"><a href="#base-less-定义标签样式" class="headerlink" title="base.less 定义标签样式"></a><code>base.less</code> 定义标签样式</h4><figure class="highlight less"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.badge_info</span> {</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4760f0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#1C84C6</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.badge_default</span> {</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4760f0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#4760f0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2、封装列表渲染组件"><a href="#2、封装列表渲染组件" class="headerlink" title="2、封装列表渲染组件"></a>2、封装列表渲染组件</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"listV2"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"listV2_row-title"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"(col, index) in fieldList"</span> <span class="attr">:key</span>=<span class="string">"index"</span> <span class="attr">class</span>=<span class="string">"listV2_cell ellipsis"</span> <span class="attr">:name</span>=<span class="string">"col.fieldName"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        {{col.fieldLabel}}</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 行 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"tableData.length === 0"</span> <span class="attr">class</span>=<span class="string">"nodata"</span>&gt;</span>暂无数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(row, index) in tableData"</span> <span class="attr">:key</span>=<span class="string">"index"</span> <span class="attr">class</span>=<span class="string">"listV2_row pointer"</span> @<span class="attr">click</span>=<span class="string">"rowClickToDetail(row)"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 单元格-列 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"(col, index) in fieldList"</span> <span class="attr">:key</span>=<span class="string">"index"</span> <span class="attr">class</span>=<span class="string">"listV2_cell ellipsis"</span> <span class="attr">:name</span>=<span class="string">"col.fieldName"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">RenderDom</span> <span class="attr">:vNode</span>=<span class="string">"row[col.fieldName] || '-'"</span>&gt;</span><span class="tag">&lt;/<span class="name">RenderDom</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">RenderDom</span> <span class="keyword">from</span> <span class="string">"./renderDom"</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">'TableList'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">tableData</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">required</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">fieldList</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">required</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">align</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="string">'left'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">RenderDom</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> {}</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>: {},</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">watch</span>: {},</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">created</span>(<span class="params"></span>) { },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">mounted</span>(<span class="params"></span>) { },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: {},</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">updated</span>(<span class="params"></span>) { },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">beforeDestroy</span>(<span class="params"></span>) { },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">'less'</span> <span class="attr">rel</span>=<span class="string">'stylesheet/less'</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="keyword">@import</span> <span class="string">"./index.less"</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="3、封装渲染vNode的方法"><a href="#3、封装渲染vNode的方法" class="headerlink" title="3、封装渲染vNode的方法"></a>3、封装渲染vNode的方法</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> renderDom = {</span><br><span class="line">  <span class="attr">props</span>: {</span><br><span class="line">    <span class="attr">vNode</span>: {</span><br><span class="line">      <span class="attr">type</span>: [<span class="title class_">Array</span>, <span class="title class_">String</span>, <span class="title class_">Object</span>,<span class="title class_">Number</span>],</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) {</span><br><span class="line">    <span class="comment">// jsx - vNode 直接返回，交给框架处理（js语法带来很多可能，列表打标签功能）</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">vNode</span> === <span class="string">'object'</span>) {</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">vNode</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 普通数据，直接包一层div，然后返回给页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(</span><br><span class="line">      <span class="string">'div'</span>,</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">class</span>: <span class="string">'ellipsis'</span>,</span><br><span class="line">      },</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">vNode</span></span><br><span class="line">    )</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="4、页面组件调用"><a href="#4、页面组件调用" class="headerlink" title="4、页面组件调用"></a>4、页面组件调用</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"customer"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">table-list</span> <span class="attr">v-loading</span>=<span class="string">"p_loading"</span> <span class="attr">:tableData</span>=<span class="string">"p_listdata"</span> <span class="attr">:fieldList</span>=<span class="string">"fieldList"</span>&gt;</span><span class="tag">&lt;/<span class="name">table-list</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">TableList</span> <span class="keyword">from</span> <span class="string">'@/basecomponents/TableList/index'</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> $_pMixins <span class="keyword">from</span> <span class="string">"@/mixins/product.js"</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> enums <span class="keyword">from</span> <span class="string">'./enum.js'</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">'Customer'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>: {},</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="string">'table-list'</span>: <span class="title class_">TableList</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">mixins</span>: [$_pMixins],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">tableData</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">fieldList</span>: <span class="title class_">Object</span>.<span class="title function_">freeze</span>(enums.<span class="property">Enum_customerFieldList</span>),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>: {},</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">watch</span>: {},</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">created</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">mounted</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">initData</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">initData</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="title function_">getProductList</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">updated</span>(<span class="params"></span>) { },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">beforeDestroy</span>(<span class="params"></span>) { },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">'less'</span> <span class="attr">rel</span>=<span class="string">'stylesheet/less'</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="keyword">@import</span> <span class="string">"./index.less"</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/632d182616f2c2beb11753e7.jpg"></p>
<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vNode</tag>
        <tag>JSX</tag>
      </tags>
  </entry>
  <entry>
    <title>部署Netlify站点博客</title>
    <url>/posts/818123119.html</url>
    <content><![CDATA[<html><head></head><body><h2 id="Netlify站点部署静态博客"><a href="#Netlify站点部署静态博客" class="headerlink" title="Netlify站点部署静态博客"></a>Netlify站点部署静态博客</h2><p>今天尝试把站点部署在<a href="https://app.netlify.com/">Netlify</a>上，因为部署在GitHub Pages上，国内访问速度太慢了，所以就尝试一下别的站点，部署成功之后发现速度还是不太行，后边继续找找原因</p>
<p>Netlify 部署的地址在<a href="https://m.i-xiao.space/">这里</a></p>
<p>下图展示<code>GitHub Pages</code>站点和<code>Netlify</code>站点的全国网速对比（数据来源<a href="https://tool.chinaz.com/">站长工具</a>）</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63218cd316f2c2beb1b2619a.jpg"></p>
<p>总的来说，效果比<code>GitHub Pages</code>站点速度要快</p>
<h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><p>部署的时候，有几个问题，记录一下：</p>
<ol>
<li>部署时告警信息直接就阻塞了部署进程，导致部署失败，猜测是一些类似代码扫描工具使然，然后我只得先把造成告警的 <code>hexo-lazyload</code> 插件给剔除掉，然后就可以了（还不了解<code>Netlify</code>的工作原理，只是临时处理方案）</li>
</ol>
<p>以下是<code>Netlify</code>部署的部分日志信息</p>
<figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">2</span>:<span class="number">13</span>:<span class="number">23</span> PM: $ hexo generate</span><br><span class="line"><span class="attribute">2</span>:<span class="number">13</span>:<span class="number">23</span> PM: INFO  Validating config</span><br><span class="line"><span class="attribute">2</span>:<span class="number">13</span>:<span class="number">24</span> PM: INFO  Start processing</span><br><span class="line"><span class="attribute">2</span>:<span class="number">13</span>:<span class="number">24</span> PM: INFO  neat the css: /opt/build/repo/source/_data/styles.styl<span class="meta"> [ 19.27% saved]</span></span><br><span class="line"><span class="attribute">2</span>:<span class="number">13</span>:<span class="number">24</span> PM: INFO  neat the css: /opt/build/repo/source/_data/variables.styl<span class="meta"> [ NaN% saved]</span></span><br><span class="line"><span class="attribute">2</span>:<span class="number">13</span>:<span class="number">34</span> PM: WARN  request remote img fail https://pic.imgdb.cn/item/<span class="number">63184</span>ff316f2c2beb1e26ab9.png</span><br><span class="line"><span class="attribute">2</span>:<span class="number">48</span>:<span class="number">42</span> PM: Build exceeded maximum allowed runtime</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li><p><code>Netlify</code>部署成功之后，由于资源路径不正确，导致<code>NexT</code>主题不生效。我原先设置了路径 <code>root: /blog/</code> ，然后就重新添加了一条记录，解析了一个新的二级域名用来访问博客，同时，这也给我带来了另外两个问题，如下：</p>
</li>
<li><p>原先站点 <code>https://home.i-xiao.space/blog/</code> 上的不蒜子数据丢失了，重新初始化数据了。</p>
</li>
</ol>
<blockquote>
<p><a href="http://ibruce.info/2015/04/04/busuanzi/">“不蒜子”</a>允许初始化首次数据，但是需要注册登录，目前“不蒜子”暂停了<a href="http://busuanzi.ibruce.info/">注册</a>功能，那就先这样吧</p>
</blockquote>
<ol start="4">
<li>原<code>GitHub Pages</code>站点不能正常访问。 给<code>blog</code>仓库设置 <code>GitHub Pages</code>，绑定心得个人二级域名，在发布分支<code>gh-pages</code>下面生成一个CNAME文件，用来存放个人二级域名。存在的问题是：<code>hexo deploy</code> 是把<code>master</code>分支下生成的<code>public</code>目录下的静态文件推送并覆盖<code>gh-pages</code>分支下的文件，因为每次生成的<code>public</code>目录下没有<code>CNAME</code>文件，所以<code>CNAME</code>文件就被冲掉了，造成的结果就是，每次自动部署都会把之前绑定的个人域名“解绑”，导致网站不能正常访问</li>
</ol>
<ul>
<li>解决4：</li>
</ul>
<p>方法一： 本地<code>master</code>分支，在<code>source</code>目录下新建一个<code>CNAME</code>文件，存放要绑定的域名，等到执行<code>hexo g</code>的时候，会把<code>source</code>目录下的文件“揍”到<code>public</code>下，然后推送到<code>gh-pages</code>分支上</p>
<p><code>xxx.xml</code> 网站地图也可以用同样的方式放置到<code>source</code>目录</p>
<p>方法二： 理论上也可以在<code>generateAfter</code>事件中使用<code>node</code>处理</p>
<h2 id="CNAME配置及工作原理探究"><a href="#CNAME配置及工作原理探究" class="headerlink" title="CNAME配置及工作原理探究"></a><code>CNAME</code>配置及工作原理探究</h2><p>配置主要有两步：</p>
<ol>
<li><p>个人域名增加 CNAME（<code>可以理解为IP昵称(域名的)的昵称(CNAME)</code>） 记录，<strong>记录值</strong>指向托管网站分配的域名（不带 http(s)://），添加完成之后，记得<strong>开启解析</strong>（需要等待一会，可以通过 ping 二级域名的方式检查是否解析成功）</p>
</li>
<li><p>托管网站上配置第一步添加的二级域名，起到<strong>桥接</strong>的作用</p>
</li>
</ol>
<p>整体实现的效果就是“互联互通”。类似与路由器转发的工作，每个路由器上只存储相邻相近的路由器的ip，整合起来就是一张大网，任何已知网路请求都会经由路由器转发到达目的主机</p>
<p>当访问配置的二级域名时，由于我在域名管理平台上配置的 <code>DNS</code>解析到 托管网站的 域名，由该域名指向<code>IP</code></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/63227f8a16f2c2beb180ae64.jpg"></p>
<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://home.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>站点建设</tag>
      </tags>
  </entry>
  <entry>
    <title>静态博客SEO优化</title>
    <url>/posts/2912186581.html</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p><a href="https://www.sousuoyinqingtijiao.com/">屈站长</a>汇总了各大搜索引擎网站提交入口，非常方便，可以前去提交验证。</p>
</blockquote>
<h2 id="Baidu-Webmaster-Tools"><a href="#Baidu-Webmaster-Tools" class="headerlink" title="Baidu Webmaster Tools"></a>Baidu Webmaster Tools</h2><p>首先注册登录<a href="https://ziyuan.baidu.com/site/#/">百度搜索资源平台</a>，然后执行下面的步骤：</p>
<ol>
<li>添加网站（输入网站）</li>
<li>设置站点属性</li>
<li>验证网站，以下三种方式，任选其一即可<ul>
<li>文件验证 （下载文件，放到网站根目录，可访问）</li>
<li><code>HTML</code>标签验证（网站增加 <code>meta</code> 标签）</li>
<li><code>CNAME</code>验证 （增加域名解析记录）</li>
</ul>
</li>
</ol>
<p>我使用的是<code>HTML</code>标签验证，<code>Hexo</code> 提供的有<code>API</code>， 可以往页面里注入 <code>HTML</code></p>
<blockquote>
<p>百度移动统计: <a href="https://mtj.baidu.com/web/dashboard">https://mtj.baidu.com/web/dashboard</a></p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// baidu seo</span></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">injector</span>.<span class="title function_">register</span>(</span><br><span class="line">  <span class="string">'head_begin'</span>,</span><br><span class="line">  <span class="string">'&lt;meta name="baidu-site-verification" content="code-xyJs6My2et" /&gt;'</span>,</span><br><span class="line">  <span class="string">'default'</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>

<p>更多<code>Hexo API</code>请查看<a href="https://hexo.io/api/injector">这里</a></p>
<h2 id="Bing-Webmaster-Tools"><a href="#Bing-Webmaster-Tools" class="headerlink" title="Bing Webmaster Tools"></a>Bing Webmaster Tools</h2><ul>
<li><a href="https://www.bing.com/webmasters">必应工具</a>，添加网站</li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6322ba7916f2c2beb1bed61e.jpg"></p>
<ul>
<li>提交网站地图</li>
</ul>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6322bc9716f2c2beb1c1a6db.jpg"></p>
<p>步骤同百度类似，这里就不介绍了。</p>
<p><code>NexT</code>官方<code>SEO</code>教程请来<a href="https://theme-next.js.org/docs/theme-settings/seo.html">这里</a></p>
<hr>
<p><img data-src="/images/base/loading03.svg" data-original="https://cdn.jsdelivr.net/gh/all-smile/nav@1.0.7/static/images/wind_girl.webp"></p>
<p>我是 <a href="https://home.i-xiao.space/"><strong>甜点cc</strong></a></p>
<p>热爱前端，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚，等待着一个创业机会。主要致力于分享实用技术干货，希望可以给一小部分人一些微小帮助。</p>
<p>我排斥“新人迷茫，老人看戏”的现象，希望能和大家一起努力破局。营造一个良好的技术氛围，为了个人、为了我国的数字化转型、互联网物联网技术、数字经济发展做一点点贡献。<strong>数风流人物还看中国、看今朝、看你我。</strong></p>
</body></html>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>项目进度类知识要点</title>
    <url>/posts/2947212633.html</url>
    <content><![CDATA[<html><head></head><body><h2 id="单代号网络图"><a href="#单代号网络图" class="headerlink" title="单代号网络图"></a>单代号网络图</h2><ul>
<li>六标时法</li>
<li>正推法</li>
<li>逆推法</li>
</ul>
<table>
<thead>
<tr>
<th align="left">六标时法</th>
<th align="center"></th>
<th align="right"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">最早开始时间(ES)</td>
<td align="center">工期</td>
<td align="right">最早完成时间(EF)</td>
</tr>
<tr>
<td align="left"></td>
<td align="center">活动名称/活动编号</td>
<td align="right"></td>
</tr>
<tr>
<td align="left">最迟开始时间(LS)</td>
<td align="center">浮动时间(总时差)</td>
<td align="right">最迟完成时间(LF)</td>
</tr>
</tbody></table>
<p><img data-src="/images/base/loading03.svg" data-original="https://files.mdnice.com/user/34064/2d5434a8-8943-42ca-9486-37313675db1a.jpg"></p>
<h2 id="关键路径、计算项目的总工期"><a href="#关键路径、计算项目的总工期" class="headerlink" title="关键路径、计算项目的总工期"></a>关键路径、计算项目的总工期</h2><ol>
<li>关键路径是最大长度</li>
<li>关键路径上的活动是关键活动</li>
<li>关键活动之和为总工期</li>
</ol>
<h2 id="关键路径变化问题"><a href="#关键路径变化问题" class="headerlink" title="关键路径变化问题"></a>关键路径变化问题</h2><p>压缩工期时要注意关键路径的变化问题， 一个项目可以存在1条或多条关键路径。</p>
<h2 id="标号法求最短最长路径"><a href="#标号法求最短最长路径" class="headerlink" title="标号法求最短最长路径"></a>标号法求最短最长路径</h2><p>类似于贪心算法</p>
<h2 id="总时差、自由时差"><a href="#总时差、自由时差" class="headerlink" title="总时差、自由时差"></a>总时差、自由时差</h2><p>总时差（总浮动时间），指工序推迟开工而<strong>不会影响总工期</strong>的最大时间。也就是说活动的总时差跟总工期相比较，以自己为参照物的浮动时间。</p>
<p>自由时差（自由浮动时间），指<strong>不影响紧后活动最早开始时间</strong>的最大时间。与紧后活动相较而言。</p>
<p>  $$ 总时差 = 最迟 - 最早 （开始或结束） $$<br>  $$自由时差 = min{紧后活动的ES} - 此活动的EF$$</p>
<ol>
<li>关键路径上的活动总时差 = 自由时差 = 0</li>
<li>非关键路径上活动的总时差 = 关键路径长度 - 经过该活动最大非关键路径长度</li>
<li>非关键路径上活动的自由时差<br>$$非关键活动自由时差=<br>\begin{cases}<br>自由时差 = 总时差&amp;， \text{紧后工作是关键工作}\<br>自由时差 = 0&amp;， \text{紧后工作不是关键工作}\<br>自由时差 = 0&amp;， \text{紧后工作有关键工作和非关键工作}<br>\end{cases}$$</li>
</ol>
<h2 id="压缩工期"><a href="#压缩工期" class="headerlink" title="压缩工期"></a>压缩工期</h2><ul>
<li>压缩关键活动</li>
<li>压缩可以压缩的活动</li>
<li>压缩代价最小的活动</li>
<li>注意压缩后关键路径是否变化</li>
</ul>
<h2 id="期望值、标准差、方差、完工概率"><a href="#期望值、标准差、方差、完工概率" class="headerlink" title="期望值、标准差、方差、完工概率"></a>期望值、标准差、方差、完工概率</h2><p>计划评审技术（PERT），又称“三点估算”技术</p>
<p>$$期望值t_E = \frac{t_o + 4t_m + t_p}{6}$$</p>
<p>$$标准差σ(西格玛) = \frac{t_p - t_o}{6}$$</p>
<p>$$方差 = σ^2$$</p>
<p>$$完工概率 = 每个活动的完工概率相乘$$</p>
<p>完工概率计算三步走：</p>
<ol>
<li>算期望值 $t_E$</li>
<li>算标准差 $σ$</li>
<li>画抛物线（正态分布图）</li>
</ol>
<p>面积法求完工概率（正态分布，68%，95%，99%）</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://files.mdnice.com/user/34064/b003ec0d-0e7c-4bf9-ba37-a6732f7fd007.png"></p>
<!--
![](https://files.mdnice.com/user/34064/48b8410d-d7e7-449a-8159-64716eb19c08.jpg)
-->

<h2 id="双代号网络图和单代号网络图的区别"><a href="#双代号网络图和单代号网络图的区别" class="headerlink" title="双代号网络图和单代号网络图的区别"></a>双代号网络图和单代号网络图的区别</h2><ol>
<li><p>箭线：单代号中表示逻辑关系，双代号中表示某项工作</p>
</li>
<li><p>节点：单代号中节点表示工作，必须编号；双代号中节点表示事件</p>
</li>
<li><p>虚工作： 单代号中没有虚工作，双代号中表示工作的先后顺序。</p>
</li>
</ol>
<h2 id="时标网络图"><a href="#时标网络图" class="headerlink" title="时标网络图"></a>时标网络图</h2><p>时标网络图兼具单代号网络图和横道图的优点，直观易懂。</p>
<ol>
<li><p>用箭线表示活动，箭线在水平方向的投影长度表示工序的作业时间</p>
</li>
<li><p>用波浪线表示活动与紧后活动的自由时差</p>
</li>
<li><p>用虚线表示虚活动（检测点）</p>
</li>
<li><p>当实箭线后有波浪线且末端有垂直部分时，垂直部分用实线绘制</p>
</li>
</ol>
<p><img data-src="/images/base/loading03.svg" data-original="https://files.mdnice.com/user/34064/f30e2b4d-203d-4688-92f4-5fadb77028eb.jpg"></p>
<hr>
<p>我是 <strong>甜点cc</strong>，个人网站(国外站点): <a href="https://blog.i-xiao.space/">https://blog.i-xiao.space/</a></p>
<p>回头看，轻舟已过万重山；向前看，前路漫漫亦灿灿。</p>
<p>公众号：【看见另一种可能】</p>
</body></html>]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>项目进度类知识要点</title>
    <url>/posts/2947212633.html</url>
    <content><![CDATA[<html><head></head><body><h2 id="单代号网络图"><a href="#单代号网络图" class="headerlink" title="单代号网络图"></a>单代号网络图</h2><ul>
<li>六标时法</li>
<li>正推法</li>
<li>逆推法</li>
</ul>
<table>
<thead>
<tr>
<th align="left">六标时法</th>
<th align="center"></th>
<th align="right"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">最早开始时间(ES)</td>
<td align="center">工期</td>
<td align="right">最早完成时间(EF)</td>
</tr>
<tr>
<td align="left"></td>
<td align="center">活动名称/活动编号</td>
<td align="right"></td>
</tr>
<tr>
<td align="left">最迟开始时间(LS)</td>
<td align="center">浮动时间(总时差)</td>
<td align="right">最迟完成时间(LF)</td>
</tr>
</tbody></table>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6479a80ff024cca17389fab9.jpg"></p>
<h2 id="关键路径、计算项目的总工期"><a href="#关键路径、计算项目的总工期" class="headerlink" title="关键路径、计算项目的总工期"></a>关键路径、计算项目的总工期</h2><ol>
<li>关键路径是最大长度</li>
<li>关键路径上的活动是关键活动</li>
<li>关键活动之和为总工期</li>
</ol>
<h2 id="关键路径变化问题"><a href="#关键路径变化问题" class="headerlink" title="关键路径变化问题"></a>关键路径变化问题</h2><p>压缩工期时要注意关键路径的变化问题， 一个项目可以存在1条或多条关键路径。</p>
<h2 id="标号法求最短最长路径"><a href="#标号法求最短最长路径" class="headerlink" title="标号法求最短最长路径"></a>标号法求最短最长路径</h2><p>类似于贪心算法</p>
<h2 id="总时差、自由时差"><a href="#总时差、自由时差" class="headerlink" title="总时差、自由时差"></a>总时差、自由时差</h2><p>总时差（总浮动时间），指工序推迟开工而<strong>不会影响总工期</strong>的最大时间。也就是说活动的总时差跟总工期相比较，以自己为参照物的浮动时间。</p>
<p>自由时差（自由浮动时间），指<strong>不影响紧后活动最早开始时间</strong>的最大时间。与紧后活动相较而言。</p>
<p>  $$ 总时差 = 最迟 - 最早 （开始或结束） $$<br>  $$自由时差 = min{紧后活动的ES} - 此活动的EF$$</p>
<ol>
<li>关键路径上的活动总时差 = 自由时差 = 0</li>
<li>非关键路径上活动的总时差 = 关键路径长度 - 经过该活动最大非关键路径长度</li>
<li>非关键路径上活动的自由时差<br>$$非关键活动自由时差=<br>\begin{cases}<br>自由时差 = 总时差&amp;， \text{紧后工作是关键工作}\<br>自由时差 = 0&amp;， \text{紧后工作不是关键工作}\<br>自由时差 = 0&amp;， \text{紧后工作有关键工作和非关键工作}<br>\end{cases}$$</li>
</ol>
<h2 id="压缩工期"><a href="#压缩工期" class="headerlink" title="压缩工期"></a>压缩工期</h2><ul>
<li>压缩关键活动</li>
<li>压缩可以压缩的活动</li>
<li>压缩代价最小的活动</li>
<li>注意压缩后关键路径是否变化</li>
</ul>
<h2 id="期望值、标准差、方差、完工概率"><a href="#期望值、标准差、方差、完工概率" class="headerlink" title="期望值、标准差、方差、完工概率"></a>期望值、标准差、方差、完工概率</h2><p>计划评审技术（PERT），又称“三点估算”技术</p>
<p>$$期望值t_E = \frac{t_o + 4t_m + t_p}{6}$$</p>
<p>$$标准差σ(西格玛) = \frac{t_p - t_o}{6}$$</p>
<p>$$方差 = σ^2$$</p>
<p>$$完工概率 = 每个活动的完工概率相乘$$</p>
<p>完工概率计算三步走：</p>
<ol>
<li>算期望值 $t_E$</li>
<li>算标准差 $σ$</li>
<li>画抛物线（正态分布图）</li>
</ol>
<p>面积法求完工概率（正态分布，68%，95%，99%）</p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6479a827f024cca1738a15ed.jpg"></p>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6479a84ef024cca1738a404c.jpg"></p>
<h2 id="双代号网络图和单代号网络图的区别"><a href="#双代号网络图和单代号网络图的区别" class="headerlink" title="双代号网络图和单代号网络图的区别"></a>双代号网络图和单代号网络图的区别</h2><ol>
<li><p>箭线：单代号中表示逻辑关系，双代号中表示某项工作</p>
</li>
<li><p>节点：单代号中节点表示工作，必须编号；双代号中节点表示事件</p>
</li>
<li><p>虚工作： 单代号中没有虚工作，双代号中表示工作的先后顺序。</p>
</li>
</ol>
<h2 id="时标网络图"><a href="#时标网络图" class="headerlink" title="时标网络图"></a>时标网络图</h2><p>时标网络图兼具单代号网络图和横道图的优点，直观易懂。</p>
<ol>
<li><p>用箭线表示活动，箭线在水平方向的投影长度表示工序的作业时间</p>
</li>
<li><p>用波浪线表示活动与紧后活动的自由时差</p>
</li>
<li><p>用虚线表示虚活动（检测点）</p>
</li>
<li><p>当实箭线后有波浪线且末端有垂直部分时，垂直部分用实线绘制</p>
</li>
</ol>
<p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6479a85ff024cca1738a54d8.jpg"></p>
<hr>
<p>我是 <strong>甜点cc</strong>，个人网站(国外站点): <a href="https://blog.i-xiao.space/">https://blog.i-xiao.space/</a></p>
<p>公众号：【看见另一种可能】</p>
</body></html>]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>项目进度</tag>
      </tags>
  </entry>
</search>
