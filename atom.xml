<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiaoJt</title>
  
  <subtitle>看见另一种可能</subtitle>
  <link href="https://blog.i-xiao.space/atom.xml" rel="self"/>
  
  <link href="https://blog.i-xiao.space/"/>
  <updated>2023-10-27T05:48:48.501Z</updated>
  <id>https://blog.i-xiao.space/</id>
  
  <author>
    <name>XiaoJt</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jenkins pipeline对接新节点</title>
    <link href="https://blog.i-xiao.space/posts/3226602976.html"/>
    <id>https://blog.i-xiao.space/posts/3226602976.html</id>
    <published>2023-08-17T01:26:15.000Z</published>
    <updated>2023-10-27T05:48:48.501Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近开发过程中部署新的节点，由于pipeline（流水线）中没有相关配置，所以需要新增参数、脚本以及ssh免密登录配置</p><blockquote><p>Jenkins流水线采用参数化构建，主要两个参数，一个是分支名： <code>branch</code>，一个是部署环境（也就是节点ip）： <code>buildENV</code></p></blockquote><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1、新增节点参数"><a href="#1、新增节点参数" class="headerlink" title="1、新增节点参数"></a>1、新增节点参数</h2><p>参数化构建中新增主机ip选项到<code>buildENV</code>参数中</p><h2 id="2、修改流水线脚本"><a href="#2、修改流水线脚本" class="headerlink" title="2、修改流水线脚本"></a>2、修改流水线脚本</h2><p>复制原有节点的脚本，修改即可</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">node(<span class="string">"master"</span>) {</span><br><span class="line">    withEnv([<span class="string">'PATH+bin=/home/xiao/node-v10.15.3-linux-x64/bin/bin:/usr/local/bin:/usr/bin/:/bin'</span>]) {</span><br><span class="line">        stage(<span class="string">"拉取代码"</span>){</span><br><span class="line">            <span class="built_in">echo</span>  <span class="string">"WORKSPACE:<span class="variable">${WORKSPACE}</span>"</span></span><br><span class="line">            <span class="built_in">echo</span>  <span class="string">"JENKINS_HOME:<span class="variable">${JENKINS_HOME}</span>"</span></span><br><span class="line">            <span class="built_in">echo</span>  <span class="string">"JOB_NAME:<span class="variable">${JOB_NAME}</span>"</span></span><br><span class="line">            <span class="built_in">echo</span>  <span class="string">"WORKSPACE_TMP:<span class="variable">${WORKSPACE_TMP}</span>"</span></span><br><span class="line">            <span class="built_in">echo</span>  <span class="string">"WORKSPACE:<span class="variable">${WORKSPACE}</span>"</span></span><br><span class="line">            checkout(</span><br><span class="line">                [</span><br><span class="line">                  <span class="variable">$class</span>: <span class="string">'GitSCM'</span>,</span><br><span class="line">                  branches: [[name: <span class="string">"*/<span class="variable">${branch}</span>"</span>]],</span><br><span class="line">                  doGenerateSubmoduleConfigurations: <span class="literal">false</span>,</span><br><span class="line">                  extensions: [],</span><br><span class="line">                  submoduleCfg: [],</span><br><span class="line">                  userRemoteConfigs: [</span><br><span class="line">                      [url: <span class="string">'ssh://git@xx.xx/projectName.git'</span>]</span><br><span class="line">                  ]</span><br><span class="line">                ]</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">        stage(<span class="string">"代码编译"</span>){</span><br><span class="line">            sh <span class="string">"npm run build"</span></span><br><span class="line">        }</span><br><span class="line">        stage(<span class="string">"代码发布"</span>){</span><br><span class="line">            def machine</span><br><span class="line">            def IP</span><br><span class="line">            <span class="keyword">if</span> (env.buildENV == <span class="string">"11.11.11.11"</span>) {</span><br><span class="line">                machine = <span class="string">"xiao@11.11.11.11"</span></span><br><span class="line">                IP = <span class="string">"11.11.11.11"</span></span><br><span class="line">                def path = <span class="string">"/opt/web/tengine/data"</span></span><br><span class="line"></span><br><span class="line">                sh <span class="string">"ssh <span class="variable">${IP}</span> \"cd <span class="variable">${path}</span> &amp;&amp; rm -rf dist_bak &amp;&amp; mv dist dist_bak\""</span></span><br><span class="line">                sh <span class="string">"scp -r <span class="variable">${WORKSPACE}</span>/dist <span class="variable">${machine}</span>:<span class="variable">${path}</span>"</span></span><br><span class="line">                sh <span class="string">"ssh <span class="variable">${IP}</span> \"cd <span class="variable">${path}</span> &amp;&amp; sh replace.sh\""</span></span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (env.buildENV == <span class="string">"22.22.22.22"</span>) {</span><br><span class="line">                // 新节点配置参考</span><br><span class="line">                machine = <span class="string">"xiao@22.22.22.22"</span></span><br><span class="line">                IP = <span class="string">"22.22.22.22"</span></span><br><span class="line">                def path = <span class="string">"/opt/web/tengine/data"</span></span><br><span class="line"></span><br><span class="line">                sh <span class="string">"ssh <span class="variable">${IP}</span> \"cd <span class="variable">${path}</span> &amp;&amp; rm -rf dist_bak &amp;&amp; mv dist dist_bak\""</span></span><br><span class="line">                sh <span class="string">"scp -r <span class="variable">${WORKSPACE}</span>/dist <span class="variable">${machine}</span>:<span class="variable">${path}</span>"</span></span><br><span class="line">                sh <span class="string">"ssh <span class="variable">${IP}</span> \"cd <span class="variable">${path}</span> &amp;&amp; sh replace.sh\""</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>更多配置请参考：<a href="https://www.jenkins.io/doc/pipeline/steps/ssh-steps/">Jenkins CD SSH Pipeline</a></p><h2 id="3、新增节点的ssh免密登录配置"><a href="#3、新增节点的ssh免密登录配置" class="headerlink" title="3、新增节点的ssh免密登录配置"></a>3、新增节点的ssh免密登录配置</h2><p><strong>最关键的一步</strong>，主要用于在执行 <code>pipeline</code> 脚本过程中，能够使用<code>ssh</code>命令登录到目的主机上进行前端的一系列部署操作。</p><h3 id="1-沿用老节点的配置，不用生成新的rsa公私钥"><a href="#1-沿用老节点的配置，不用生成新的rsa公私钥" class="headerlink" title="1. 沿用老节点的配置，不用生成新的rsa公私钥"></a>1. 沿用老节点的配置，不用生成新的rsa公私钥</h3><h3 id="2-把-id-rsa-pub-添加到-新主机的-ssh-authorized-keys文件里"><a href="#2-把-id-rsa-pub-添加到-新主机的-ssh-authorized-keys文件里" class="headerlink" title="2. 把 id_rsa.pub 添加到 新主机的 ~/.ssh/authorized_keys文件里"></a>2. 把 id_rsa.pub 添加到 新主机的 <code>~/.ssh/authorized_keys</code>文件里</h3><ol><li><p>登录到 Jenkins 主机</p></li><li><p>配置ssh免密登录新主机</p></li></ol><figure class="highlight llvm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh/</span><br><span class="line">ssh-copy-id -i id_rsa.pub u<span class="number">8</span><span class="title">@192</span>.<span class="keyword">x</span>.<span class="keyword">x</span>.<span class="keyword">x</span></span><br></pre></td></tr></tbody></table></figure><p>输入主机密码后，即可在目的主机的 <code>~/.ssh/authorized_keys</code>文件里查看到 Jenkins 主机上的 <code>id_rsa.pub</code></p><ol start="3"><li>重启Jenkins主机的 sshd 服务</li></ol><figure class="highlight maxima"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">restart</span> sshd</span><br><span class="line"></span><br><span class="line">或者： sudo service sshd <span class="built_in">restart</span></span><br></pre></td></tr></tbody></table></figure><h2 id="4、触发Jenkins-构建"><a href="#4、触发Jenkins-构建" class="headerlink" title="4、触发Jenkins 构建"></a>4、触发Jenkins 构建</h2><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/64dd77d3661c6c8e543b9cdc.jpg"></p><h1 id="问题及Reference"><a href="#问题及Reference" class="headerlink" title="问题及Reference"></a>问题及Reference</h1><ol><li><p>如果不是root用户，执行命令的时候可以在命令前加 <code>sudo</code></p></li><li><p><a href="https://blog.csdn.net/b_x_p/article/details/78534423">SSH无密钥登陆 与 配置公钥后仍需要输入密码的解决方案</a></p></li><li><p><a href="https://www.cnblogs.com/mhl1003/p/9442898.html">Linux主机之间ssh免密登录配置方法</a></p></li><li><p><a href="https://blog.csdn.net/weixin_42480153/article/details/104788790">使用sshpass命令来进行明文免密登录</a></p></li><li><p><a href="https://www.jianshu.com/p/f6990f3a52eb">使用代理服务器跳转连接远程Server</a></p></li></ol></body></html>]]></content>
    
    
    <summary type="html">最近开发过程中部署新的节点，由于pipeline（流水线）中没有相关配置，所以需要新增参数、脚本以及ssh免密登录配置</summary>
    
    
    
    <category term="Jenkins" scheme="https://blog.i-xiao.space/categories/Jenkins/"/>
    
    
    <category term="Jenkins" scheme="https://blog.i-xiao.space/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>项目进度类知识要点</title>
    <link href="https://blog.i-xiao.space/posts/2947212633.html"/>
    <id>https://blog.i-xiao.space/posts/2947212633.html</id>
    <published>2023-06-29T05:38:44.000Z</published>
    <updated>2023-10-27T05:48:48.505Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="单代号网络图"><a href="#单代号网络图" class="headerlink" title="单代号网络图"></a>单代号网络图</h2><ul><li>六标时法</li><li>正推法</li><li>逆推法</li></ul><table><thead><tr><th align="left">六标时法</th><th align="center"></th><th align="right"></th></tr></thead><tbody><tr><td align="left">最早开始时间(ES)</td><td align="center">工期</td><td align="right">最早完成时间(EF)</td></tr><tr><td align="left"></td><td align="center">活动名称/活动编号</td><td align="right"></td></tr><tr><td align="left">最迟开始时间(LS)</td><td align="center">浮动时间(总时差)</td><td align="right">最迟完成时间(LF)</td></tr></tbody></table><p><img data-src="/images/base/loading03.svg" data-original="https://files.mdnice.com/user/34064/2d5434a8-8943-42ca-9486-37313675db1a.jpg"></p><h2 id="关键路径、计算项目的总工期"><a href="#关键路径、计算项目的总工期" class="headerlink" title="关键路径、计算项目的总工期"></a>关键路径、计算项目的总工期</h2><ol><li>关键路径是最大长度</li><li>关键路径上的活动是关键活动</li><li>关键活动之和为总工期</li></ol><h2 id="关键路径变化问题"><a href="#关键路径变化问题" class="headerlink" title="关键路径变化问题"></a>关键路径变化问题</h2><p>压缩工期时要注意关键路径的变化问题， 一个项目可以存在1条或多条关键路径。</p><h2 id="标号法求最短最长路径"><a href="#标号法求最短最长路径" class="headerlink" title="标号法求最短最长路径"></a>标号法求最短最长路径</h2><p>类似于贪心算法</p><h2 id="总时差、自由时差"><a href="#总时差、自由时差" class="headerlink" title="总时差、自由时差"></a>总时差、自由时差</h2><p>总时差（总浮动时间），指工序推迟开工而<strong>不会影响总工期</strong>的最大时间。也就是说活动的总时差跟总工期相比较，以自己为参照物的浮动时间。</p><p>自由时差（自由浮动时间），指<strong>不影响紧后活动最早开始时间</strong>的最大时间。与紧后活动相较而言。</p><p>  $$ 总时差 = 最迟 - 最早 （开始或结束） $$<br>  $$自由时差 = min{紧后活动的ES} - 此活动的EF$$</p><ol><li>关键路径上的活动总时差 = 自由时差 = 0</li><li>非关键路径上活动的总时差 = 关键路径长度 - 经过该活动最大非关键路径长度</li><li>非关键路径上活动的自由时差<br>$$非关键活动自由时差=<br>\begin{cases}<br>自由时差 = 总时差&amp;， \text{紧后工作是关键工作}\<br>自由时差 = 0&amp;， \text{紧后工作不是关键工作}\<br>自由时差 = 0&amp;， \text{紧后工作有关键工作和非关键工作}<br>\end{cases}$$</li></ol><h2 id="压缩工期"><a href="#压缩工期" class="headerlink" title="压缩工期"></a>压缩工期</h2><ul><li>压缩关键活动</li><li>压缩可以压缩的活动</li><li>压缩代价最小的活动</li><li>注意压缩后关键路径是否变化</li></ul><h2 id="期望值、标准差、方差、完工概率"><a href="#期望值、标准差、方差、完工概率" class="headerlink" title="期望值、标准差、方差、完工概率"></a>期望值、标准差、方差、完工概率</h2><p>计划评审技术（PERT），又称“三点估算”技术</p><p>$$期望值t_E = \frac{t_o + 4t_m + t_p}{6}$$</p><p>$$标准差σ(西格玛) = \frac{t_p - t_o}{6}$$</p><p>$$方差 = σ^2$$</p><p>$$完工概率 = 每个活动的完工概率相乘$$</p><p>完工概率计算三步走：</p><ol><li>算期望值 $t_E$</li><li>算标准差 $σ$</li><li>画抛物线（正态分布图）</li></ol><p>面积法求完工概率（正态分布，68%，95%，99%）</p><p><img data-src="/images/base/loading03.svg" data-original="https://files.mdnice.com/user/34064/b003ec0d-0e7c-4bf9-ba37-a6732f7fd007.png"></p><!--![](https://files.mdnice.com/user/34064/48b8410d-d7e7-449a-8159-64716eb19c08.jpg)--><h2 id="双代号网络图和单代号网络图的区别"><a href="#双代号网络图和单代号网络图的区别" class="headerlink" title="双代号网络图和单代号网络图的区别"></a>双代号网络图和单代号网络图的区别</h2><ol><li><p>箭线：单代号中表示逻辑关系，双代号中表示某项工作</p></li><li><p>节点：单代号中节点表示工作，必须编号；双代号中节点表示事件</p></li><li><p>虚工作： 单代号中没有虚工作，双代号中表示工作的先后顺序。</p></li></ol><h2 id="时标网络图"><a href="#时标网络图" class="headerlink" title="时标网络图"></a>时标网络图</h2><p>时标网络图兼具单代号网络图和横道图的优点，直观易懂。</p><ol><li><p>用箭线表示活动，箭线在水平方向的投影长度表示工序的作业时间</p></li><li><p>用波浪线表示活动与紧后活动的自由时差</p></li><li><p>用虚线表示虚活动（检测点）</p></li><li><p>当实箭线后有波浪线且末端有垂直部分时，垂直部分用实线绘制</p></li></ol><p><img data-src="/images/base/loading03.svg" data-original="https://files.mdnice.com/user/34064/f30e2b4d-203d-4688-92f4-5fadb77028eb.jpg"></p><hr><p>我是 <strong>甜点cc</strong>，个人网站(国外站点): <a href="https://blog.i-xiao.space/">https://blog.i-xiao.space/</a></p><p>回头看，轻舟已过万重山；向前看，前路漫漫亦灿灿。</p><p>公众号：【看见另一种可能】</p></body></html>]]></content>
    
    
    <summary type="html">项目进度管理是项目管理中的核心部分，把控进度对项目的成功至关重要，需要掌握工作进度的量化以及计算方法，掌握进度相关的科学知识有助于缩短项目工期，节省成本。</summary>
    
    
    
    <category term="项目管理" scheme="https://blog.i-xiao.space/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="项目管理" scheme="https://blog.i-xiao.space/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>nginx部署多个前端项目</title>
    <link href="https://blog.i-xiao.space/posts/1377411827.html"/>
    <id>https://blog.i-xiao.space/posts/1377411827.html</id>
    <published>2023-06-29T02:57:50.000Z</published>
    <updated>2023-10-27T05:48:48.501Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><blockquote><p>前端采用vue框架，主要介绍在同一个<code>ip+port</code>下（或域名），通过访问不同的<strong>子路径</strong>部署多个项目</p></blockquote><p>把前端打包好的项目直接放进 <code>nginx/html</code> 目录下面，</p><p><img data-src="/images/base/loading03.svg" data-original="https://files.mdnice.com/user/34064/b05479c5-8e4f-432f-bf6a-c9cb8e2cd650.png"></p><h1 id="路由采用hash模式"><a href="#路由采用hash模式" class="headerlink" title="路由采用hash模式"></a>路由采用hash模式</h1><p>浏览器访问的时候在url后面拼接上要访问的项目子路径即可，会由<code>vue-router</code>接管路由（hash模式），后面的路径跳转、资源访问的操作也都会在子路径下处理，nginx配置很简单。</p><p><code>nginx/nginx.conf</code> 文件的部分配置如下：</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">        <span class="attribute">listen</span>        <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>   www.axample.com;</span><br><span class="line">        <span class="comment">#rewrite      ^ https://$server_name$request_uri permanent;</span></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line">        <span class="comment"># 在443端口配置里设置</span></span><br><span class="line">        <span class="section">location</span> / {</span><br><span class="line">             <span class="attribute">root</span> html;</span><br><span class="line">             <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">             <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html; <span class="comment"># uri统一资源标志符</span></span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>浏览器访问：</strong></p><ul><li><code>https://www.axample.com/lily/</code> -&gt; <code>https://www.axample.com/lily/#/home</code></li><li><code>https://www.axample.com/mimosa/</code> -&gt; <code>https://www.axample.com/mimosa/#/home</code></li></ul><h1 id="路由采用的都是history模式"><a href="#路由采用的都是history模式" class="headerlink" title="路由采用的都是history模式"></a>路由采用的都是history模式</h1><p>不同于 hash模式，History 模式需要服务器的支持，还是通过访问不同的子路径部署多个项目，当浏览器访问项目的时候，会把子路径带上去请求资源，存在找不到资源的情况，所以需要在应用路径和nginx配置上做修改。</p><h2 id="1、router-js设置"><a href="#1、router-js设置" class="headerlink" title="1、router.js设置"></a>1、router.js设置</h2><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Router({</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  <span class="keyword">base</span>: <span class="string">'/mimosa/'</span>,</span><br><span class="line">  routes,</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p><code>base</code> 是应用的基路径，默认值: “/“。</p><p>例如，如果整个单页应用服务在 <code>/app/</code> 下，然后 <code>base</code> 就应该设为 <code>/app/</code>。</p><h2 id="2、vue-config-js修改publicPath"><a href="#2、vue-config-js修改publicPath" class="headerlink" title="2、vue.config.js修改publicPath"></a>2、vue.config.js修改publicPath</h2><blockquote><p>如果只修改了router的设置，没有修改<code>publicPath</code>，浏览器地址栏键入 <code>https://www.axample.com/lily/</code> 首次进入由于<code>vue-router</code>设置的 <code>redirect</code> 会重定向到首页地址，正常显示网页，但是再次刷新的时候，浏览器请求的是重定向过后的地址，静态文件地址指向错乱，<code>404</code>一般来说就是配置和真实的路径不符合，需要指定<code>try_files</code></p></blockquote><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publicPath: IS_PROD ? <span class="string">'/lily/'</span> : <span class="string">'/'</span>,  <span class="regexp">//</span> 公共路径</span><br></pre></td></tr></tbody></table></figure><p><strong>publicPath用法：</strong></p><p><code>publicPath</code>: 部署应用包时的基本 URL，用法和 <code>webpack</code> 本身的 <code>output.publicPath</code> 一致，</p><p>但是 <code>Vue CLI</code> 在一些其他地方也需要用到这个值，所以为了保持统一，直接修改 <code>publicPath</code> 而不要直接修改 <code>webpack</code> 的 <code>output.publicPath</code>。</p><ol><li>默认情况下，<code>Vue CLI</code> 会假设你的应用是被部署在一个<strong>域名的根路径</strong>上，</li></ol><p>例如 <code>https://www.my-app.com/</code>。</p><ol start="2"><li>如果应用被部署在一个<strong>子路径</strong>上，你就需要用这个选项指定这个子路径。</li></ol><p>例如，如果你的应用被部署在 <code>https://www.my-app.com/my-app/</code>，则设置 <code>publicPath</code> 为 <code>/my-app/</code>。</p><h2 id="3、nginx设置"><a href="#3、nginx设置" class="headerlink" title="3、nginx设置"></a>3、nginx设置</h2><p>增加子应用的配置</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 443端口配置</span></span><br><span class="line"></span><br><span class="line"><span class="section">location</span> / {</span><br><span class="line">  <span class="attribute">root</span> html;</span><br><span class="line">  <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">  <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">}</span><br><span class="line"><span class="section">location</span> /lily {</span><br><span class="line">  <span class="comment">#alias /usr/local/nginx/html/lily/;#把匹配到的路径重写, 注意要以/结尾</span></span><br><span class="line">  <span class="attribute">root</span> /usr/local/nginx/html; <span class="comment">#在匹配到的路径前面，增加root基础路径配置</span></span><br><span class="line">  <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /lily/index.html; <span class="comment"># 特定目录，匹配不到文件的话，增加/lily/index.html配置</span></span><br><span class="line">  <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">}</span><br><span class="line"><span class="section">location</span> /mimosa {</span><br><span class="line">  <span class="comment">#alias /usr/local/nginx/html/mimosa/;</span></span><br><span class="line">  <span class="attribute">root</span> /usr/local/nginx/html;</span><br><span class="line">  <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /mimosa/index.html;</span><br><span class="line">  <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>浏览器访问:</strong></p><ul><li><code>https://www.axample.com/lily/</code></li><li><code>https://www.axample.com/mimosa/</code></li></ul><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>上面讲解了通过访问不同的子路径部署多个前端项目，并结合<code>vue-router</code>的不同路由模式，给出不同的配置。</p><p>nginx方面的配置是写在同一个 <code>server</code> 块下的，通过 <code>location</code> 去分发。</p><p>也可以通过<strong>域名+端口</strong>的配置，实现部署多个前端项目，这个时候就需要添加不同的<code>server</code> 块配置了，感兴趣的小伙伴可以自己尝试一下🎁</p><hr><p>我是 <strong>甜点cc</strong>，个人网站: <a href="https://blog.i-xiao.space/">https://blog.i-xiao.space/</a></p><p>做人做事在于扬长而不是补短</p><p>公众号：【看见另一种可能】</p></body></html>]]></content>
    
    
    <summary type="html">通过访问不同的子路径部署多个前端项目，并结合`vue-router`的不同路由模式，给出不同的配置。</summary>
    
    
    
    <category term="nginx" scheme="https://blog.i-xiao.space/categories/nginx/"/>
    
    
    <category term="nginx" scheme="https://blog.i-xiao.space/tags/nginx/"/>
    
    <category term="前端" scheme="https://blog.i-xiao.space/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>编写脚本配合git hooks实现commitMsg提交</title>
    <link href="https://blog.i-xiao.space/posts/3797932790.html"/>
    <id>https://blog.i-xiao.space/posts/3797932790.html</id>
    <published>2023-06-07T07:22:00.000Z</published>
    <updated>2023-10-27T05:48:48.505Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>系统上线流程里，每次发版都要拆单，生成系统变更号，配合 commitlint 实现提交信息必须关联当前版本的系统变更号，当发版结束的时候，这个系统变更号就失效了，再次使用就会报错。</p><h1 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h1><p>校验系统变更号是单向的，本地并不能动态获取系统变更号，每次提交都很麻烦，必须去看一下那长达9位的系统变更号</p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>既然不能动态获取系统变更号，就在本地定义一个系统变更号的常量，编写脚本嵌入git hooks ，读取本地的系统变更号常量，利用脚本组合提交信息。这样至少在一次发版流程里不用关心系统变更号是什么的问题了，能做的也就这么多了。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="1、编写-x2F-git-x2F-compose-commit-msg-sh-文件"><a href="#1、编写-x2F-git-x2F-compose-commit-msg-sh-文件" class="headerlink" title="1、编写 ./git/compose-commit-msg.sh 文件"></a>1、编写 ./git/compose-commit-msg.sh 文件</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">"system-change-code"</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取当前分支</span></span><br><span class="line">line=$(head -n +1 .git/HEAD)</span><br><span class="line">branch=${line##*/}</span><br><span class="line">echo "branch: $branch"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取变更号</span></span><br><span class="line">user=`cat .git/system-change-code.txt | grep systemChangeCode`</span><br><span class="line">user=${code##*=}</span><br><span class="line">echo "code: $code"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取当前提交者的信息</span></span><br><span class="line">user=`git config user.name`</span><br><span class="line">echo "user: $user"</span><br><span class="line"></span><br><span class="line">if [ -z "$code" ] ; then</span><br><span class="line">echo "NEED SYSTEM-CHANGE-CODE";</span><br><span class="line">exit 1;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$1</span> 参数 就是 .git/COMMIT_EDITMSG 文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> <span class="variable">$1</span> 读取 git commit -m 输入的提交信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">组合提交信息</span></span><br><span class="line">commit=[$code]$(cat $1)_${branch}_${user}</span><br><span class="line">echo "所有参数: $*"</span><br><span class="line"></span><br><span class="line">echo "commit-msg: $commit"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将组合的信息重新输出到 .git/COMMIT_EDITMSG 文件</span></span><br><span class="line">echo "$commit" &gt; "$1"</span><br></pre></td></tr></tbody></table></figure><h3 id="2、编写-git-x2F-system-change-code-txt-文件"><a href="#2、编写-git-x2F-system-change-code-txt-文件" class="headerlink" title="2、编写 .git/system-change-code.txt 文件"></a>2、编写 .git/system-change-code.txt 文件</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义系统变更号常量(自己维护)</span></span><br><span class="line">systemChangeCode=abc123456</span><br></pre></td></tr></tbody></table></figure><h3 id="3、在-commit-msg-hooks里面载入compose-commit-msg-sh脚本"><a href="#3、在-commit-msg-hooks里面载入compose-commit-msg-sh脚本" class="headerlink" title="3、在 commit-msg hooks里面载入compose-commit-msg.sh脚本"></a>3、在 commit-msg hooks里面载入compose-commit-msg.sh脚本</h3><p>修改 .git/hooks/commit-msg 文件<br>git hooks <a href="https://www.yuque.com/allblue-byynd/izub4k/obh3ns">more</a></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">husky</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入下面代码</span></span><br><span class="line">. "$(dirname "$1")"/compose-commit-msg.sh</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="4、提交测试"><a href="#4、提交测试" class="headerlink" title="4、提交测试"></a>4、提交测试</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">'test: 测试提交'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回车之后，触发钩子，执行脚本，组合提交信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示的信息：</span></span><br><span class="line">[dev 4224456] [abc123456]<span class="built_in">test</span>: 测试提交_dev_xiao</span><br></pre></td></tr></tbody></table></figure><p>测试完成🎈🎈</p><h1 id="友情链接："><a href="#友情链接：" class="headerlink" title="友情链接："></a>友情链接：</h1><p><a href="https://www.yuque.com/xiaojt/py87m6/hgxumq">相关shell脚本</a><br>git commit <a href="https://www.yuque.com/xiaojt/izub4k/gap2yf#YRbth">提交类型</a></p></body></html>]]></content>
    
    
    <summary type="html">编写脚本实现git提交信息的拼接，主要利用git hooks实现。</summary>
    
    
    
    <category term="Git" scheme="https://blog.i-xiao.space/categories/Git/"/>
    
    
    <category term="shell" scheme="https://blog.i-xiao.space/tags/shell/"/>
    
    <category term="git hooks" scheme="https://blog.i-xiao.space/tags/git-hooks/"/>
    
  </entry>
  
  <entry>
    <title>项目进度类知识要点</title>
    <link href="https://blog.i-xiao.space/posts/2947212633.html"/>
    <id>https://blog.i-xiao.space/posts/2947212633.html</id>
    <published>2023-06-02T08:26:47.000Z</published>
    <updated>2023-10-27T05:48:48.505Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="单代号网络图"><a href="#单代号网络图" class="headerlink" title="单代号网络图"></a>单代号网络图</h2><ul><li>六标时法</li><li>正推法</li><li>逆推法</li></ul><table><thead><tr><th align="left">六标时法</th><th align="center"></th><th align="right"></th></tr></thead><tbody><tr><td align="left">最早开始时间(ES)</td><td align="center">工期</td><td align="right">最早完成时间(EF)</td></tr><tr><td align="left"></td><td align="center">活动名称/活动编号</td><td align="right"></td></tr><tr><td align="left">最迟开始时间(LS)</td><td align="center">浮动时间(总时差)</td><td align="right">最迟完成时间(LF)</td></tr></tbody></table><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6479a80ff024cca17389fab9.jpg"></p><h2 id="关键路径、计算项目的总工期"><a href="#关键路径、计算项目的总工期" class="headerlink" title="关键路径、计算项目的总工期"></a>关键路径、计算项目的总工期</h2><ol><li>关键路径是最大长度</li><li>关键路径上的活动是关键活动</li><li>关键活动之和为总工期</li></ol><h2 id="关键路径变化问题"><a href="#关键路径变化问题" class="headerlink" title="关键路径变化问题"></a>关键路径变化问题</h2><p>压缩工期时要注意关键路径的变化问题， 一个项目可以存在1条或多条关键路径。</p><h2 id="标号法求最短最长路径"><a href="#标号法求最短最长路径" class="headerlink" title="标号法求最短最长路径"></a>标号法求最短最长路径</h2><p>类似于贪心算法</p><h2 id="总时差、自由时差"><a href="#总时差、自由时差" class="headerlink" title="总时差、自由时差"></a>总时差、自由时差</h2><p>总时差（总浮动时间），指工序推迟开工而<strong>不会影响总工期</strong>的最大时间。也就是说活动的总时差跟总工期相比较，以自己为参照物的浮动时间。</p><p>自由时差（自由浮动时间），指<strong>不影响紧后活动最早开始时间</strong>的最大时间。与紧后活动相较而言。</p><p>  $$ 总时差 = 最迟 - 最早 （开始或结束） $$<br>  $$自由时差 = min{紧后活动的ES} - 此活动的EF$$</p><ol><li>关键路径上的活动总时差 = 自由时差 = 0</li><li>非关键路径上活动的总时差 = 关键路径长度 - 经过该活动最大非关键路径长度</li><li>非关键路径上活动的自由时差<br>$$非关键活动自由时差=<br>\begin{cases}<br>自由时差 = 总时差&amp;， \text{紧后工作是关键工作}\<br>自由时差 = 0&amp;， \text{紧后工作不是关键工作}\<br>自由时差 = 0&amp;， \text{紧后工作有关键工作和非关键工作}<br>\end{cases}$$</li></ol><h2 id="压缩工期"><a href="#压缩工期" class="headerlink" title="压缩工期"></a>压缩工期</h2><ul><li>压缩关键活动</li><li>压缩可以压缩的活动</li><li>压缩代价最小的活动</li><li>注意压缩后关键路径是否变化</li></ul><h2 id="期望值、标准差、方差、完工概率"><a href="#期望值、标准差、方差、完工概率" class="headerlink" title="期望值、标准差、方差、完工概率"></a>期望值、标准差、方差、完工概率</h2><p>计划评审技术（PERT），又称“三点估算”技术</p><p>$$期望值t_E = \frac{t_o + 4t_m + t_p}{6}$$</p><p>$$标准差σ(西格玛) = \frac{t_p - t_o}{6}$$</p><p>$$方差 = σ^2$$</p><p>$$完工概率 = 每个活动的完工概率相乘$$</p><p>完工概率计算三步走：</p><ol><li>算期望值 $t_E$</li><li>算标准差 $σ$</li><li>画抛物线（正态分布图）</li></ol><p>面积法求完工概率（正态分布，68%，95%，99%）</p><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6479a827f024cca1738a15ed.jpg"></p><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6479a84ef024cca1738a404c.jpg"></p><h2 id="双代号网络图和单代号网络图的区别"><a href="#双代号网络图和单代号网络图的区别" class="headerlink" title="双代号网络图和单代号网络图的区别"></a>双代号网络图和单代号网络图的区别</h2><ol><li><p>箭线：单代号中表示逻辑关系，双代号中表示某项工作</p></li><li><p>节点：单代号中节点表示工作，必须编号；双代号中节点表示事件</p></li><li><p>虚工作： 单代号中没有虚工作，双代号中表示工作的先后顺序。</p></li></ol><h2 id="时标网络图"><a href="#时标网络图" class="headerlink" title="时标网络图"></a>时标网络图</h2><p>时标网络图兼具单代号网络图和横道图的优点，直观易懂。</p><ol><li><p>用箭线表示活动，箭线在水平方向的投影长度表示工序的作业时间</p></li><li><p>用波浪线表示活动与紧后活动的自由时差</p></li><li><p>用虚线表示虚活动（检测点）</p></li><li><p>当实箭线后有波浪线且末端有垂直部分时，垂直部分用实线绘制</p></li></ol><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6479a85ff024cca1738a54d8.jpg"></p><hr><p>我是 <strong>甜点cc</strong>，个人网站(国外站点): <a href="https://blog.i-xiao.space/">https://blog.i-xiao.space/</a></p><p>公众号：【看见另一种可能】</p></body></html>]]></content>
    
    
    <summary type="html">项目进度管理是项目管理中的核心部分，把控进度对项目的成功至关重要，需要掌握工作进度的量化以及计算方法，掌握进度相关的科学知识有助于缩短项目工期，节省成本。</summary>
    
    
    
    <category term="项目管理" scheme="https://blog.i-xiao.space/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="项目进度" scheme="https://blog.i-xiao.space/tags/%E9%A1%B9%E7%9B%AE%E8%BF%9B%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>适应生存</title>
    <link href="https://blog.i-xiao.space/posts/2539184080.html"/>
    <id>https://blog.i-xiao.space/posts/2539184080.html</id>
    <published>2023-05-22T08:35:02.000Z</published>
    <updated>2023-10-27T05:48:48.505Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="沟通技巧"><a href="#沟通技巧" class="headerlink" title="沟通技巧"></a>沟通技巧</h2><ol><li><p>先讲对方想听的</p></li><li><p>再讲对方听得进的</p></li><li><p>再讲你该讲的</p></li><li><p>最后讲你想讲的</p></li></ol><h2 id="有效沟通四部曲"><a href="#有效沟通四部曲" class="headerlink" title="有效沟通四部曲"></a>有效沟通四部曲</h2><ol><li><p>表达你要的，而不是不要的。</p></li><li><p>表达你的感受，而不是情绪。（如：表达自己是愤怒的，而不是愤怒地去表达。）</p></li><li><p>表达你的需求，而不是抱怨。因为有些人是你猜我想要什么？猜不到说明你不在乎我，然后开始抱怨。</p></li><li><p>表达你要去地方向，而不是抱怨你所在地位置。（注意：看目标，而不陷在事件里。）</p></li></ol><h2 id="和领导相处原则"><a href="#和领导相处原则" class="headerlink" title="和领导相处原则"></a>和领导相处原则</h2><ol><li><p>让领导清楚</p><ul><li>工作的进度</li><li>问题的原因</li><li>解决的方法</li><li>风险点要看情况告知（一般领导不想看到）</li></ul></li><li><p>让领导知道</p><ul><li>你不怕困难</li><li>你不怕吃亏</li><li>你不怕麻烦</li></ul></li><li><p>让领导满意</p><ul><li>事前有请示</li><li>事中有汇报</li><li>事后有反馈</li></ul></li></ol><h2 id="功利性社交"><a href="#功利性社交" class="headerlink" title="功利性社交"></a>功利性社交</h2><ol><li><p>要对能够帮得上的人出手大方些。</p></li><li><p>学会溜须拍马，富人一样爱慕虚荣，喜欢听好听的，你要学会嘴甜。</p></li><li><p>朋友先交后用，先把目的隐藏起来。</p></li><li><p>送礼就要送对方轻易买不到的东西，如果感动结交，就让对方感动以后就是兄弟。</p></li><li><p>人家帮了你一定要送礼这是规矩，要让别人知道你是一个会来事的人。</p></li><li><p>不要跨越层级，去找别人送你办事。</p></li></ol><!--平凡的一生盛世的牛马，乱世的炮灰；平安榨其身，战时用其命。--鲁迅--><h2 id="怀才不遇？"><a href="#怀才不遇？" class="headerlink" title="怀才不遇？"></a>怀才不遇？</h2><ul><li><p>注意说话方式，思维方式，</p></li><li><p>把取得的所有成绩归结到老同志的帮助，归结到院领导的关怀，归结到群众对你的支持。</p></li></ul><h2 id="强者思维"><a href="#强者思维" class="headerlink" title="强者思维"></a>强者思维</h2><p>跟任何人保持一定的距离，人们就尊重你了。</p><p>别人说什么，你说考虑一下，这个事儿你不要马上去办，你缓一缓，让他多找你几次，慢慢的大家就开始尊重你了。就是你为难别人，别人就尊重你。你要是不为难别人的话，那么别人是不会尊重你的。</p><p>事缓则圆，语迟则贵，人缓则安。</p><h2 id="工作注意"><a href="#工作注意" class="headerlink" title="工作注意"></a>工作注意</h2><ol><li><p>对于领导的安排，人多的时候要无条件的服从，即使他说的不对。</p></li><li><p>千万不要为了工作和同事闹矛盾，做好自己的事就可以了。（如果真出现矛盾了，要处理好，因为只有在矛盾中才可以看出来一个人）</p></li><li><p>私下经营好与领导的关系，请领导喝酒不必买贵</p></li><li><p>不要背后议论领导，你不知道身边的人和领导是什么关系</p></li><li><p>千万不要和任何人讲自己的过去现在和未来打算</p></li><li><p>饭局上不是上来就谈生意，而是要喝，喝高兴了，生意自然就谈成了（一般情况下不用提生意的事，酒后高兴了，甲方会主动提出把项目交给你做，因为对他们来说项目交给谁做影响不大，交给你只是顺水人情）</p></li><li><p>一定要和人精、有背景的人搞好关系，10年后你会发现好处很多。</p></li><li><p>和别人聊天多聊他有的，而不是自己有的。</p></li></ol></body></html>]]></content>
    
    
    <summary type="html">一场自己的修炼</summary>
    
    
    
    <category term="人" scheme="https://blog.i-xiao.space/categories/%E4%BA%BA/"/>
    
    
    <category term="修炼" scheme="https://blog.i-xiao.space/tags/%E4%BF%AE%E7%82%BC/"/>
    
  </entry>
  
  <entry>
    <title>react-naive工作原理</title>
    <link href="https://blog.i-xiao.space/posts/3691909616.html"/>
    <id>https://blog.i-xiao.space/posts/3691909616.html</id>
    <published>2023-05-22T08:31:12.000Z</published>
    <updated>2023-10-27T05:48:48.505Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>react-naive工作原理是从react的工作原理衍生出来的</p><h2 id="react的工作原理"><a href="#react的工作原理" class="headerlink" title="react的工作原理"></a>react的工作原理</h2><p>在react中，virtual dom 就像一个中间层，介于开发者描述的视图与实际在页面上渲染的视图之间。为了在浏览器上渲染出可交互的用户界面，开发者必须操作浏览器的Dom，这个操作代价昂贵，过度操作dom会给性能带来影响。React 维护了一个内存版本的 DOM，通过计算得出必要的最小操作并重新渲染。如下图：</p><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/646b28dfe03e90d874c5b31b.jpg"></p><p>执行 <code>vdom</code> 的计算（<code>dom diff</code>），减少浏览器DOM的重复渲染<br>对于 Web 环境的react而言，大多数开发者认为 <code>virtual dom</code> 的出现主要是为了<strong>优化性能</strong>。vdom确实能提升性能，但它的主要潜力在于提供了强大的<strong>抽象能力</strong>。在开发者的代码与实际的渲染之间加入一个<strong>抽象层</strong>，这带来了很多<strong>可能性</strong>。稍微想象一下，如果react能够渲染到浏览器以外的其他平台呢？毕竟，react已经“理解”了你的应用应该如何展现。</p><h2 id="React-Native-的工作原理"><a href="#React-Native-的工作原理" class="headerlink" title="React Native 的工作原理"></a>React Native 的工作原理</h2><p>如下图，这就是 <code>React Native</code> 的工作原理。 <code>react native</code> 调用<code>Objective-C</code>的API去渲染iOS组件，调用<code>Java</code>接口去渲染Android组件，而不是渲染到浏览器的DOM上，这使得<code>react native</code> 不同于那些基于web视图的跨平台应用开发方案（各种小程序 uniapp\taro , 适配器转化）。</p><p><code>react可以渲染到多个平台</code><br><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/646b28ebe03e90d874c5be4f.jpg"></p><p><code>Bridge</code>“<strong>桥接</strong>“使这一切成为可能，它使得react可以调用宿主平台开放的UI组件。react组件通过render方法返回了描述界面的标记代码。</p><ol><li><p>web平台: react最终将标记代码解析成浏览器的dom</p></li><li><p>react native中：标记代码会被解析成特定平台的组件</p><ol><li>如<code>&lt;View&gt;</code>组件将会表现为iOS平台的<code>UIView</code></li></ol></li></ol><p><code>react native</code> 目前同时支持iOS和Android两种平台。由于virtual DOM提供了抽象层，<code>react native</code>也可以支持其他平台，只需要提供“<strong>桥接</strong>”即可。</p><h2 id="react-和-react-native-的不同点"><a href="#react-和-react-native-的不同点" class="headerlink" title="react 和 react native 的不同点"></a>react 和 react native 的不同点</h2><h3 id="框架作用的平台不同"><a href="#框架作用的平台不同" class="headerlink" title="框架作用的平台不同"></a>框架作用的平台不同</h3><p><code>RN</code>是由<code>React</code>衍生出来的，两种框架都是用<code>JSX</code>开发语法，但是<code>RN</code>是用来开发真正原生渲染的iOS和Andriod移动应用的JS框架，而React是将浏览器作为渲染平台。</p><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/646b2904e03e90d874c5ec24.jpg"></p><h3 id="工作原理不同"><a href="#工作原理不同" class="headerlink" title="工作原理不同"></a>工作原理不同</h3><p>上面总结的工作原理</p><h3 id="渲染周期"><a href="#渲染周期" class="headerlink" title="渲染周期"></a>渲染周期</h3><p>react 组件挂载过程　－＞　重新渲染过程。</p><ol><li><p><code>React</code>的渲染周期开始于react组件挂载到DOM之后，接着React进入渲染周期并根据需要渲染组件。在渲染阶段，<strong>React将开发者在return中返回的HTML标记直接按需渲染到页面上</strong>。</p></li><li><p><code>React Native</code>生命周期与React基本相同，在渲染上因为<code>React Native</code><strong>依赖于桥接</strong>，并<strong>不在UI主线程运行</strong>，它可以在不影响用户体验的前提下执行这些异步调用。</p></li></ol><h3 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h3><p>当编写Web环境的React的时候，视图最终需要渲染成普通的HTML元素；</p><p>而在React Native中，所有元素都会被平台指定的React组件替换，例如在iOS中，<code>&lt;View&gt;</code>组件被渲染成<code>UIView</code>，而在Android平台，会被渲染成<code>View</code>。</p><h3 id="原生的样式"><a href="#原生的样式" class="headerlink" title="原生的样式"></a>原生的样式</h3><p>在Web中，使用CSS样式为React组件添加样式已经是开发过程中不可获取的一部分了。React通常不影响我们编写CSS的方式，并且它确实让样式的动态创建更加容易（通过state和props），除此之外，React基本上不关心我们如何处理样式的。<br>非Web平台上有大量的方法来处理布局和样式.</p><p>我们使用<code>React Native</code>时，只需要用一种<strong>标准的方法</strong>来处理样式，React和宿主平台之间的桥接包含了一个缩减版CSS子集的实现，这个CSS子集主要通过<strong>flexbox</strong>进行布局，做到了尽量简化，而不是去实现所有的CSS规则。有别于Web平台，CSS的支持程度因浏览器而不同，React Native则做到了样式规则的一致。</p><h3 id="宿主平台接口"><a href="#宿主平台接口" class="headerlink" title="宿主平台接口"></a>宿主平台接口</h3><p>数据存储、地理服务、操控硬件设备</p><hr><p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a>☭</p><p>公众号：【看见另一种可能】</p></body></html>]]></content>
    
    
    <summary type="html">react-naive工作原理是从react的工作原理衍生出来的，核心是Bridge桥接、vDom。</summary>
    
    
    
    <category term="React Native" scheme="https://blog.i-xiao.space/categories/React-Native/"/>
    
    
    <category term="React Native" scheme="https://blog.i-xiao.space/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native项目设置路径别名</title>
    <link href="https://blog.i-xiao.space/posts/984917644.html"/>
    <id>https://blog.i-xiao.space/posts/984917644.html</id>
    <published>2023-05-22T08:29:52.000Z</published>
    <updated>2023-10-27T05:48:48.501Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>没有设置路径别名之前代码是这样的：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { px2dp } <span class="keyword">from</span> <span class="string">'../../utils/screenKits'</span>;</span><br></pre></td></tr></tbody></table></figure><p>路径相当冗长，看着就头疼。增加了路径别名之后，变成这样</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { px2dp } <span class="keyword">from</span> <span class="string">'~/utils/screenKits'</span>;</span><br></pre></td></tr></tbody></table></figure><p>心里清爽多了！<br>具体操作见下文，实操性强！</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>这里我选用 <a href="https://github.com/entwicklerstube/babel-plugin-root-import"><strong>babel-plugin-root-import</strong></a>插件，主要是方便，不需要再为了 <code>eslint</code> 不识别 ‘@’ 而增加配置。</p><p>这个<a href="https://links.jianshu.com/go?to=https://github.com/tleunen/babel-plugin-module-resolver">babel-plugin-module-resolver</a>插件，也可以，但是需要处理 eslint 的配置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-plugin-root-import --dev</span><br></pre></td></tr></tbody></table></figure><h2 id="修改babel-config-js"><a href="#修改babel-config-js" class="headerlink" title="修改babel.config.js"></a>修改babel.config.js</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">'module:metro-react-native-babel-preset'</span>],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [<span class="string">'@babel/plugin-proposal-decorators'</span>, { <span class="attr">legacy</span>: <span class="literal">true</span> }], <span class="comment">// mbox</span></span><br><span class="line">    <span class="comment">// ['react-native-reanimated/plugin'],</span></span><br><span class="line">    [</span><br><span class="line">      <span class="string">'babel-plugin-root-import'</span>,</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">paths</span>: [</span><br><span class="line">          {</span><br><span class="line">            <span class="attr">rootPathSuffix</span>: <span class="string">'./src'</span>,</span><br><span class="line">            <span class="attr">rootPathPrefix</span>: <span class="string">'~/'</span>, <span class="comment">// 使用 ~/  代替 ./src (~指向的就是src目录)</span></span><br><span class="line">          },</span><br><span class="line">          {</span><br><span class="line">            <span class="attr">rootPathSuffix</span>: <span class="string">'./src/utils'</span>,</span><br><span class="line">            <span class="attr">rootPathPrefix</span>: <span class="string">'!/'</span>,</span><br><span class="line">          },</span><br><span class="line">        ],</span><br><span class="line">      },</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="修改import路径测试"><a href="#修改import路径测试" class="headerlink" title="修改import路径测试"></a>修改import路径测试</h2><h2 id="清除rn缓存并重新启动项目"><a href="#清除rn缓存并重新启动项目" class="headerlink" title="清除rn缓存并重新启动项目"></a>清除rn缓存并重新启动项目</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn clear-run</span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">"scripts"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"android"</span><span class="punctuation">:</span> <span class="string">"react-native run-android"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"ios"</span><span class="punctuation">:</span> <span class="string">"react-native run-ios"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"start"</span><span class="punctuation">:</span> <span class="string">"react-native start"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"test"</span><span class="punctuation">:</span> <span class="string">"jest"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"lint"</span><span class="punctuation">:</span> <span class="string">"npx eslint --ext .js,.jsx,.ts,.tsx ./src"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"lint:fix"</span><span class="punctuation">:</span> <span class="string">"npx eslint --fix ."</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"check"</span><span class="punctuation">:</span> <span class="string">"lint-staged"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"format"</span><span class="punctuation">:</span> <span class="string">"prettier --write 'src/**/*.js'"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"prettier"</span><span class="punctuation">:</span> <span class="string">"npx prettier --write ."</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"prepare"</span><span class="punctuation">:</span> <span class="string">"husky install"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"clear"</span><span class="punctuation">:</span> <span class="string">"yarn cache clean"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"clear-run"</span><span class="punctuation">:</span> <span class="string">"react-native start --reset-cache"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"del"</span><span class="punctuation">:</span> <span class="string">"rimraf node_modules yarn.lock"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure><p>可以看到项目可以正常启动、正常运行</p><h2 id="👉修复函数跳转到定义功能"><a href="#👉修复函数跳转到定义功能" class="headerlink" title="👉修复函数跳转到定义功能"></a>👉修复函数跳转到定义功能</h2><p>配置vscode： <a href="https://code.visualstudio.com/docs/languages/jsconfig">https://code.visualstudio.com/docs/languages/jsconfig</a><br>再项目根目录增加 <code>jsconfig.json</code> 文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="string">"compilerOptions"</span>: {</span><br><span class="line">    <span class="string">"baseUrl"</span>: <span class="string">"."</span>, <span class="comment">// 基础目录</span></span><br><span class="line">    <span class="string">"paths"</span>: { <span class="comment">//  指定相对于 baseUrl 选项计算的路径映射, 别名路径也可以跳转</span></span><br><span class="line">      <span class="string">"~/*"</span>: [</span><br><span class="line">        <span class="string">"src/*"</span></span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>这个配置是针对编辑器的，不用重启项目，配置即生效</strong></p><hr><p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a>☭</p><p>公众号：【看见另一种可能】</p></body></html>]]></content>
    
    
    <summary type="html">设置路径别名让代码引用变得更加简洁</summary>
    
    
    
    <category term="React Native" scheme="https://blog.i-xiao.space/categories/React-Native/"/>
    
    
    <category term="React Native" scheme="https://blog.i-xiao.space/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>element-ui 日期范围组件，时间跨度不能超过一年</title>
    <link href="https://blog.i-xiao.space/posts/2990280294.html"/>
    <id>https://blog.i-xiao.space/posts/2990280294.html</id>
    <published>2023-05-10T04:43:34.000Z</published>
    <updated>2023-10-27T05:48:48.501Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>日期范围的筛选，开始日期和结束日期不能超过1年（1年固定按365天计算），并且在选定一个时间的时候计算可选的日期范围，不在范围内的日期要置灰不可选中。如下图：<br><img data-src="/images/base/loading03.svg" data-original="https://pic2.imgdb.cn/item/645b216a0d2dde57772df748.jpg"><br>查看<code>element-ui</code>中<code>DatePicker</code>组件的<code>属性、事件、方法</code>，发现组件提供了<code>Picker Options</code>属性配置项<br><img data-src="/images/base/loading03.svg" data-original="https://pic2.imgdb.cn/item/645b218a0d2dde57772e14fd.jpg"><br>使用<code>disabledDate</code>和<code>onPick</code>配置项</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>这里有一个需要注意的点，可选择的日期范围是根据用户选择的第一个日期动态计算出来的，所以，我们应该吧Picker Options放到计算属性<code>computed</code>中返回。</p><p>下面展示我的日期范围筛选的基础控件代码（该控件集成在业务架构中，无关代码可自行忽略，可直接定位到<code>pickerOptions</code>部分）</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">ref</span>=<span class="string">"form"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:rules</span>=<span class="string">"rules"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:model</span>=<span class="string">"controlForm"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:label-width</span>=<span class="string">"itemData.labelWidth"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:label-position</span>=<span class="string">"itemData.labelPosition"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-form-item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:label</span>=<span class="string">"itemData.showLabel ? itemData.fieldLabel : ''"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:prop</span>=<span class="string">"propName"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-date-picker</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:style</span>=<span class="string">"{ width: itemData.rightWidth }"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">v-model</span>=<span class="string">"controlForm.value"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:format</span>=<span class="string">"itemData.format || 'yyyy-MM-dd'"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:value-format</span>=<span class="string">"itemData.format || 'yyyyMMdd'"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">align</span>=<span class="string">"right"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">"daterange"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">unlink-panels</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">range-separator</span>=<span class="string">"至"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">start-placeholder</span>=<span class="string">"开始日期"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">end-placeholder</span>=<span class="string">"结束日期"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:picker-options</span>=<span class="string">"pickerOptions"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:readonly</span>=<span class="string">"isDisable"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:editable</span>=<span class="string">"itemData.editable"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:clearable</span>=<span class="string">"!itemData.required"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        @<span class="attr">change</span>=<span class="string">"handleChange"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">"moment"</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> { isObject, getWeekStartDate, getWeekEndDate } <span class="keyword">from</span> <span class="string">'@/libs/utils'</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">'Control-RangeDate'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">itemData</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">Object</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="function">() =&gt;</span> { }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: {},</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isDisable</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">controlForm</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">value</span>: <span class="string">''</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">rules</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">value</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">required</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">message</span>: <span class="string">`请选择<span class="subst">${<span class="variable language_">this</span>.itemData.placeholder || <span class="variable language_">this</span>.itemData.fieldLabel}</span>`</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">trigger</span>: <span class="string">'blur'</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">pickTime</span>: <span class="literal">null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">propName</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> name = <span class="string">''</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">isNotNull</span> === <span class="number">1</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        name = <span class="string">'value'</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> name</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// pick-option 采用计算属性的方式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">pickerOptions</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> _this = <span class="variable language_">this</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">disabledDate</span>(<span class="params">time</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (_this.<span class="property">pickTime</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> curTime = <span class="title function_">moment</span>(<span class="title function_">moment</span>(_this.<span class="property">pickTime</span>).<span class="title function_">format</span>(<span class="string">'YYYY-MM-DD'</span>)).<span class="title function_">valueOf</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// pickTime 前后 365 天 &amp;&amp; 不大于今天</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>(curTime - <span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">365</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> end = <span class="keyword">new</span> <span class="title class_">Date</span>(curTime + <span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">365</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> time.<span class="title function_">getTime</span>() &gt; <span class="title class_">Date</span>.<span class="title function_">now</span>() || time.<span class="title function_">getTime</span>() &lt; start || time.<span class="title function_">getTime</span>() &gt; end</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> time.<span class="title function_">getTime</span>() &gt; <span class="title class_">Date</span>.<span class="title function_">now</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">onPick</span>(<span class="params">{ maxDate, minDate }</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (!maxDate) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            _this.<span class="property">pickTime</span> = minDate</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">shortcuts</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">text</span>: <span class="string">'今天'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">onClick</span>(<span class="params">picker</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> end = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">setHours</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              picker.$emit(<span class="string">'pick'</span>, [start, end])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">text</span>: <span class="string">'昨天'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">onClick</span>(<span class="params">picker</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> end = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">setHours</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)) - <span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              end.<span class="title function_">setTime</span>(start.<span class="title function_">getTime</span>() + (<span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">1</span> - <span class="number">1</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              picker.$emit(<span class="string">'pick'</span>, [start, end])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">text</span>: <span class="string">'本周'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">onClick</span>(<span class="params">picker</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">let</span> end = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">let</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              start = <span class="title function_">getWeekStartDate</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              end = <span class="title function_">getWeekEndDate</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              end.<span class="title function_">setTime</span>(end.<span class="title function_">getTime</span>() + (<span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">1</span> - <span class="number">1</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              picker.$emit(<span class="string">'pick'</span>, [start, end])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">text</span>: <span class="string">'最近一周'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">onClick</span>(<span class="params">picker</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> end = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              start.<span class="title function_">setTime</span>(start.<span class="title function_">getTime</span>() + (<span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">7</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              picker.$emit(<span class="string">'pick'</span>, [start, end])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">text</span>: <span class="string">'最近一个月'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">onClick</span>(<span class="params">picker</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> end = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              start.<span class="title function_">setTime</span>(start.<span class="title function_">getTime</span>() + (<span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">30</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              picker.$emit(<span class="string">'pick'</span>, [start, end])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">text</span>: <span class="string">'最近三个月'</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">onClick</span>(<span class="params">picker</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> end = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              start.<span class="title function_">setTime</span>(start.<span class="title function_">getTime</span>() + (<span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">90</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              picker.$emit(<span class="string">'pick'</span>, [start, end])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">watch</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">itemData</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">handler</span>(<span class="params">newV</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">isDisable</span> = newV.<span class="property">readonly</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">deep</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">immediate</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) { },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) { },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 移除校验</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">clearVerify</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">form</span>.<span class="title function_">clearValidate</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 初始化带入值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">initVal</span>(<span class="params">obj = {}</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">clearVerify</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (<span class="title function_">isObject</span>(obj)) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">controlForm</span>.<span class="property">value</span> = obj[<span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">fieldName</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">controlData</span> = obj[<span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">fieldName</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// this.$emit('update:controlData', obj[this.itemData.fieldName])</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 初始化默认值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">updata</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">clearVerify</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">controlForm</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">defaultValue</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">controlData</span> = <span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">defaultValue</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 重置 - 恢复成默认值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">reset</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">controlForm</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">defaultValue</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">controlData</span> = <span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">defaultValue</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleChange</span>(<span class="params">val</span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">itemData</span>.<span class="property">controlData</span> = val</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">'update:controlData'</span>, val || <span class="string">''</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">verifyForm</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> isPass = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">form</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (!valid) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          isPass = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      })</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> isPass</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">updated</span>(<span class="params"></span>) { },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>) { },</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">'less'</span> <span class="attr">rel</span>=<span class="string">'stylesheet/less'</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="keyword">@import</span> <span class="string">"../common.less"</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="主要代码解析"><a href="#主要代码解析" class="headerlink" title="主要代码解析"></a>主要代码解析</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="title function_">disabledDate</span>(<span class="params">time</span>) {</span><br><span class="line">    <span class="keyword">if</span> (_this.<span class="property">pickTime</span>) {</span><br><span class="line">      <span class="keyword">const</span> curTime = <span class="title function_">moment</span>(<span class="title function_">moment</span>(_this.<span class="property">pickTime</span>).<span class="title function_">format</span>(<span class="string">'YYYY-MM-DD'</span>)).<span class="title function_">valueOf</span>();</span><br><span class="line">      <span class="comment">// pickTime 前后 365 天 &amp;&amp; 不大于今天</span></span><br><span class="line">      <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>(curTime - <span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">365</span>)</span><br><span class="line">      <span class="keyword">const</span> end = <span class="keyword">new</span> <span class="title class_">Date</span>(curTime + <span class="number">3600</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">365</span>)</span><br><span class="line">      <span class="keyword">return</span> time.<span class="title function_">getTime</span>() &gt; <span class="title class_">Date</span>.<span class="title function_">now</span>() || time.<span class="title function_">getTime</span>() &lt; start || time.<span class="title function_">getTime</span>() &gt; end</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> time.<span class="title function_">getTime</span>() &gt; <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">  },</span><br><span class="line">  <span class="title function_">onPick</span>(<span class="params">{ maxDate, minDate }</span>) {</span><br><span class="line">    <span class="keyword">if</span> (!maxDate) {</span><br><span class="line">      _this.<span class="property">pickTime</span> = minDate</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通过<code>onPick</code>回调函数可以拿到选中的日期<code>pickTime</code>，然后在<code>disabledDate</code>属性中计算并返回可选的日期范围，主要还是依赖<code>computed</code>的计算属性，依赖的<code>data</code>属性发生变化后会重新计算。</p></body></html>]]></content>
    
    
    <summary type="html">日期范围的筛选，开始日期和结束日期不能超过1年（1年固定按365天计算），并且在选定一个时间的时候计算可选的日期范围，不在范围内的日期要置灰不可选中</summary>
    
    
    
    <category term="前端" scheme="https://blog.i-xiao.space/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="element-ui" scheme="https://blog.i-xiao.space/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>将进酒</title>
    <link href="https://blog.i-xiao.space/posts/1470090403.html"/>
    <id>https://blog.i-xiao.space/posts/1470090403.html</id>
    <published>2023-04-18T05:03:34.000Z</published>
    <updated>2023-10-27T05:48:48.505Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>《将进酒》——李白</p><p>君不见黄河之水天上来，奔流到海不复回。</p><p>君不见高堂明镜悲白发，朝如青丝暮成雪。</p><p>人生得意须尽欢，莫使金樽空对月。</p><p>天生我材必有用，千金散尽还复来。</p><p>烹羊宰牛且为乐，会须一饮三百杯。</p><p>岑夫子，丹丘生，将进酒，杯莫停。</p><p>与君歌一曲，请君为我倾耳听。</p><p>钟鼓馔玉不足贵，但愿长醉不愿醒。</p><p>古来圣贤皆寂寥，惟有饮者留其名。</p><p>陈王昔时宴平乐，斗酒十千恣欢谑。</p><p>主人何为言少钱，径须沽取对君酌。</p><p>五花马、千金裘，呼儿将出换美酒，与尔同销万古愁。</p><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/643e24c10d2dde5777443fa3.jpg"></p><p>诗中交织着失望与自信、悲愤与抗争的情怀，体现出诗人强烈的<strong>豪迈、狂放、洒脱</strong>的个性。</p><p>全诗情感饱满、笔墨酣畅、抒情有力，在结构上大开大阖，张弛有度，充分体现了李白七言歌行的豪放特色。</p></body></html>]]></content>
    
    
    <summary type="html">《将进酒》——李白</summary>
    
    
    
    <category term="语言" scheme="https://blog.i-xiao.space/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="诗词" scheme="https://blog.i-xiao.space/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>前端架构工作</title>
    <link href="https://blog.i-xiao.space/posts/3733133858.html"/>
    <id>https://blog.i-xiao.space/posts/3733133858.html</id>
    <published>2023-04-18T05:00:32.000Z</published>
    <updated>2023-10-27T05:48:48.505Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><blockquote><p>工作中所涉及到的工作，也有一些PM的工作，比如：协调人员、拆分任务并分配给相关人员，把控工作进度、评审、变更管理等等。</p></blockquote><ol><li><p>项目立项，资源申请（服务器资源、人员）</p></li><li><p>需求评审（业需、软需）</p></li><li><p>接口文档、技术详设、功能点拆分、测试用例（概要设计、详细设计）</p></li><li><p>分支模型，版本控制（回滚机制）</p></li><li><p>技术选型，ui库, css编写BEM规范</p></li><li><p>代码风格、开发流程约束 eslint - sonarqube</p><ol><li><a href="https://www.yuque.com/allblue-byynd/izub4k/obh3ns">代码风格</a> eslint stylelint prettier</li><li><a href="https://www.yuque.com/allblue-byynd/izub4k/zmxgt9">开发流程约束</a> commitlint</li></ol></li><li><p>基础框架搭建+业务框架+<strong>可插拔组件</strong>设计</p><ul><li><p>全局状态管理（vuex模块化封装）</p></li><li><p>axios封装，接口鉴权，aes+rsa数据传输加解密，异常处理机制，重发控制</p></li><li><p>静态资源、iconfont等</p></li><li><p>工具函数封装，自定义指令、mixin等</p></li><li><p>换肤功能设计</p></li><li><p>路由权限、404、loading以及空页面配置，路由模块化配置，设置kepp-alive配置项</p></li><li><p>用户角色、菜单权限配置、控制点管理、业务字典配置</p></li><li><p>移动端适配、title展示、返回逻辑控制、右上角扩展操作配置</p></li><li><p>IE兼容处理，babel,es6-promise, babel-polyfill</p></li></ul></li><li><p>跟后端约定接口入参返参，开发环境<strong>mock</strong>数据</p></li><li><p>代码评审（走查）（新功能代码评审）</p></li><li><p>打包优化配置（webpack）</p></li><li><p><strong>安全加固</strong></p></li><li><p>操作<strong>日志</strong>分类统计</p></li><li><p><strong>CI/CD</strong></p></li><li><p><strong>docker</strong>部署</p></li><li><p><strong>nginx</strong>配置，反向代理、动静分离、负载均衡</p></li><li><p><strong>灰度发布，白名单</strong></p></li><li><p>…</p></li></ol><hr><p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc☭</strong></a></p><p>公众号：【看见另一种可能】</p><p>专注前端开发，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p></body></html>]]></content>
    
    
    <summary type="html">我所涉及到的工作，也有一些PM的工作，比如：协调人员、拆分任务并分配给相关人员，把控工作进度、评审、变更管理等等。</summary>
    
    
    
    <category term="架构" scheme="https://blog.i-xiao.space/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="前端架构" scheme="https://blog.i-xiao.space/tags/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>因为我们来过</title>
    <link href="https://blog.i-xiao.space/posts/2504097492.html"/>
    <id>https://blog.i-xiao.space/posts/2504097492.html</id>
    <published>2023-04-18T04:50:51.000Z</published>
    <updated>2023-10-27T05:48:48.505Z</updated>
    
    <content type="html"><![CDATA[<!---我生来就是高山而非溪流，我欲于群峰之巅俯视平庸的沟壑。我生来就是人杰而非草芥，我站在伟人之肩藐视卑微的懦夫！“在等待的日子里，刻苦读书，谦卑做人，养得深根，日后才能枝叶茂盛。”——星云大师---><html><head></head><body><p>“我们走后，他们会给你们修学校和医院，会提高你们的工资，这不是因为他们良心发现，也不是因为他们变成了好人，而是因为我们来过。”</p><p style="text-align: right">——切·格瓦拉</p><p></p><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/643e22c00d2dde577741edb4.jpg"></p><p>他自称是毛泽东主席的小学生，实践并发扬游击战理论，一个浪漫的革命者、领袖。</p><p>带领本国民众取得革命胜利后，又只身远赴非洲支援国际无产阶级革命，继续革命，继续解放群众。</p></body></html>]]></content>
    
    
    <summary type="html">我们走后，他们会给你们修学校和医院，会提高你们的工资，这不是因为他们良心发现，也不是因为他们变成了好人，而是因为我们来过。</summary>
    
    
    
    <category term="人" scheme="https://blog.i-xiao.space/categories/%E4%BA%BA/"/>
    
    
    <category term="人物" scheme="https://blog.i-xiao.space/tags/%E4%BA%BA%E7%89%A9/"/>
    
  </entry>
  
  <entry>
    <title>远程主机标识已更改！</title>
    <link href="https://blog.i-xiao.space/posts/476756465.html"/>
    <id>https://blog.i-xiao.space/posts/476756465.html</id>
    <published>2023-04-07T07:17:58.000Z</published>
    <updated>2023-10-27T05:48:48.505Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>好久没有更新的 blog ，今天更新了一篇文章，发现推送到 github 上的时候，显示了一个告警信息，导致推送失败，具体原因如下：</p><p>我是使用的ssh，跟远程仓库链接</p><figure class="highlight gauss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PS D:\mine-project\blog&gt; git <span class="keyword">push</span></span><br><span class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@</span></span><br><span class="line"><span class="comment">@</span>    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     <span class="comment">@</span></span><br><span class="line"><span class="comment">@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right <span class="built_in">now</span> (man-in-the-middle attack)!</span><br><span class="line">It is also possible that a host <span class="built_in">key</span> has just been changed.</span><br><span class="line">The fingerprint <span class="keyword">for</span> the RSA key sent by the remote host is</span><br><span class="line">SHA256:uNiVztksCsDhcc0u9e8BujQXVUpKZIDTMczCvj3tD2s.</span><br><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key in /c/Users/xiao/.ssh/known_hosts to get rid of this message.</span><br><span class="line">Offending RSA key in /c/Users/xiao/.ssh/known_hosts:5</span><br><span class="line">RSA host key <span class="keyword">for</span> github.com has changed and you have requested strict checking.</span><br><span class="line">Host key verification failed.</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">PS D:\mine-project\blog&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ul><li>WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</li><li>警告：远程主机标识已更改！</li></ul><p>此报错是由于远程的主机的公钥发生了变化导致的。<br>ssh服务是通过公钥和私钥来进行连接的，它会把每个曾经访问过计算机或服务器的公钥（public key），记录在~/.ssh/known_hosts 中，当下次访问曾经访问过的计算机或服务器时，ssh就会核对公钥，如果和上次记录的不同，OpenSSH会发出警告。<br>解决</p><ol><li>使用命令清除所连接的IP或域名<figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -R XX<span class="selector-class">.XX</span><span class="selector-class">.XX</span><span class="selector-class">.XX</span> (或者域名)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight livescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS C:<span class="string">\Users\xiao\.ssh&gt;</span> ssh-keygen -R github.com</span><br><span class="line"><span class="comment"># Host github.com found: line 5</span></span><br><span class="line">C:<span class="string">\Users\xiao/.ssh/known_hosts</span> updated.</span><br><span class="line">Original contents retained <span class="keyword">as</span> C:<span class="string">\Users\xiao/.ssh/known_hosts.old</span></span><br><span class="line">PS C:<span class="string">\Users\xiao\.ssh&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><p>执行完这条命令，就会删除 <code>known_hosts</code> 文件里的关于 <code>github.com</code> 的记录</p><ol start="2"><li>当重新链接 github.com 的主机时，会重新生成指纹，建立链接。<figure class="highlight vbnet"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PS D:\mine-project\blog&gt; git push</span><br><span class="line">The authenticity <span class="keyword">of</span> host <span class="comment">'github.com (20.205.243.166)' can't be established.</span></span><br><span class="line">ECDSA <span class="keyword">key</span> fingerprint <span class="built_in">is</span> SHA256:p2QAMXNIC1TJYWeIOttrVc98/R1BUFWu3/LiyKgUfQM.</span><br><span class="line">Are you sure you want <span class="keyword">to</span> <span class="keyword">continue</span> connecting (yes/no/[fingerprint])? yes</span><br></pre></td></tr></tbody></table></figure></li></ol><p>打开 <code>known_hosts</code> 文件，可以看到以及重新添加了<code>github</code> 的记录</p><p><img data-src="/images/base/loading03.svg" data-original="https://files.mdnice.com/user/34064/e4179b79-acb9-469d-b0ba-fccfb985e6b3.png"></p><p>关于SSH更多请点击：<a href="https://www.yuque.com/xiaojt/izub4k/ys893v">常用的SSH，你了解多少？</a></p></body></html>]]></content>
    
    
    <summary type="html">REMOTE HOST IDENTIFICATION HAS CHANGED!</summary>
    
    
    
    <category term="SSH" scheme="https://blog.i-xiao.space/categories/SSH/"/>
    
    
    <category term="SSH" scheme="https://blog.i-xiao.space/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>现值</title>
    <link href="https://blog.i-xiao.space/posts/4284137303.html"/>
    <id>https://blog.i-xiao.space/posts/4284137303.html</id>
    <published>2023-04-07T04:56:13.000Z</published>
    <updated>2023-10-27T05:48:48.505Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h3 id="计算多期中现值的公式为："><a href="#计算多期中现值的公式为：" class="headerlink" title="计算多期中现值的公式为："></a>计算<strong>多期中现值</strong>的公式为：</h3><p>$$PV,= ,\frac{FV}{(1+r)^t}$$</p><blockquote><p>PV: 现值；</p><p>FV: 终值；</p><p>t: 年数；</p><p>r: 利率；</p><p>$(1+r)^t$: 复利终值系数，折现率越高，复利终值系数越高。</p><p>$(1+r)^{-t}$: 复利现值系数，折现率越高，复利现值系数越低。</p></blockquote><p><strong>净现值</strong>（NPV）是指一个项目预期实现的现金流入的现值与实施该项计划的现金支出的差额。</p><p>$净现值 = 现金流入 - 现金支出$</p><h3 id="怎么判断项目是否可以做？"><a href="#怎么判断项目是否可以做？" class="headerlink" title="怎么判断项目是否可以做？"></a>怎么判断项目是否可以做？</h3><ul><li><p>当净现值（NPV）大于0时，项目可行，反之不可行；</p></li><li><p>内部报酬率（IRR）大于融资成本时，项目可行。</p></li></ul></body></html>]]></content>
    
    
    <summary type="html">怎么计算多期中的现值，以及怎么判断项目是否可以投资。</summary>
    
    
    
    <category term="金融" scheme="https://blog.i-xiao.space/categories/%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="金融" scheme="https://blog.i-xiao.space/tags/%E9%87%91%E8%9E%8D/"/>
    
  </entry>
  
  <entry>
    <title>git代码数据统计</title>
    <link href="https://blog.i-xiao.space/posts/389559366.html"/>
    <id>https://blog.i-xiao.space/posts/389559366.html</id>
    <published>2022-12-23T08:53:34.000Z</published>
    <updated>2023-10-27T05:48:48.501Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="gitbash-终端执行如下命令"><a href="#gitbash-终端执行如下命令" class="headerlink" title="gitbash 终端执行如下命令"></a>gitbash 终端执行如下命令</h2><ol><li><p>查看git上的个人代码量（username为gitlab的账户名）：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --author=<span class="string">"username"</span> --pretty=tformat: --numstat | awk <span class="string">'{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc }'</span> -</span><br></pre></td></tr></tbody></table></figure></li><li><p>统计每个人的增删行数：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --format=<span class="string">'%aN'</span> | <span class="built_in">sort</span> -u | <span class="keyword">while</span> <span class="built_in">read</span> name; <span class="keyword">do</span> <span class="built_in">echo</span> -en <span class="string">"<span class="variable">$name</span>\t"</span>; git <span class="built_in">log</span> --author=<span class="string">"<span class="variable">$name</span>"</span> --pretty=tformat: --numstat | awk <span class="string">'{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc }'</span> -; <span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>统计某段时间内所有人的代码量（修改起止时间，如果指定某一个人，将name更换为gitlab的账户名）：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --format=<span class="string">'%aN'</span> | <span class="built_in">sort</span> -u | <span class="keyword">while</span> <span class="built_in">read</span> name; <span class="keyword">do</span> <span class="built_in">echo</span> -en <span class="string">"<span class="variable">$name</span>\t"</span>; git <span class="built_in">log</span> --author=<span class="string">"<span class="variable">$name</span>"</span> --pretty=tformat: --since ==2021–10-01 --until=2021-10-30 --numstat | awk <span class="string">'{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc }'</span> -; <span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>查看仓库提交者排名前5：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=<span class="string">'%aN'</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -k1 -n -r | <span class="built_in">head</span> -n 5</span><br></pre></td></tr></tbody></table></figure></li><li><p>贡献值统计：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=<span class="string">'%aN'</span> | <span class="built_in">sort</span> -u | <span class="built_in">wc</span> -l</span><br></pre></td></tr></tbody></table></figure></li><li><p>提交数统计：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline | <span class="built_in">wc</span> -l</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="git-log参数说明"><a href="#git-log参数说明" class="headerlink" title="git log参数说明"></a>git log参数说明</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">--author   指定作者</span><br><span class="line">--<span class="built_in">stat</span>   显示每次更新的文件修改统计信息，会列出具体文件列表</span><br><span class="line">--shortstat    统计每个commit 的文件修改行数，包括增加，删除，但不列出文件列表：</span><br><span class="line">--numstat   统计每个commit 的文件修改行数，包括增加，删除，并列出文件列表：</span><br><span class="line"></span><br><span class="line">-p 选项展开显示每次提交的内容差异，用-2 则仅显示最近的两次更新,例如：git <span class="built_in">log</span> -p  -2</span><br><span class="line">--name-only 仅在提交信息后显示已修改的文件清单</span><br><span class="line">--name-status 显示新增、修改、删除的文件清单</span><br><span class="line">--abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符</span><br><span class="line">--relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）</span><br><span class="line">--graph 显示 ASCII 图形表示的分支合并历史</span><br><span class="line">--pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）,例如： git <span class="built_in">log</span> --pretty=oneline ; git <span class="built_in">log</span> --pretty=short ; git <span class="built_in">log</span> --pretty=full ; git <span class="built_in">log</span> --pretty=fuller</span><br><span class="line">--pretty=tformat:   可以定制要显示的记录格式，这样的输出便于后期编程提取分析</span><br><span class="line">       例如：git <span class="built_in">log</span> --pretty=format:<span class="string">""</span>%h - %an, %ar : %s<span class="string">""</span></span><br><span class="line">       下面列出了常用的格式占位符写法及其代表的意义。</span><br><span class="line">       选项       说明</span><br><span class="line">       %H      提交对象（commit）的完整哈希字串</span><br><span class="line">       %h      提交对象的简短哈希字串</span><br><span class="line">       %T      树对象（tree）的完整哈希字串</span><br><span class="line">       %t      树对象的简短哈希字串</span><br><span class="line">       %P      父对象（parent）的完整哈希字串</span><br><span class="line">       %p      父对象的简短哈希字串</span><br><span class="line">       %an     作者（author）的名字</span><br><span class="line">       %ae     作者的电子邮件地址</span><br><span class="line">       %ad     作者修订日期（可以用 -<span class="built_in">date</span>= 选项定制格式）</span><br><span class="line">       %ar     作者修订日期，按多久以前的方式显示</span><br><span class="line">       %cn     提交者(committer)的名字</span><br><span class="line">       %ce     提交者的电子邮件地址</span><br><span class="line">       %<span class="built_in">cd</span>     提交日期</span><br><span class="line">       %cr     提交日期，按多久以前的方式显示</span><br><span class="line">       %s      提交说明</span><br><span class="line"></span><br><span class="line">--since  限制显示输出的范围，</span><br><span class="line">       例如： git <span class="built_in">log</span> --since=2.weeks    显示最近两周的提交</span><br><span class="line">       选项 说明</span><br><span class="line">       -(n)    仅显示最近的 n 条提交</span><br><span class="line">       --since, --after 仅显示指定时间之后的提交。</span><br><span class="line">       --until, --before 仅显示指定时间之前的提交。</span><br><span class="line">       --author 仅显示指定作者相关的提交。</span><br><span class="line">       --committer 仅显示指定提交者相关的提交。</span><br></pre></td></tr></tbody></table></figure><h2 id="其它统计方式"><a href="#其它统计方式" class="headerlink" title="其它统计方式"></a>其它统计方式</h2><ol><li>工具、插件统计：gitstats、cloc</li><li>python统计</li><li>还有用接口统计的</li><li>……</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>通过 Git log 统计，稍微会麻烦一些，需要有一些 awk 知识的储备；</li><li>使用插件 git_stats 来生成可视化报告，对用户友好。美中不足就是会在当前项目增加很多 html 统计可视化文件；</li><li>命令行工具 cloc，简单易用，无侵入，使用门槛低；</li></ul></body></html>]]></content>
    
    
    <summary type="html">统计代码提交量、贡献值等等，方便实用</summary>
    
    
    
    <category term="Git" scheme="https://blog.i-xiao.space/categories/Git/"/>
    
    
    <category term="Git" scheme="https://blog.i-xiao.space/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>我的2022年回顾总结</title>
    <link href="https://blog.i-xiao.space/posts/2756335254.html"/>
    <id>https://blog.i-xiao.space/posts/2756335254.html</id>
    <published>2022-12-22T08:12:03.000Z</published>
    <updated>2023-10-27T05:48:48.505Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>每每到年底，总会感概时间飞逝，总会莫名的心慌几天。</p><p>高中时代我就明白了一个道理：自己决定做的事，就算结果再烂以后也不要后悔，因为那无异于否定过去的自己。人不能总是否定自己的过去，因为我觉得这样会打击自己，产生心理暗示，时间拉长之后，就会觉得自己很失败难以翻身。</p><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>还记得去年春节假期期间，我在家里立下了今年的Flag（银行从业资格证、Go Web、软考、学Python），我把它写在便签上，贴到我书桌上方，一抬头就可以看见。</p><p><strong>银行从业资格证</strong>，本来是五月份考试因为疫情拖了几个月，7月16周六才考试（而且7月16那天正好住的地方封控了，只进不出。所以我周五下班之后没有回家，直接到考点附近找了一个宾馆住了一晚，第二天考完才回家）。好在两门科目都取得了不错的成绩，满分100，我考了一个78一个76，实体证书也已经拿到了。<strong>疫情是真耽误事。</strong></p><p><strong>Go Web</strong>，去年国庆节前夕开始学的Docker，我记得国庆节假期都用来学Docker了，看视频、买书、实操相结合，前后大概学了一个月左右吧。Go应该是去年11月开始学的，本来计划的是自学四个月，然后年后三四月份换一份Go开发的工作。我踏踏实实学完之后，年后面试了几个公司，面试的时候简历上的求职信息写的是前端高级/Go开发，前后面了拼多多（前端）、字节（前端）、自如（前端架构）、用友（前端）、流利说（前端）、天猫（前端）、B站（DevOps运维开发工程师）、蔚来（前端）、中国电信集成（前端）、数字马力（前端）、华为OD(没参加面试)……想不起来了，大概就这么多。主要面试的还是前端，面试的时候有的也问了一些Go语言的知识。出于一些原因，这些面试我最后都没去，还在蹲老坑，继续等机会。后来Go开发实在不好找，在社区上认识了学Go的小伙伴，我说<strong>要转Go的话，最好在现在公司可以完成内部转岗，熟悉个一年半载再出来找就好找了</strong>。到这里，成为Gopher的想法也暂时搁置了，大概率是捡不起来了。</p><p><strong>软考</strong>，因为银从延期考试导致我复习时间线被迫拉长，软考竟然错过报名了，买了书、买了视频课结果也没报名考试，有机会了明年再看看吧。</p><p><strong>学Python</strong>，这个Flag是一点都没做。前面几个只完成了一个，导致我有点不知所措，今天后半年又转到在社区上发力了，有兴趣可以看看<a href="https://home.i-xiao.space/">这里</a>，拿了不少实物、虚拟奖励，也有几百块现金奖励。</p><p>我给自己制定了一个<strong>飞书计划</strong>，这个计划主要是列举了一些技术问题点，一个个去探索，然后总结发文。用<strong>Hexo</strong>搭建了个人网站，完整的教程可以参考<a href="https://juejin.cn/post/7133927239153877022">这里</a>，建设博客连续花费了两周的午休加周末，这东西做起来强迫症又犯了，特别耗时间。</p><p>六月份的时候突发奇想跟朋友一块开发了一个<strong>React Native</strong>的软件，那段时间工作上忙的抽不开身，也是开发了一半。后来计划做的参与贡献知名<strong>开源项目</strong>、把单据架构那一套自己实现一下、开发<strong>VS code插件</strong>、<strong>Chrome扩展</strong>等还没完成。之前还想着自己部署个<strong>私服</strong>、搞个<strong>NAS</strong>，前后考虑了一下，这个太烧钱了，我没有多余的钱。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>年初跟我妈跑着看市场、店面，可以说是一时兴起，也可以说是准备了很久。总之暂时是不想了，也幸亏没有开店面，要不然真是赔的底朝天。等疫情完全过去了，再去考虑一下，应该做人做事会成熟很多，待人接物大事小情都要做到位、做的漂亮。</p><p>本来想着从上海回来离家近了，可以时常回家看看奶奶，但是被疫情搅乱了。还好一有机会我就回家看奶奶了，在家的时光总是短暂的、记忆清晰的。跟发小一块在我家院子里聊到深夜，给老院子搭个厕所，摘柿子，给奶奶做饭吃，在老家的监控设备里跟奶奶唠嗑。</p><p>上半年约了大学的好朋友好室友一块吃饭喝酒，也因为疫情没有聚到一块，希望不久的将来可以实现。</p><p>今年也不知道从什么时候开始的，喜欢看一些<strong>短视频</strong>，其中喜欢看的一类是讲述农村生活的、具有朴素生活气的视频，就跟《地球最后的夜晚》、《那山那人那狗》一样，看水壶里的凉水烧的呜呜叫，走一条很远的路。谁都希望过物质富裕的生活，一步步来就好，一切美好都值得期待。同时也希望不要迷失自我，时刻知道自己是谁，从哪里来，到哪里去。当时间沉淀了一切，我们依旧渴望获得一些朴素的情感，说一些朴素的话，获得一些朴素的情感，所有的都像麦秸一般真挚。</p><h2 id="展望2023"><a href="#展望2023" class="headerlink" title="展望2023"></a>展望2023</h2><p>不如意是常有的事，关键在于我们采取什么样的方式面对、处理。笑笑给我说了一句话，我觉得很有道理，说给大家听听，“<strong>要相信付出就会有收获，不是收获在这，就是收获在那，不是收获在这时，就是收获在那时！</strong>”所以，别着急。时人不识凌云木，直待凌云始道高。只管努力！冲破一切！</p><p>最后总结一下，想法太多了容易飘，做一件事做好、做到极致。在工作的同时，一年额外做一两件事就不得了了，以后还是找准方向、踏踏实实的做。</p><p>希望我会像十七八岁时那样勇敢、无畏、做自己，充满无穷的力量，想去的地方一下子就能飞的到，无限膨胀，膨胀到全世界都知道我的存在！</p><p><strong>今天只有残留的躯壳，迎接光辉岁月。世界是明亮的，到处是阳光！</strong></p><hr><p>我是 <a href="https://m.i-xiao.space/"><strong>甜点cc☭</strong></a></p><p>公众号：【看见另一种可能】</p><p>专注前端开发，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p></body></html>]]></content>
    
    
    <summary type="html">希望我会像十七八岁时那样勇敢、无畏、做自己，充满无穷的力量，想去的地方一下子就能飞的到，无限膨胀，膨胀到全世界都知道我的存在！</summary>
    
    
    
    <category term="代码人生" scheme="https://blog.i-xiao.space/categories/%E4%BB%A3%E7%A0%81%E4%BA%BA%E7%94%9F/"/>
    
    
    <category term="代码人生" scheme="https://blog.i-xiao.space/tags/%E4%BB%A3%E7%A0%81%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>Go | 闭包的使用</title>
    <link href="https://blog.i-xiao.space/posts/2531382131.html"/>
    <id>https://blog.i-xiao.space/posts/2531382131.html</id>
    <published>2022-12-07T08:53:48.000Z</published>
    <updated>2023-10-27T05:48:48.501Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><blockquote><p>本篇收录至<a href="https://blog.i-xiao.space/categories/Go/">Golang专栏</a>，持续更新，欢迎访问😊</p></blockquote><h1 id="闭包基本介绍"><a href="#闭包基本介绍" class="headerlink" title="闭包基本介绍"></a>闭包基本介绍</h1><p>闭包就是 <strong>一个函数</strong> 和其相关的 <strong>引用环境</strong> 组合的一个整体</p><p><strong>好处：</strong> 保存引用的变量，下次继续使用，不会销毁</p><p>下面通过闭包的方式，写一个数字累加器，体验一下闭包的妙处👇</p><h2 id="闭包实现数字累加"><a href="#闭包实现数字累加" class="headerlink" title="闭包实现数字累加"></a>闭包实现数字累加</h2><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 累加器</span></span><br><span class="line"><span class="comment">// 闭包 - 函数柯里化</span></span><br><span class="line"><span class="comment">// 返回值类型： func(int) int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUpper</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line"><span class="keyword">var</span> n <span class="type">int</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line">n = n + i</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">f := AddUpper()</span><br><span class="line">fmt.Println(f(<span class="number">1</span>)) <span class="comment">// 101</span></span><br><span class="line">fmt.Println(f(<span class="number">2</span>)) <span class="comment">// 103</span></span><br><span class="line">fmt.Println(f(<span class="number">3</span>)) <span class="comment">// 106</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h2><ol><li><p>AddUpper是一个函数，返回的数据类型 <strong>func(int) int</strong></p></li><li><p>闭包的说明</p></li></ol><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/6397d96fb1fccdcd368f168f.jpg"></p><p>返回的是一个<code>匿名函数</code>，但是这个匿名函数引用到了函数外的变量 n ，因此这个匿名函数就和 n 形成一个整体，构成闭包</p><ol start="3"><li><p>当反复调用 <code>f</code> 函数时，因为 n 只初始化一次，保存了变量的值，因此每调用一次就相当于进行了累加。</p></li><li><p>我们要搞清楚闭包，关键就是要分析<strong>返回的函数使用到哪些变量</strong></p></li></ol><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>这里我引入了一个字符串变量<code>str</code>，来帮助分析闭包是怎么保存变量的。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 累加器</span></span><br><span class="line"><span class="comment">// 闭包 - 函数柯里化</span></span><br><span class="line"><span class="comment">// 返回值类型： func(int) int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUpper</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line"><span class="keyword">var</span> n <span class="type">int</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"hello"</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line">n = n + i</span><br><span class="line">fmt.Println(<span class="string">"i="</span>, i)</span><br><span class="line">str += <span class="type">string</span>(<span class="number">36</span>) <span class="comment">// ascii 36 = '$'</span></span><br><span class="line">fmt.Printf(<span class="string">"str==%s\n"</span>, str)</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">f := AddUpper()</span><br><span class="line"><span class="comment">// fmt.Println(AddUpper()(1)) // 101</span></span><br><span class="line">fmt.Println(<span class="string">"f(1)="</span>, f(<span class="number">1</span>)) <span class="comment">// 101</span></span><br><span class="line">fmt.Println(<span class="string">"f(2)="</span>, f(<span class="number">2</span>)) <span class="comment">// 103</span></span><br><span class="line">fmt.Println(<span class="string">"f(3)="</span>, f(<span class="number">3</span>)) <span class="comment">// 106</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i= <span class="number">1</span></span><br><span class="line">str==hello$</span><br><span class="line">f(<span class="number">1</span>)= <span class="number">101</span></span><br><span class="line">i= <span class="number">2</span></span><br><span class="line">str==hello$$</span><br><span class="line">f(<span class="number">2</span>)= <span class="number">103</span></span><br><span class="line">i= <span class="number">3</span></span><br><span class="line">str==hello$$$</span><br><span class="line">f(<span class="number">3</span>)= <span class="number">106</span></span><br></pre></td></tr></tbody></table></figure><p>从输出可以看出来，闭包引用的变量<code>n</code>和<code>str</code>并没有在调用函数的时候重复声明，而是保留了下次函数调用后更新的值。</p><h1 id="闭包案例"><a href="#闭包案例" class="headerlink" title="闭包案例"></a>闭包案例</h1><p>需求：</p><ol><li><p>编写一个函数 makeSuffix(suffix string) ，可以接收一个文件后缀名，并返回一个闭包</p></li><li><p>调用闭包，可以传入一个文件名，如果该文件名没有指定后缀，则返回 文件名.jpg ，如果已经有.jpg，则返回原文件名。</p></li></ol><p>strings.HasSuffix，该函数可以判断某个字符串是否有指定的后缀。</p><h2 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h2><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSuffix</span><span class="params">(suffix <span class="type">string</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>)</span></span> <span class="type">string</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="type">string</span>)</span></span> <span class="type">string</span> {</span><br><span class="line"><span class="keyword">if</span> !strings.HasSuffix(name, suffix) {</span><br><span class="line"><span class="keyword">return</span> name + suffix</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> name</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统写法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSuffixV2</span><span class="params">(suffix <span class="type">string</span>, name <span class="type">string</span>)</span></span> <span class="type">string</span> {</span><br><span class="line"><span class="keyword">if</span> !strings.HasSuffix(name, suffix) {</span><br><span class="line"><span class="keyword">return</span> name + suffix</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> name</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line"><span class="comment">// 闭包调用</span></span><br><span class="line">f := makeSuffix(<span class="string">".jpg"</span>)</span><br><span class="line">fmt.Println(f(<span class="string">"xiao"</span>))         <span class="comment">// xiao.jpg</span></span><br><span class="line">fmt.Println(f(<span class="string">"xiaoxiao.jpg"</span>)) <span class="comment">// xiaoxiao.jpg</span></span><br><span class="line">fmt.Println(f(<span class="string">"xiaoxiao.666"</span>)) <span class="comment">// xiaoxiao.666.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统写法调用</span></span><br><span class="line">fmt.Println(<span class="string">"makeSuffixV2="</span>, makeSuffixV2(<span class="string">".jpg"</span>, <span class="string">"allblue"</span>))  <span class="comment">// makeSuffixV2= allblue.jpg</span></span><br><span class="line">fmt.Println(<span class="string">"makeSuffixV2="</span>, makeSuffixV2(<span class="string">".jpg"</span>, <span class="string">"all.blue"</span>)) <span class="comment">// makeSuffixV2= all.blue.jpg</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="代码说明-1"><a href="#代码说明-1" class="headerlink" title="代码说明"></a>代码说明</h2><p>返回的匿名函数和 makeSuffix(suffix string) 的 suffix 变量组合成一个闭包</p><p>传统写法和闭包写法实现效果一样，但是，传统写法需要重复写变量， 比如上面的</p><p><strong>makeSuffixV2(“.jpg”, “all.blue”))</strong></p><p>闭包则解决了这个问题，是代码看起来更加的简洁</p><h2 id="闭包的好处之一：-参数复用"><a href="#闭包的好处之一：-参数复用" class="headerlink" title="闭包的好处之一： 参数复用"></a>闭包的好处之一： 参数复用</h2><p>好处： 保存引用的变量，下次继续使用，不会销毁</p><h1 id="函数柯里化（闭包）"><a href="#函数柯里化（闭包）" class="headerlink" title="函数柯里化（闭包）"></a>函数柯里化（闭包）</h1><p>参考我的另一篇文章： <a href="https://www.yuque.com/xiaojt/izub4k/ps5oet">甜点cc的语雀知识库</a></p><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6368fc4816f2c2beb15b5ba6.jpg"></p><p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a>☭</p><p>微信公众号：【看见另一种可能】</p><p>专注前端开发，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p></body></html>]]></content>
    
    
    <summary type="html">闭包就是 一个函数和其相关的引用环境组合的一个整体，好处就是保存引用的变量，下次继续使用，不会销毁。</summary>
    
    
    
    <category term="Go" scheme="https://blog.i-xiao.space/categories/Go/"/>
    
    
    <category term="Go" scheme="https://blog.i-xiao.space/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go | 函数注意事项</title>
    <link href="https://blog.i-xiao.space/posts/1021065066.html"/>
    <id>https://blog.i-xiao.space/posts/1021065066.html</id>
    <published>2022-11-24T08:51:35.000Z</published>
    <updated>2023-10-27T05:48:48.501Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><blockquote><p>本篇收录至<a href="https://blog.i-xiao.space/categories/Go/">Golang专栏</a>，持续更新，欢迎访问😊</p></blockquote><h1 id="细节汇总"><a href="#细节汇总" class="headerlink" title="细节汇总"></a>细节汇总</h1><ol><li>函数的形参列表可以是多个，返回值列表也可以是多个</li><li>形参列表和返回值列表的数据类型，可以是值类型、也可以是引用类型</li><li>函数的命名遵循标识符命名规范，首字母不能是数字，首字母大写表示该函数可以被本包文件和其它文件使用，类似public；首字母小写只能被本包文件使用，类似private。</li><li>函数中的变量是局部的，外部不能访问。<strong>作用域</strong></li><li>基本数据类型和数组都是值传递的，即进行值拷贝。在函数内修改，不会影响到原来的值，</li><li>如果希望函数内的变量能够修改函数外的变量，可以传入变量的地址（**&amp;<strong>），函数内以指针的方式操作变量，从效果上看类似</strong>引用**</li><li>Go函数不支持函数重载。</li><li>在Go中，函数也是一种数据类型，可以赋值给一个变量，则该变量是一个函数类型的变量，通过该变量可以对函数调用。</li><li>函数既然是一种数据类型，因此在Go中，函数也可以作为形参，并且调用。（<strong>回调函数</strong>）</li><li>为了简化数据类型定义，Go支持自定义数据类型<br>语法： type 自定数据类型名 数据类型 // (相当于一个别名)<br>案例： <strong>type myInt int</strong>                           // 这时，myInt就等价于int来使用了<br><strong>type mySum  func(int, int) int</strong>   // 这时，mySum就等价于func(int, int) int</li><li>支持对函数返回值命名（<strong>可以不受返回值顺序限制</strong>）</li><li>使用 _ 下划线标识符，忽略返回值。（<strong>占位符</strong>）</li><li>Go支持可变参数</li></ol><h1 id="值传递和指针传递"><a href="#值传递和指针传递" class="headerlink" title="值传递和指针传递"></a>值传递和指针传递</h1><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(n1 <span class="type">int</span>)</span></span> {</span><br><span class="line">n1 = n1 + <span class="number">10</span></span><br><span class="line">fmt.Println(<span class="string">"test n1="</span>, n1)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针类型接收处理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test02</span><span class="params">(n2 *<span class="type">int</span>)</span></span> {</span><br><span class="line">*n2 = *n2 + <span class="number">10</span></span><br><span class="line">fmt.Println(<span class="string">"test02 n2="</span>, *n2)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">n1 := <span class="number">20</span></span><br><span class="line">n2 := <span class="number">2</span></span><br><span class="line">test(n1) <span class="comment">// 值类型</span></span><br><span class="line">test02(&amp;n2) <span class="comment">// 指针类型</span></span><br><span class="line">fmt.Println(<span class="string">"main n1="</span>, n1)</span><br><span class="line">fmt.Println(<span class="string">"main n2="</span>, n2)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="什么是重载"><a href="#什么是重载" class="headerlink" title="什么是重载"></a>什么是重载</h1><p>重载： 函数名相同，但是形参不同或者数据类型不同的情况<br>Golang语言中是不支持传统的函数重载的，<code>fn redeclared in this block</code><br>Golang语言是支持可变参数的，<strong>空接口</strong>的形式</p><p><img data-src="/images/base/loading03.svg" data-original="https://pic.imgdb.cn/item/637f31c216f2c2beb1c2f216.jpg"></p><h1 id="函数类型的变量"><a href="#函数类型的变量" class="headerlink" title="函数类型的变量"></a>函数类型的变量</h1><p>类型： <strong>func(int, int) int</strong></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSum</span><span class="params">(n1 <span class="type">int</span>, n2 <span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line"><span class="keyword">return</span> n1 + n2</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSums</span><span class="params">(n1 <span class="type">int</span>, n2 <span class="type">int</span>, n3 <span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line"><span class="keyword">return</span> n1 + n2 + n3</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// main 函数</span></span><br><span class="line">sumFn := getSum</span><br><span class="line">res := sumFn(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">fmt.Printf(<span class="string">"%T %v\n"</span>, res, res) <span class="comment">// int 30</span></span><br><span class="line">fmt.Printf(<span class="string">"%T \n"</span>, sumFn) <span class="comment">// func(int, int) int</span></span><br><span class="line"></span><br><span class="line">sumsFn := getSums</span><br><span class="line">result := sumsFn(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">fmt.Printf(<span class="string">"result : %T %v\n"</span>, result, result) <span class="comment">// result : int 60</span></span><br><span class="line">fmt.Printf(<span class="string">"sumsFn类型：%T \n"</span>, sumFn) <span class="comment">// sumsFn类型：func(int, int) int</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="函数作为形参传入"><a href="#函数作为形参传入" class="headerlink" title="函数作为形参传入"></a>函数作为形参传入</h1><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSum</span><span class="params">(n1 <span class="type">int</span>, n2 <span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line"><span class="keyword">return</span> n1 + n2</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testFn</span><span class="params">(fnVar <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>, num1 <span class="type">int</span>, num2 <span class="type">int</span>) <span class="type">int</span> {</span><br><span class="line"><span class="keyword">return</span> fnVar(num1, num2) <span class="comment">// 调用传入的函数，并返回值</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数类型形参</span></span><br><span class="line">sumFn := getSum</span><br><span class="line">total := testFn(sumFn, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fmt.Println(<span class="string">"total="</span>, total) <span class="comment">// 3</span></span><br></pre></td></tr></tbody></table></figure><h1 id="自定义数据类型"><a href="#自定义数据类型" class="headerlink" title="自定义数据类型"></a>自定义数据类型</h1><ol><li>自定义函数数据类型， 相当于起了一个别名</li></ol><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> mySum <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testFn</span><span class="params">(fnVar mySum, num1 <span class="type">int</span>, num2 <span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line"><span class="keyword">return</span> fnVar(num1, num2)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// func testFn(fnVar func(int, int) int, num1 int, num2 int) int {</span></span><br><span class="line"><span class="comment">// return fnVar(num1, num2)</span></span><br><span class="line"><span class="comment">// }</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>自定义数据类型</li></ol><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main函数下</span></span><br><span class="line"><span class="keyword">type</span> myInt <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> num1 myInt = <span class="number">2</span></span><br><span class="line"><span class="comment">// var num2 int = num1 // 这样是报错的， myInt和int并不等价</span></span><br><span class="line"><span class="keyword">var</span> num2 <span class="type">int</span> = <span class="type">int</span>(num1) <span class="comment">// 显式类型转换</span></span><br><span class="line">fmt.Printf(<span class="string">"num1的类型：%T 值：%v \n"</span>, num1, num1) <span class="comment">// num1的类型：main.myInt 值：2</span></span><br><span class="line">fmt.Printf(<span class="string">"num2的类型：%T 值：%v \n"</span>, num2, num2) <span class="comment">// num2的类型：int 值：2</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>定义的类型: 包名.类型名，如：<code>utils.myInt</code><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下是utils包</span></span><br><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFn</span><span class="params">()</span></span> <span class="type">string</span> {</span><br><span class="line">fmt.Println(<span class="string">"TestFn 函数被调用"</span>)</span><br><span class="line"><span class="keyword">type</span> myInt <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> n myInt = <span class="number">10</span></span><br><span class="line">fmt.Printf(<span class="string">"n的类型：%T 值：%v"</span>, n, n) <span class="comment">// n的类型：utils.myInt 值：10</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"hahaha"</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><h1 id="返回值命名"><a href="#返回值命名" class="headerlink" title="返回值命名"></a>返回值命名</h1><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumSub</span><span class="params">(n1 <span class="type">int</span>, n2 <span class="type">int</span>)</span></span> (sum <span class="type">int</span>, sub <span class="type">int</span>) {</span><br><span class="line">    <span class="comment">// 这里不需要声明sum, sub变量了，也不用在return时写</span></span><br><span class="line">sum = n1 + n2</span><br><span class="line">sub = n1 - n2</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// main函数</span></span><br><span class="line">sum, sub := sumSub(<span class="number">9</span>, <span class="number">8</span>)</span><br><span class="line">fmt.Println(<span class="string">"sum="</span>, sum, <span class="string">"sub="</span>, sub) <span class="comment">// sum= 17 sub= 1</span></span><br></pre></td></tr></tbody></table></figure><h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><p>基本语法<br><strong>1、支持零到多个参数</strong><br><code>func sum(args... int) {}</code><br><strong>2、支持1到多个参数</strong><br><code>func sum(n1 int, args... int) {}</code><br>args：就是一个承接的变量名，可以自定义，如：<code>func sum(n1 int, **vars**... int) {}</code></p><p>说明：</p><ul><li>args是slice切片，通过<code>args[index]</code>可以访问到各个值</li><li>args必须放到形参列表的最后面</li></ul><p>参数个数可变</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumV2</span><span class="params">(n1 <span class="type">int</span>, args ...<span class="type">int</span>)</span></span> <span class="type">int</span> {</span><br><span class="line">sum := n1</span><br><span class="line">fmt.Printf(<span class="string">"args类型是：%T\n"</span>, args) <span class="comment">// args类型是：[]int</span></span><br><span class="line"><span class="comment">// 遍历args切片</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(args); i++ {</span><br><span class="line">sum += args[i]</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// main函数</span></span><br><span class="line"><span class="comment">// 参数可变</span></span><br><span class="line">total02 := sumV2(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">fmt.Println(<span class="string">"total02="</span>, total02) <span class="comment">// total02= 10</span></span><br></pre></td></tr></tbody></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>交换变量a, b的值</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(n1 *<span class="type">int</span>, n2 *<span class="type">int</span>)</span></span> {</span><br><span class="line">*n1 = *n1 + *n2</span><br><span class="line">*n2 = *n1 - *n2 <span class="comment">// *n1</span></span><br><span class="line">*n1 = *n1 - *n2 <span class="comment">// *n2</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">a := <span class="number">12</span></span><br><span class="line">b := <span class="number">20</span></span><br><span class="line">swap(&amp;a, &amp;b)</span><br><span class="line">fmt.Println(<span class="string">"a = "</span>, a, <span class="string">"b = "</span>, b)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a>☭</p><p>微信公众号：【看见另一种可能】</p><p>热爱前端开发，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p><p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。数风流人物还看中国、看今朝、看你我。</p></body></html>]]></content>
    
    
    <summary type="html">函数注意事项和使用细节</summary>
    
    
    
    <category term="Go" scheme="https://blog.i-xiao.space/categories/Go/"/>
    
    
    <category term="Go" scheme="https://blog.i-xiao.space/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置文件</title>
    <link href="https://blog.i-xiao.space/posts/220664946.html"/>
    <id>https://blog.i-xiao.space/posts/220664946.html</id>
    <published>2022-11-21T10:47:59.000Z</published>
    <updated>2023-10-27T05:48:48.505Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>云服务器到期了，备份一下<code>nginx</code>的配置文件😊</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="comment"># 启动进程，通常设置成和cpu数量相等</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 起到 ulimit -a 的作用</span></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> {</span><br><span class="line">  <span class="comment"># epoll 是多路复用IO(I/O Multiplexing)中的一种方式</span></span><br><span class="line">  <span class="comment"># use epoll;</span></span><br><span class="line">  <span class="comment"># 单个worker processes 进程最大并发连接数，worker_connections小于work_rlimit_nofile</span></span><br><span class="line">  <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> {</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 关闭在错误页面中nginx的版本信息</span></span><br><span class="line">  <span class="attribute">server_tokens</span>   <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 反向代理设置为on, fastdfs设置为off</span></span><br><span class="line">  <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">  <span class="comment"># 在一个数据包里发送所有头文件</span></span><br><span class="line">  <span class="attribute">tcp_nopush</span>     <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">  <span class="attribute">tcp_nodelay</span>        <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">gzip</span>  <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">gzip_static</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</span><br><span class="line">  <span class="attribute">gzip_types</span> text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">  <span class="attribute">gzip_disable</span> <span class="string">"MSIE [1-6]."</span>;</span><br><span class="line">  <span class="comment"># 打开缓存的同时也指定了缓存最大数目，以及缓存的时间。我们可以设置一个相对高的最大时间，这样我们可以在它们不活动超过20秒后清除掉。</span></span><br><span class="line">  <span class="attribute">open_file_cache</span> max=<span class="number">65535</span> inactive=<span class="number">60s</span>;</span><br><span class="line">  <span class="comment"># 在open_file_cache中指定检测正确信息的间隔时间。</span></span><br><span class="line">  <span class="attribute">open_file_cache_valid</span> <span class="number">80s</span>;</span><br><span class="line">  <span class="comment"># 定义了open_file_cache中指令参数不活动时间期间里最小的文件数。</span></span><br><span class="line">  <span class="attribute">open_file_cache_min_uses</span> <span class="number">1</span>;</span><br><span class="line">  <span class="comment"># 指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件。我们也包括了服务器模缺，这些是在不同文件中定义的，如果你的服务模块不再这些位置，你就得修正这一行来指定正确的位置</span></span><br><span class="line">  <span class="attribute">open_file_cache_errors</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 设置请求头缓冲</span></span><br><span class="line">  <span class="comment"># 客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1x，不过由于一般系统分页都要大于1k，所以这里设置分页大小。分页大小用命令 getconf PAGESIZE 获得</span></span><br><span class="line">  <span class="attribute">client_header_buffer_size</span> <span class="number">4096</span>;</span><br><span class="line">  <span class="attribute">client_body_buffer_size</span> <span class="number">512k</span>;</span><br><span class="line">  <span class="comment"># 缓冲区代理缓冲用户端请求的最大字节数,如果请求大于指定的大小，则NGINX发回HTTP 413（Raquest Entity too large）错误.</span></span><br><span class="line">  <span class="attribute">client_max_body_size</span> <span class="number">128m</span>;</span><br><span class="line">  <span class="attribute">large_client_header_buffers</span> <span class="number">4</span> <span class="number">128k</span>;</span><br><span class="line">  <span class="attribute">client_header_timeout</span> <span class="number">15</span>;</span><br><span class="line">  <span class="attribute">client_body_timeout</span> <span class="number">15</span>;</span><br><span class="line">  <span class="comment"># 指定客户端的响应超时时间</span></span><br><span class="line">  <span class="attribute">send_timeout</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">18600</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  <span class="number">0.0.0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / {</span><br><span class="line">      <span class="attribute">root</span>   D:\mine-project\pc-web\dist;</span><br><span class="line">      <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">      <span class="attribute">try_files</span>  <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">      <span class="comment"># add_header Cache-Control no-cache;</span></span><br><span class="line">      <span class="comment"># add_header Content-Encoding gzip;</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /pcApi/ {</span><br><span class="line">      <span class="attribute">rewrite</span><span class="regexp"> ^/pcApi/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>; <span class="comment"># 把请求路径里不存在的路径重写掉</span></span><br><span class="line">      <span class="attribute">proxy_pass</span> http://172.15.37.225:3000;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="section">location</span> = /50x.html {</span><br><span class="line">      <span class="attribute">root</span>   html;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># server {</span></span><br><span class="line">    <span class="comment">#listen 80;</span></span><br><span class="line">    <span class="comment">#server_name 123.123.123.123;</span></span><br><span class="line">    <span class="comment">#server_name my.example.com t.example.com;</span></span><br><span class="line">    <span class="comment">#rewrite ^/(.*) https://${host}:1900/$1 redirect;</span></span><br><span class="line">    <span class="comment">#}</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server {</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / {</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    }</span></span><br><span class="line">    <span class="comment">#}</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server {</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / {</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    }</span></span><br><span class="line">    <span class="comment">#}</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># https配置 80转发443</span></span><br><span class="line">    <span class="comment">#server {</span></span><br><span class="line">      <span class="comment">#    listen        80;</span></span><br><span class="line">      <span class="comment">#    server_name   www.i-xiao.space;</span></span><br><span class="line">      <span class="comment">#    #server_name   118.190.59.105;</span></span><br><span class="line">      <span class="comment">#    rewrite       ^ https://$server_name$request_uri permanent; # http -&gt; https 80端口转发443端口</span></span><br><span class="line">      <span class="comment">#    # rewrite       ^ https://$server_name:8090 permanent;</span></span><br><span class="line">      <span class="comment">#    #charset koi8-r;</span></span><br><span class="line">      <span class="comment">#    add_header Cache-Control no-cache;</span></span><br><span class="line">    <span class="comment">#}</span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> {</span><br><span class="line">       <span class="comment">#监听443端口</span></span><br><span class="line">       <span class="attribute">listen</span>               <span class="number">443</span>;</span><br><span class="line">       <span class="comment">#你的域名</span></span><br><span class="line">       <span class="comment">#server_name          i-xiao.space;</span></span><br><span class="line">       <span class="attribute">ssl</span>                  <span class="literal">on</span>;</span><br><span class="line">       <span class="attribute">root</span>                 /usr/local/nginx/html;</span><br><span class="line">       <span class="comment">#index index.html index.htm;</span></span><br><span class="line">       <span class="attribute">ssl_certificate</span>      /usr/local/nginx/cert/i-xiao.space.pem;</span><br><span class="line">       <span class="attribute">ssl_certificate_key</span>  /usr/local/nginx/cert/i-xiao.space.key;</span><br><span class="line">       <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line">       <span class="attribute">ssl_ciphers</span>          ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">       <span class="attribute">ssl_protocols</span>        TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">       <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">       <span class="section">location</span> / {</span><br><span class="line">           <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">       <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line"></span><br><span class="line">           <span class="comment"># To allow POST on static pages 允许静态页使用POST方法</span></span><br><span class="line">           <span class="attribute">error_page</span>  <span class="number">405</span> =<span class="number">200</span> <span class="variable">$uri</span>;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 禁用缓存</span></span><br><span class="line">       <span class="section">location</span> = /index.html {</span><br><span class="line">            <span class="attribute">add_header</span> Cache-Control <span class="string">"no-cache, no-store"</span>;</span><br><span class="line">       }</span><br><span class="line">       <span class="section">location</span> /lily {</span><br><span class="line">             <span class="comment">#alias /usr/local/nginx/html/lily/;#把匹配到的路径重写, 注意要以/结尾</span></span><br><span class="line">             <span class="attribute">root</span> /usr/local/nginx/html; <span class="comment">#在匹配到的路径前面，增加root基础路径配置</span></span><br><span class="line">             <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /lily/index.html; <span class="comment"># 指定特定路径</span></span><br><span class="line">             <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">        }</span><br><span class="line">        <span class="section">location</span> /mimosa {</span><br><span class="line">             <span class="comment">#alias /usr/local/nginx/html/mimosa/;</span></span><br><span class="line">             <span class="attribute">root</span> /usr/local/nginx/html;</span><br><span class="line">             <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /mimosa/index.html;</span><br><span class="line">             <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">        }</span><br><span class="line">        <span class="section">location</span> /pcApi/ {</span><br><span class="line">             <span class="attribute">proxy_pass</span> http://118.190.59.105:3000/;</span><br><span class="line">        }</span><br><span class="line">        <span class="section">location</span> /supervisor/ {</span><br><span class="line">             <span class="attribute">proxy_pass</span> http://118.190.59.105:9001/;</span><br><span class="line">        }</span><br><span class="line">        <span class="section">location</span> /pc/ {</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://118.190.59.105:8090/;</span><br><span class="line">            <span class="comment"># try_files $uri $uri/ /index.html;</span></span><br><span class="line">            <span class="comment"># index index.html index.htm;</span></span><br><span class="line">        }</span><br><span class="line">        <span class="section">location</span> /h5/ {</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://118.190.59.105:8001/;</span><br><span class="line">            <span class="attribute">add_header</span> Cache-Control <span class="literal">no</span>-cache;</span><br><span class="line">        }</span><br><span class="line">        <span class="section">location</span> /student/ {</span><br><span class="line">            <span class="comment"># 暂时不正确访问</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://118.190.59.105:3000/;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment"># 静态文件-人脸识别模型文件</span></span><br><span class="line">        <span class="section">location</span> /model-face/ {</span><br><span class="line">            <span class="attribute">root</span> /var/pc-h5/static;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Credentials'</span> <span class="string">'true'</span>;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET, POST, OPTIONS'</span>;</span><br><span class="line">            <span class="attribute">add_header</span> Cache-Control <span class="literal">no</span>-cache;</span><br><span class="line">            <span class="comment"># add_header Content-Encoding gzip;</span></span><br><span class="line">            <span class="comment"># add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';</span></span><br><span class="line">        }</span><br><span class="line">        <span class="section">location</span> /static/ {</span><br><span class="line">            <span class="attribute">root</span> /var/pc-h5;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</span><br><span class="line">            <span class="attribute">add_header</span> Cache-Control <span class="literal">no</span>-cache;</span><br><span class="line">        }</span><br><span class="line">       <span class="attribute">error_page</span>  <span class="number">404</span>              /<span class="number">404</span>.html;</span><br><span class="line">       <span class="attribute">error_page</span>  <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">       <span class="section">location</span> = /50x.html {</span><br><span class="line">             <span class="attribute">root</span>   html;</span><br><span class="line">       }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    
    <summary type="html">云服务器到期了，备份一下nginx的配置文件😊</summary>
    
    
    
    <category term="nginx" scheme="https://blog.i-xiao.space/categories/nginx/"/>
    
    
    <category term="nginx" scheme="https://blog.i-xiao.space/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript代码是怎么在浏览器里面运行的？</title>
    <link href="https://blog.i-xiao.space/posts/3718582230.html"/>
    <id>https://blog.i-xiao.space/posts/3718582230.html</id>
    <published>2022-11-10T04:53:01.000Z</published>
    <updated>2023-10-27T05:48:48.501Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><blockquote><p>JavaScript代码是怎么在浏览器里面运行的？下面让我们从浏览器内核和JS引擎两方面简单探索一下</p></blockquote><h2 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h2><p>浏览器内核是什么东西。英文叫做：Rendering Engine，常见的叫法如：排版引擎、解释引擎、渲染引擎，现在流行称为浏览器内核</p><table><thead><tr><th>浏览器</th><th>内核</th><th>备注</th></tr></thead><tbody><tr><td>IE</td><td>Trident</td><td>IE、猎豹安全、360极速浏览器、百度浏览器</td></tr><tr><td>FireFox</td><td>Gecko</td><td>可惜这几年已经没落了，打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。</td></tr><tr><td>Safari</td><td>Webkit</td><td>从Safari推出之时起，它的渲染引擎就是Webkit，一提到 webkit，首先想到的便是 chrome，可以说，chrome 将 Webkit内核 深入人心，殊不知，Webkit 的鼻祖其实是 Safari。</td></tr><tr><td>Chrome</td><td>Chromium/Blink</td><td>在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。大部分国产浏览器最新版都采用Blink内核。二次开发</td></tr><tr><td>Opera</td><td>Blink</td><td></td></tr></tbody></table><h2 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h2><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/636c858716f2c2beb1bf0eae.jpg"></p><ol><li>HTML首先会被浏览器内核中的HTML Parser解析，最终会构建成一颗<strong>DOM树</strong></li><li>css会被浏览器内核中的CSS Parser解析，形成<strong>css规则</strong>，css规则和DOM树结合形成一个<strong>渲染树</strong>，通过<strong>layout</strong>（布局）生成最终的渲染树。为什么要有layout呢？因为要适配不同尺寸的屏幕。有了渲染树之后就可以绘制展现出来了。</li></ol><h2 id="常见的js引擎"><a href="#常见的js引擎" class="headerlink" title="常见的js引擎"></a>常见的js引擎</h2><p>● SpiderMonkey：第一款js引擎，由Brendan Eich开发（js作者）。<br>● Chakra：微软开发，由于IE浏览器。<br>● javascriptCore：webkit的js引擎，Apple公司开发。<br>● V8：Google开发的强大js引擎，也帮助Chrome从众多浏览器中脱颖而出。</p><h2 id="浏览器内核和js引擎的关系"><a href="#浏览器内核和js引擎的关系" class="headerlink" title="浏览器内核和js引擎的关系"></a>浏览器内核和js引擎的关系</h2><p>这里用webkit为列，webkit最重要的两部分：</p><ol><li>WebCore： 负责HTML、CSS的解析、布局、渲染等相关工作；</li><li>JavascriptCore：解析、执行js代码。</li></ol><p>下面是Chromium的架构图</p><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/636c85a316f2c2beb1bf33a5.jpg"></p><h2 id="普通JavaScript引擎（笨重）"><a href="#普通JavaScript引擎（笨重）" class="headerlink" title="普通JavaScript引擎（笨重）"></a>普通JavaScript引擎（笨重）</h2><p><strong>作用</strong>：javascript引擎帮助我们将js代码编译成CPU认识的指令集，最终被cpu执行。</p><blockquote><p>当然除了编译之外还要负责执行以及内存的管理。 js是解释形语言，由引擎直接读取源码，一边编译一边执行，这样效率相对较低，而编译形语言（如c++）是把源码直接编译成可直接执行的代码执行效率更高。</p></blockquote><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/636c85ba16f2c2beb1bf617d.jpg"></p><p>随着技术的发展，对JavaScript性能的要求越来越高，V8引擎就是在此背景下产生的，它产生的目的就是为了提高javascript执行的性能。</p><h2 id="V8引擎（轻量）"><a href="#V8引擎（轻量）" class="headerlink" title="V8引擎（轻量）"></a>V8引擎（轻量）</h2><p>V8是用C++编写的Google开源的高性能js引擎，v8可以独立运行，亦可以嵌入到任何c++程序中，所以node.js可以运行js代码。</p><h3 id="将javascript代码转换成AST"><a href="#将javascript代码转换成AST" class="headerlink" title="将javascript代码转换成AST"></a><strong>将javascript代码转换成AST</strong></h3><p>V8引擎会先将javascript代码转换成AST（抽象语法树），而事实上无论使用什么编程语言都会将源代码解析成抽象语法树（abstract syntax tree, AST）。AST是计算机科学中很早的一个概念，不是V8特有的（只是V8在转换过程中做了非常多的优化），更不是javascript特有的。</p><h3 id="AST的用途"><a href="#AST的用途" class="headerlink" title="AST的用途"></a>AST的用途</h3><p>AST的作用也不仅仅是用来在V8的编译上，比如我们常用的babel插件将 es6-&gt;es5 、ts-&gt;js 、死区分析、Dead Code、编译压缩打包、css预处理器、eslint等等，这些功能的实现都离不开AST。</p><h3 id="AST编译过程"><a href="#AST编译过程" class="headerlink" title="AST编译过程"></a>AST编译过程</h3><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/636c85c516f2c2beb1bfbae3.jpg"></p><h3 id="V8执行js的流程"><a href="#V8执行js的流程" class="headerlink" title="V8执行js的流程"></a>V8执行js的流程</h3><ol><li>浏览器内核将源码<strong>以流的方式</strong>交给v8引擎，v8引擎获取到源码并进行编码转换</li><li>词法分析scanner，将代码转成tokens</li><li>语法分析Parser、Preparser，直接将tokens转换成AST树结构</li><li>字节码生成<blockquote><ol><li>parser就是直接将tokens转换成AST树结构</li><li>preParse称之为预解析，为什么需要预解析呢？</li></ol><ul><li>这是因为并不是所有的js代码一开始就会被执行，如果对所有的js代码都进行解析，会影响网页运行效率。所以v8引擎就实现了<strong>延迟解析</strong>的方案，将不必要的函数进行预解析，也就是只解析暂时需要的内容，而对函数的全量解析是在函数被调用时才会进行；</li><li>比如我们在一个函数outer内部定义了另外一个函数inner，那么inner函数就会进行预解析；</li></ul></blockquote></li></ol><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/636c85ef16f2c2beb1c00095.jpg"></p><p><img data-src="/images/base/loading03.svg" data-original="https://pic1.imgdb.cn/item/6368fc4816f2c2beb15b5ba6.jpg"></p><p>我是 <a href="https://blog.i-xiao.space/"><strong>甜点cc</strong></a>☭</p><p>微信公众号：【看见另一种可能】</p><p>热爱前端开发，也喜欢专研各种跟本职工作关系不大的技术，技术、产品兴趣广泛且浓厚。本号主要致力于分享个人经验总结，希望可以给一小部分人一些微小帮助。</p><p>希望能和大家一起努力营造一个良好的学习氛围，为了个人和家庭、为了我国的互联网物联网技术、数字化转型、数字经济发展做一点点贡献。数风流人物还看中国、看今朝、看你我。</p></body></html>]]></content>
    
    
    <summary type="html">页面是怎么被浏览器渲染展现出来的？JavaScript又是怎么被执行的？让我们从浏览器内核和JS引擎两方面简单探索一下。</summary>
    
    
    
    <category term="前端" scheme="https://blog.i-xiao.space/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="V8" scheme="https://blog.i-xiao.space/tags/V8/"/>
    
    <category term="浏览器" scheme="https://blog.i-xiao.space/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
</feed>
